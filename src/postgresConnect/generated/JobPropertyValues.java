package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: job_property_values
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: job_property_values
 * - Primary Keys: facility_use_case_property_mapping_id, jobs_id
 * 
 * Check Constraints:
 * - 2200_221605_3_not_null: jobs_id IS NOT NULL
 * - 2200_221605_7_not_null: modified_by IS NOT NULL
 * - 2200_221605_5_not_null: modified_at IS NOT NULL
 * - 2200_221605_2_not_null: facility_use_case_property_mapping_id IS NOT NULL
 * - 2200_221605_4_not_null: created_at IS NOT NULL
 * - 2200_221605_6_not_null: created_by IS NOT NULL
 * 
 * Foreign Keys:
 * - facility_use_case_property_mapping_id → facility_use_case_property_mapping.id
 * - jobs_id → jobs.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class JobPropertyValues implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: value
     * Type: varchar(255)
     */
    private String value;

    /**
     * Database column: facility_use_case_property_mapping_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → facility_use_case_property_mapping.id
     */
    private Long facilityUseCasePropertyMappingId;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public JobPropertyValues() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param value value
     * @param facilityUseCasePropertyMappingId facility_use_case_property_mapping_id
     * @param jobsId jobs_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     */
    public JobPropertyValues(String value, Long facilityUseCasePropertyMappingId, Long jobsId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy) {
        this.value = value;
        this.facilityUseCasePropertyMappingId = facilityUseCasePropertyMappingId;
        this.jobsId = jobsId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of value
     * @return String value of value
     */
    public String getValue() {
        return this.value;
    }

    /**
     * Sets the value of value
     * @param value new value for value
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Gets the value of facility_use_case_property_mapping_id
     * @return Long value of facility_use_case_property_mapping_id
     */
    public Long getFacilityUseCasePropertyMappingId() {
        return this.facilityUseCasePropertyMappingId;
    }

    /**
     * Sets the value of facility_use_case_property_mapping_id
     * @param facilityUseCasePropertyMappingId new value for facility_use_case_property_mapping_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFacilityUseCasePropertyMappingId(Long facilityUseCasePropertyMappingId) {
        if (facilityUseCasePropertyMappingId == null) {
            throw new IllegalArgumentException("facility_use_case_property_mapping_id cannot be null (NOT NULL constraint)");
        }
        this.facilityUseCasePropertyMappingId = facilityUseCasePropertyMappingId;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.facilityUseCasePropertyMappingId == null) {
            violations.add("facility_use_case_property_mapping_id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        JobPropertyValues other = (JobPropertyValues) obj;
        return Objects.equals(this.facilityUseCasePropertyMappingId, other.facilityUseCasePropertyMappingId) && Objects.equals(this.jobsId, other.jobsId);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.facilityUseCasePropertyMappingId, this.jobsId);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "JobPropertyValues{" +
                "value=" + value +
                ", facilityUseCasePropertyMappingId=" + facilityUseCasePropertyMappingId +
                ", jobsId=" + jobsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
