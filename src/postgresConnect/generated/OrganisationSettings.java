package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: organisation_settings
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: organisation_settings
 * - Primary Keys: id
 * 
 * Indexes:
 * - uk_e569e2kfei3fndvp2h698faw6 (UNIQUE): organisations_id
 * 
 * Unique Constraints:
 * - uk_e569e2kfei3fndvp2h698faw6: organisations_id
 * 
 * Check Constraints:
 * - 2200_221630_1_not_null: id IS NOT NULL
 * - 2200_221630_2_not_null: created_at IS NOT NULL
 * - 2200_221630_4_not_null: modified_at IS NOT NULL
 * - 2200_221630_8_not_null: organisations_id IS NOT NULL
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - organisations_id → organisations.id
 */
public class OrganisationSettings implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: modified_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: auto_unlock_after
     * Type: int4(10)
     */
    private Integer autoUnlockAfter;

    /**
     * Database column: max_failed_login_attempts
     * Type: int4(10)
     */
    private Integer maxFailedLoginAttempts;

    /**
     * Database column: organisations_id
     * Type: int8(19) NOT NULL
     * Foreign Key → organisations.id
     * Unique Constraint: uk_e569e2kfei3fndvp2h698faw6
     */
    private Long organisationsId;

    /**
     * Database column: password_reset_token_expiration
     * Type: int4(10)
     */
    private Integer passwordResetTokenExpiration;

    /**
     * Database column: registration_token_expiration
     * Type: int4(10)
     */
    private Integer registrationTokenExpiration;

    /**
     * Database column: session_idle_timeout
     * Type: int4(10)
     */
    private Integer sessionIdleTimeout;

    /**
     * Database column: logo_url
     * Type: varchar(255)
     */
    private String logoUrl;

    /**
     * Database column: max_failed_additional_verification_attempts
     * Type: int4(10)
     * Default: 3
     */
    private Integer maxFailedAdditionalVerificationAttempts;

    /**
     * Database column: max_failed_challenge_question_attempts
     * Type: int4(10)
     * Default: 3
     */
    private Integer maxFailedChallengeQuestionAttempts;

    /**
     * Database column: extras
     * Type: jsonb(2147483647)
     * Default: '{}'::jsonb
     */
    private String extras;

    /**
     * Database column: feature_flags
     * Type: jsonb(2147483647)
     * Default: '{"metabaseReports": false}'::jsonb
     */
    private String featureFlags;

    /**
     * Default constructor
     */
    public OrganisationSettings() {
        // Initialize with default values where applicable
        this.maxFailedAdditionalVerificationAttempts = 3; // Default value
        this.maxFailedChallengeQuestionAttempts = 3; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param createdAt created_at
     * @param createdBy created_by
     * @param modifiedAt modified_at
     * @param modifiedBy modified_by
     * @param autoUnlockAfter auto_unlock_after
     * @param maxFailedLoginAttempts max_failed_login_attempts
     * @param organisationsId organisations_id
     * @param passwordResetTokenExpiration password_reset_token_expiration
     * @param registrationTokenExpiration registration_token_expiration
     * @param sessionIdleTimeout session_idle_timeout
     * @param logoUrl logo_url
     * @param maxFailedAdditionalVerificationAttempts max_failed_additional_verification_attempts
     * @param maxFailedChallengeQuestionAttempts max_failed_challenge_question_attempts
     * @param extras extras
     * @param featureFlags feature_flags
     */
    public OrganisationSettings(Long id, Long createdAt, Long createdBy, Long modifiedAt, Long modifiedBy, Integer autoUnlockAfter, Integer maxFailedLoginAttempts, Long organisationsId, Integer passwordResetTokenExpiration, Integer registrationTokenExpiration, Integer sessionIdleTimeout, String logoUrl, Integer maxFailedAdditionalVerificationAttempts, Integer maxFailedChallengeQuestionAttempts, String extras, String featureFlags) {
        this.id = id;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.modifiedAt = modifiedAt;
        this.modifiedBy = modifiedBy;
        this.autoUnlockAfter = autoUnlockAfter;
        this.maxFailedLoginAttempts = maxFailedLoginAttempts;
        this.organisationsId = organisationsId;
        this.passwordResetTokenExpiration = passwordResetTokenExpiration;
        this.registrationTokenExpiration = registrationTokenExpiration;
        this.sessionIdleTimeout = sessionIdleTimeout;
        this.logoUrl = logoUrl;
        this.maxFailedAdditionalVerificationAttempts = maxFailedAdditionalVerificationAttempts;
        this.maxFailedChallengeQuestionAttempts = maxFailedChallengeQuestionAttempts;
        this.extras = extras;
        this.featureFlags = featureFlags;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of auto_unlock_after
     * @return Integer value of auto_unlock_after
     */
    public Integer getAutoUnlockAfter() {
        return this.autoUnlockAfter;
    }

    /**
     * Sets the value of auto_unlock_after
     * @param autoUnlockAfter new value for auto_unlock_after
     */
    public void setAutoUnlockAfter(Integer autoUnlockAfter) {
        this.autoUnlockAfter = autoUnlockAfter;
    }

    /**
     * Gets the value of max_failed_login_attempts
     * @return Integer value of max_failed_login_attempts
     */
    public Integer getMaxFailedLoginAttempts() {
        return this.maxFailedLoginAttempts;
    }

    /**
     * Sets the value of max_failed_login_attempts
     * @param maxFailedLoginAttempts new value for max_failed_login_attempts
     */
    public void setMaxFailedLoginAttempts(Integer maxFailedLoginAttempts) {
        this.maxFailedLoginAttempts = maxFailedLoginAttempts;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (uk_e569e2kfei3fndvp2h698faw6)
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null (NOT NULL constraint)");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of password_reset_token_expiration
     * @return Integer value of password_reset_token_expiration
     */
    public Integer getPasswordResetTokenExpiration() {
        return this.passwordResetTokenExpiration;
    }

    /**
     * Sets the value of password_reset_token_expiration
     * @param passwordResetTokenExpiration new value for password_reset_token_expiration
     */
    public void setPasswordResetTokenExpiration(Integer passwordResetTokenExpiration) {
        this.passwordResetTokenExpiration = passwordResetTokenExpiration;
    }

    /**
     * Gets the value of registration_token_expiration
     * @return Integer value of registration_token_expiration
     */
    public Integer getRegistrationTokenExpiration() {
        return this.registrationTokenExpiration;
    }

    /**
     * Sets the value of registration_token_expiration
     * @param registrationTokenExpiration new value for registration_token_expiration
     */
    public void setRegistrationTokenExpiration(Integer registrationTokenExpiration) {
        this.registrationTokenExpiration = registrationTokenExpiration;
    }

    /**
     * Gets the value of session_idle_timeout
     * @return Integer value of session_idle_timeout
     */
    public Integer getSessionIdleTimeout() {
        return this.sessionIdleTimeout;
    }

    /**
     * Sets the value of session_idle_timeout
     * @param sessionIdleTimeout new value for session_idle_timeout
     */
    public void setSessionIdleTimeout(Integer sessionIdleTimeout) {
        this.sessionIdleTimeout = sessionIdleTimeout;
    }

    /**
     * Gets the value of logo_url
     * @return String value of logo_url
     */
    public String getLogoUrl() {
        return this.logoUrl;
    }

    /**
     * Sets the value of logo_url
     * @param logoUrl new value for logo_url
     */
    public void setLogoUrl(String logoUrl) {
        this.logoUrl = logoUrl;
    }

    /**
     * Gets the value of max_failed_additional_verification_attempts
     * @return Integer value of max_failed_additional_verification_attempts
     */
    public Integer getMaxFailedAdditionalVerificationAttempts() {
        return this.maxFailedAdditionalVerificationAttempts;
    }

    /**
     * Sets the value of max_failed_additional_verification_attempts
     * @param maxFailedAdditionalVerificationAttempts new value for max_failed_additional_verification_attempts
     */
    public void setMaxFailedAdditionalVerificationAttempts(Integer maxFailedAdditionalVerificationAttempts) {
        this.maxFailedAdditionalVerificationAttempts = maxFailedAdditionalVerificationAttempts;
    }

    /**
     * Gets the value of max_failed_challenge_question_attempts
     * @return Integer value of max_failed_challenge_question_attempts
     */
    public Integer getMaxFailedChallengeQuestionAttempts() {
        return this.maxFailedChallengeQuestionAttempts;
    }

    /**
     * Sets the value of max_failed_challenge_question_attempts
     * @param maxFailedChallengeQuestionAttempts new value for max_failed_challenge_question_attempts
     */
    public void setMaxFailedChallengeQuestionAttempts(Integer maxFailedChallengeQuestionAttempts) {
        this.maxFailedChallengeQuestionAttempts = maxFailedChallengeQuestionAttempts;
    }

    /**
     * Gets the value of extras
     * @return String value of extras
     */
    public String getExtras() {
        return this.extras;
    }

    /**
     * Sets the value of extras
     * @param extras new value for extras
     */
    public void setExtras(String extras) {
        this.extras = extras;
    }

    /**
     * Gets the value of feature_flags
     * @return String value of feature_flags
     */
    public String getFeatureFlags() {
        return this.featureFlags;
    }

    /**
     * Sets the value of feature_flags
     * @param featureFlags new value for feature_flags
     */
    public void setFeatureFlags(String featureFlags) {
        this.featureFlags = featureFlags;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.organisationsId == null) {
            violations.add("organisations_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        OrganisationSettings other = (OrganisationSettings) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "OrganisationSettings{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                ", modifiedAt=" + modifiedAt +
                ", modifiedBy=" + modifiedBy +
                ", autoUnlockAfter=" + autoUnlockAfter +
                ", maxFailedLoginAttempts=" + maxFailedLoginAttempts +
                ", organisationsId=" + organisationsId +
                ", passwordResetTokenExpiration=" + passwordResetTokenExpiration +
                ", registrationTokenExpiration=" + registrationTokenExpiration +
                ", sessionIdleTimeout=" + sessionIdleTimeout +
                ", logoUrl=" + logoUrl +
                ", maxFailedAdditionalVerificationAttempts=" + maxFailedAdditionalVerificationAttempts +
                ", maxFailedChallengeQuestionAttempts=" + maxFailedChallengeQuestionAttempts +
                ", extras=" + extras +
                ", featureFlags=" + featureFlags +
                '}';
    }
}
