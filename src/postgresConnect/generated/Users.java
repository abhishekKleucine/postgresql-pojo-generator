package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: users
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: users
 * - Primary Keys: id
 * 
 * Indexes:
 * - uk6dotkott2kjsp8vw4d0m25fb7 (UNIQUE): email
 * - id1kny5wcthrgio949vswzjsofu9: state, archived
 * - ukps8jn3qjcop4ptb756hvqnad3 (UNIQUE): employee_id, organisations_id, archived
 * - ukr43af9ap4edm43mmtq01oddj6 (UNIQUE): username
 * 
 * Unique Constraints:
 * - ukps8jn3qjcop4ptb756hvqnad3: archived
 * - ukps8jn3qjcop4ptb756hvqnad3: employee_id
 * - ukps8jn3qjcop4ptb756hvqnad3: organisations_id
 * - uk6dotkott2kjsp8vw4d0m25fb7: email
 * - ukr43af9ap4edm43mmtq01oddj6: username
 * 
 * Check Constraints:
 * - 2200_222885_1_not_null: id IS NOT NULL
 * - 2200_222885_8_not_null: archived IS NOT NULL
 * - 2200_222885_5_not_null: employee_id IS NOT NULL
 * - 2200_222885_2_not_null: created_at IS NOT NULL
 * - 2200_222885_3_not_null: modified_at IS NOT NULL
 * - 2200_222885_7_not_null: first_name IS NOT NULL
 * 
 * Foreign Keys:
 * - organisations_id → organisations.id
 * - created_by → users.id
 * - modified_by → users.id
 * - challenge_questions_id → challenge_questions.id
 */
public class Users implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: organisations_id
     * Type: int8(19)
     * Foreign Key → organisations.id
     * Unique Constraint: ukps8jn3qjcop4ptb756hvqnad3
     */
    private Long organisationsId;

    /**
     * Database column: employee_id
     * Type: varchar(255) NOT NULL
     * Unique Constraint: ukps8jn3qjcop4ptb756hvqnad3
     */
    private String employeeId;

    /**
     * Database column: email
     * Type: varchar(255)
     * Unique Constraint: uk6dotkott2kjsp8vw4d0m25fb7
     */
    private String email;

    /**
     * Database column: first_name
     * Type: varchar(255) NOT NULL
     */
    private String firstName;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Unique Constraint: ukps8jn3qjcop4ptb756hvqnad3
     */
    private Boolean archived;

    /**
     * Database column: last_name
     * Type: varchar(255)
     */
    private String lastName;

    /**
     * Database column: created_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: locked_at
     * Type: int8(19)
     */
    private Long lockedAt;

    /**
     * Database column: department
     * Type: varchar(255)
     */
    private String department;

    /**
     * Database column: failed_login_attempts
     * Type: int4(10)
     * Default: 0
     */
    private Integer failedLoginAttempts;

    /**
     * Database column: is_system_user
     * Type: bool(1)
     * Default: false
     */
    private Boolean isSystemUser;

    /**
     * Database column: password
     * Type: text(2147483647)
     */
    private String password;

    /**
     * Database column: password_updated_at
     * Type: int8(19)
     */
    private Long passwordUpdatedAt;

    /**
     * Database column: username
     * Type: varchar(255)
     * Unique Constraint: ukr43af9ap4edm43mmtq01oddj6
     */
    private String username;

    /**
     * Database column: state
     * Type: varchar(50)
     */
    private String state;

    /**
     * Database column: failed_additional_verification_attempts
     * Type: int4(10)
     * Default: 0
     */
    private Integer failedAdditionalVerificationAttempts;

    /**
     * Database column: challenge_questions_id
     * Type: int4(10)
     * Foreign Key → challenge_questions.id
     */
    private Integer challengeQuestionsId;

    /**
     * Database column: challenge_questions_answer
     * Type: varchar(255)
     */
    private String challengeQuestionsAnswer;

    /**
     * Database column: failed_challenge_question_attempts
     * Type: int4(10)
     * Default: 0
     */
    private Integer failedChallengeQuestionAttempts;

    /**
     * Database column: type
     * Type: varchar(15)
     * Default: 'LOCAL'::character varying
     */
    private String type;

    /**
     * Default constructor
     */
    public Users() {
        // Initialize with default values where applicable
        this.failedLoginAttempts = 0; // Default value
        this.isSystemUser = false; // Default value
        this.failedAdditionalVerificationAttempts = 0; // Default value
        this.failedChallengeQuestionAttempts = 0; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param organisationsId organisations_id
     * @param employeeId employee_id
     * @param email email
     * @param firstName first_name
     * @param archived archived
     * @param lastName last_name
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param lockedAt locked_at
     * @param department department
     * @param failedLoginAttempts failed_login_attempts
     * @param isSystemUser is_system_user
     * @param password password
     * @param passwordUpdatedAt password_updated_at
     * @param username username
     * @param state state
     * @param failedAdditionalVerificationAttempts failed_additional_verification_attempts
     * @param challengeQuestionsId challenge_questions_id
     * @param challengeQuestionsAnswer challenge_questions_answer
     * @param failedChallengeQuestionAttempts failed_challenge_question_attempts
     * @param type type
     */
    public Users(Long id, Long createdAt, Long modifiedAt, Long organisationsId, String employeeId, String email, String firstName, Boolean archived, String lastName, Long createdBy, Long modifiedBy, Long lockedAt, String department, Integer failedLoginAttempts, Boolean isSystemUser, String password, Long passwordUpdatedAt, String username, String state, Integer failedAdditionalVerificationAttempts, Integer challengeQuestionsId, String challengeQuestionsAnswer, Integer failedChallengeQuestionAttempts, String type) {
        this.id = id;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.organisationsId = organisationsId;
        this.employeeId = employeeId;
        this.email = email;
        this.firstName = firstName;
        this.archived = archived;
        this.lastName = lastName;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.lockedAt = lockedAt;
        this.department = department;
        this.failedLoginAttempts = failedLoginAttempts;
        this.isSystemUser = isSystemUser;
        this.password = password;
        this.passwordUpdatedAt = passwordUpdatedAt;
        this.username = username;
        this.state = state;
        this.failedAdditionalVerificationAttempts = failedAdditionalVerificationAttempts;
        this.challengeQuestionsId = challengeQuestionsId;
        this.challengeQuestionsAnswer = challengeQuestionsAnswer;
        this.failedChallengeQuestionAttempts = failedChallengeQuestionAttempts;
        this.type = type;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * Note: Value must be unique (ukps8jn3qjcop4ptb756hvqnad3)
     */
    public void setOrganisationsId(Long organisationsId) {
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of employee_id
     * @return String value of employee_id
     */
    public String getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Sets the value of employee_id
     * @param employeeId new value for employee_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (ukps8jn3qjcop4ptb756hvqnad3)
     */
    public void setEmployeeId(String employeeId) {
        if (employeeId == null) {
            throw new IllegalArgumentException("employee_id cannot be null (NOT NULL constraint)");
        }
        this.employeeId = employeeId;
    }

    /**
     * Gets the value of email
     * @return String value of email
     */
    public String getEmail() {
        return this.email;
    }

    /**
     * Sets the value of email
     * @param email new value for email
     * Note: Value must be unique (uk6dotkott2kjsp8vw4d0m25fb7)
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Gets the value of first_name
     * @return String value of first_name
     */
    public String getFirstName() {
        return this.firstName;
    }

    /**
     * Sets the value of first_name
     * @param firstName new value for first_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFirstName(String firstName) {
        if (firstName == null) {
            throw new IllegalArgumentException("first_name cannot be null (NOT NULL constraint)");
        }
        this.firstName = firstName;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (ukps8jn3qjcop4ptb756hvqnad3)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of last_name
     * @return String value of last_name
     */
    public String getLastName() {
        return this.lastName;
    }

    /**
     * Sets the value of last_name
     * @param lastName new value for last_name
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of locked_at
     * @return Long value of locked_at
     */
    public Long getLockedAt() {
        return this.lockedAt;
    }

    /**
     * Sets the value of locked_at
     * @param lockedAt new value for locked_at
     */
    public void setLockedAt(Long lockedAt) {
        this.lockedAt = lockedAt;
    }

    /**
     * Gets the value of department
     * @return String value of department
     */
    public String getDepartment() {
        return this.department;
    }

    /**
     * Sets the value of department
     * @param department new value for department
     */
    public void setDepartment(String department) {
        this.department = department;
    }

    /**
     * Gets the value of failed_login_attempts
     * @return Integer value of failed_login_attempts
     */
    public Integer getFailedLoginAttempts() {
        return this.failedLoginAttempts;
    }

    /**
     * Sets the value of failed_login_attempts
     * @param failedLoginAttempts new value for failed_login_attempts
     */
    public void setFailedLoginAttempts(Integer failedLoginAttempts) {
        this.failedLoginAttempts = failedLoginAttempts;
    }

    /**
     * Gets the value of is_system_user
     * @return Boolean value of is_system_user
     */
    public Boolean getIsSystemUser() {
        return this.isSystemUser;
    }

    /**
     * Sets the value of is_system_user
     * @param isSystemUser new value for is_system_user
     */
    public void setIsSystemUser(Boolean isSystemUser) {
        this.isSystemUser = isSystemUser;
    }

    /**
     * Gets the value of password
     * @return String value of password
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Sets the value of password
     * @param password new value for password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Gets the value of password_updated_at
     * @return Long value of password_updated_at
     */
    public Long getPasswordUpdatedAt() {
        return this.passwordUpdatedAt;
    }

    /**
     * Sets the value of password_updated_at
     * @param passwordUpdatedAt new value for password_updated_at
     */
    public void setPasswordUpdatedAt(Long passwordUpdatedAt) {
        this.passwordUpdatedAt = passwordUpdatedAt;
    }

    /**
     * Gets the value of username
     * @return String value of username
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * Sets the value of username
     * @param username new value for username
     * Note: Value must be unique (ukr43af9ap4edm43mmtq01oddj6)
     */
    public void setUsername(String username) {
        this.username = username;
    }

    /**
     * Gets the value of state
     * @return String value of state
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets the value of state
     * @param state new value for state
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Gets the value of failed_additional_verification_attempts
     * @return Integer value of failed_additional_verification_attempts
     */
    public Integer getFailedAdditionalVerificationAttempts() {
        return this.failedAdditionalVerificationAttempts;
    }

    /**
     * Sets the value of failed_additional_verification_attempts
     * @param failedAdditionalVerificationAttempts new value for failed_additional_verification_attempts
     */
    public void setFailedAdditionalVerificationAttempts(Integer failedAdditionalVerificationAttempts) {
        this.failedAdditionalVerificationAttempts = failedAdditionalVerificationAttempts;
    }

    /**
     * Gets the value of challenge_questions_id
     * @return Integer value of challenge_questions_id
     */
    public Integer getChallengeQuestionsId() {
        return this.challengeQuestionsId;
    }

    /**
     * Sets the value of challenge_questions_id
     * @param challengeQuestionsId new value for challenge_questions_id
     */
    public void setChallengeQuestionsId(Integer challengeQuestionsId) {
        this.challengeQuestionsId = challengeQuestionsId;
    }

    /**
     * Gets the value of challenge_questions_answer
     * @return String value of challenge_questions_answer
     */
    public String getChallengeQuestionsAnswer() {
        return this.challengeQuestionsAnswer;
    }

    /**
     * Sets the value of challenge_questions_answer
     * @param challengeQuestionsAnswer new value for challenge_questions_answer
     */
    public void setChallengeQuestionsAnswer(String challengeQuestionsAnswer) {
        this.challengeQuestionsAnswer = challengeQuestionsAnswer;
    }

    /**
     * Gets the value of failed_challenge_question_attempts
     * @return Integer value of failed_challenge_question_attempts
     */
    public Integer getFailedChallengeQuestionAttempts() {
        return this.failedChallengeQuestionAttempts;
    }

    /**
     * Sets the value of failed_challenge_question_attempts
     * @param failedChallengeQuestionAttempts new value for failed_challenge_question_attempts
     */
    public void setFailedChallengeQuestionAttempts(Integer failedChallengeQuestionAttempts) {
        this.failedChallengeQuestionAttempts = failedChallengeQuestionAttempts;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.employeeId == null) {
            violations.add("employee_id cannot be null");
        }
        if (this.firstName == null) {
            violations.add("first_name cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Users other = (Users) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Users{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", organisationsId=" + organisationsId +
                ", employeeId=" + employeeId +
                ", email=" + email +
                ", firstName=" + firstName +
                ", archived=" + archived +
                ", lastName=" + lastName +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", lockedAt=" + lockedAt +
                ", department=" + department +
                ", failedLoginAttempts=" + failedLoginAttempts +
                ", isSystemUser=" + isSystemUser +
                ", password=" + password +
                ", passwordUpdatedAt=" + passwordUpdatedAt +
                ", username=" + username +
                ", state=" + state +
                ", failedAdditionalVerificationAttempts=" + failedAdditionalVerificationAttempts +
                ", challengeQuestionsId=" + challengeQuestionsId +
                ", challengeQuestionsAnswer=" + challengeQuestionsAnswer +
                ", failedChallengeQuestionAttempts=" + failedChallengeQuestionAttempts +
                ", type=" + type +
                '}';
    }
}
