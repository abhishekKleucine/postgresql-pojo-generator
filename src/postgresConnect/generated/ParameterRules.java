package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: parameter_rules
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: parameter_rules
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221652_5_not_null: visibility IS NOT NULL
 * - 2200_221652_3_not_null: operator IS NOT NULL
 * - 2200_221652_1_not_null: id IS NOT NULL
 * - 2200_221652_4_not_null: input IS NOT NULL
 * - 2200_221652_2_not_null: rules_id IS NOT NULL
 */
public class ParameterRules implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: bigserial(19) NOT NULL AUTO_INCREMENT
     * Default: nextval('parameter_rules_id_seq'::regclass)
     * Primary Key
     */
    private Long id;

    /**
     * Database column: rules_id
     * Type: varchar(255) NOT NULL
     */
    private String rulesId;

    /**
     * Database column: operator
     * Type: varchar(255) NOT NULL
     */
    private String operator;

    /**
     * Database column: input
     * Type: _text(2147483647) NOT NULL
     */
    private String input;

    /**
     * Database column: visibility
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean visibility;

    /**
     * Default constructor
     */
    public ParameterRules() {
        // Initialize with default values where applicable
        this.visibility = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param rulesId rules_id
     * @param operator operator
     * @param input input
     * @param visibility visibility
     */
    public ParameterRules(String rulesId, String operator, String input, Boolean visibility) {
        this.rulesId = rulesId;
        this.operator = operator;
        this.input = input;
        this.visibility = visibility;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of rules_id
     * @return String value of rules_id
     */
    public String getRulesId() {
        return this.rulesId;
    }

    /**
     * Sets the value of rules_id
     * @param rulesId new value for rules_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setRulesId(String rulesId) {
        if (rulesId == null) {
            throw new IllegalArgumentException("rules_id cannot be null (NOT NULL constraint)");
        }
        this.rulesId = rulesId;
    }

    /**
     * Gets the value of operator
     * @return String value of operator
     */
    public String getOperator() {
        return this.operator;
    }

    /**
     * Sets the value of operator
     * @param operator new value for operator
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOperator(String operator) {
        if (operator == null) {
            throw new IllegalArgumentException("operator cannot be null (NOT NULL constraint)");
        }
        this.operator = operator;
    }

    /**
     * Gets the value of input
     * @return String value of input
     */
    public String getInput() {
        return this.input;
    }

    /**
     * Sets the value of input
     * @param input new value for input
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setInput(String input) {
        if (input == null) {
            throw new IllegalArgumentException("input cannot be null (NOT NULL constraint)");
        }
        this.input = input;
    }

    /**
     * Gets the value of visibility
     * @return Boolean value of visibility
     */
    public Boolean getVisibility() {
        return this.visibility;
    }

    /**
     * Sets the value of visibility
     * @param visibility new value for visibility
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setVisibility(Boolean visibility) {
        this.visibility = visibility;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.rulesId == null) {
            violations.add("rules_id cannot be null");
        }
        if (this.operator == null) {
            violations.add("operator cannot be null");
        }
        if (this.input == null) {
            violations.add("input cannot be null");
        }
        if (this.visibility == null) {
            violations.add("visibility cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ParameterRules other = (ParameterRules) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "ParameterRules{" +
                "id=" + id +
                ", rulesId=" + rulesId +
                ", operator=" + operator +
                ", input=" + input +
                ", visibility=" + visibility +
                '}';
    }
}
