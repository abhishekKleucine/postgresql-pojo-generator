package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: qrtz_paused_trigger_grps
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: qrtz_paused_trigger_grps
 * - Primary Keys: sched_name, trigger_group
 * 
 * Check Constraints:
 * - 2200_221753_1_not_null: sched_name IS NOT NULL
 * - 2200_221753_2_not_null: trigger_group IS NOT NULL
 */
public class QrtzPausedTriggerGrps implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     */
    private String schedName;

    /**
     * Database column: trigger_group
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String triggerGroup;

    /**
     * Default constructor
     */
    public QrtzPausedTriggerGrps() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param schedName sched_name
     * @param triggerGroup trigger_group
     */
    public QrtzPausedTriggerGrps(String schedName, String triggerGroup) {
        this.schedName = schedName;
        this.triggerGroup = triggerGroup;
    }

    /**
     * Gets the value of sched_name
     * @return String value of sched_name
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets the value of sched_name
     * @param schedName new value for sched_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null (NOT NULL constraint)");
        }
        this.schedName = schedName;
    }

    /**
     * Gets the value of trigger_group
     * @return String value of trigger_group
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Sets the value of trigger_group
     * @param triggerGroup new value for trigger_group
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerGroup(String triggerGroup) {
        if (triggerGroup == null) {
            throw new IllegalArgumentException("trigger_group cannot be null (NOT NULL constraint)");
        }
        this.triggerGroup = triggerGroup;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.schedName == null) {
            violations.add("sched_name cannot be null");
        }
        if (this.triggerGroup == null) {
            violations.add("trigger_group cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzPausedTriggerGrps other = (QrtzPausedTriggerGrps) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.triggerGroup, other.triggerGroup);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.triggerGroup);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "QrtzPausedTriggerGrps{" +
                "schedName=" + schedName +
                ", triggerGroup=" + triggerGroup +
                '}';
    }
}
