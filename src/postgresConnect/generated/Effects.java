package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: effects
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: effects
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221528_2_not_null: actions_id IS NOT NULL
 * - 2200_221528_17_not_null: javascript_enabled IS NOT NULL
 * - 2200_221528_11_not_null: modified_at IS NOT NULL
 * - 2200_221528_15_not_null: created_by IS NOT NULL
 * - 2200_221528_12_not_null: name IS NOT NULL
 * - 2200_221528_3_not_null: order_tree IS NOT NULL
 * - 2200_221528_1_not_null: id IS NOT NULL
 * - 2200_221528_4_not_null: type IS NOT NULL
 * - 2200_221528_10_not_null: created_at IS NOT NULL
 * - 2200_221528_16_not_null: modified_by IS NOT NULL
 * 
 * Foreign Keys:
 * - actions_id → actions.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class Effects implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: actions_id
     * Type: int8(19) NOT NULL
     * Foreign Key → actions.id
     */
    private Long actionsId;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: type
     * Type: effects_type(2147483647) NOT NULL
     */
    private String type;

    /**
     * Database column: query
     * Type: jsonb(2147483647)
     * Default: '{}'::jsonb
     */
    private String query;

    /**
     * Database column: api_endpoint
     * Type: jsonb(2147483647)
     * Default: '{}'::jsonb
     */
    private String apiEndpoint;

    /**
     * Database column: api_method
     * Type: varchar(20)
     */
    private String apiMethod;

    /**
     * Database column: api_payload
     * Type: jsonb(2147483647)
     * Default: '{}'::jsonb
     */
    private String apiPayload;

    /**
     * Database column: api_headers
     * Type: jsonb(2147483647)
     */
    private String apiHeaders;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: name
     * Type: text(2147483647) NOT NULL
     */
    private String name;

    /**
     * Database column: archived
     * Type: bool(1)
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: javascript_enabled
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean javascriptEnabled;

    /**
     * Default constructor
     */
    public Effects() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
        this.javascriptEnabled = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param actionsId actions_id
     * @param orderTree order_tree
     * @param type type
     * @param query query
     * @param apiEndpoint api_endpoint
     * @param apiMethod api_method
     * @param apiPayload api_payload
     * @param apiHeaders api_headers
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param name name
     * @param archived archived
     * @param description description
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param javascriptEnabled javascript_enabled
     */
    public Effects(Long id, Long actionsId, Integer orderTree, String type, String query, String apiEndpoint, String apiMethod, String apiPayload, String apiHeaders, Long createdAt, Long modifiedAt, String name, Boolean archived, String description, Long createdBy, Long modifiedBy, Boolean javascriptEnabled) {
        this.id = id;
        this.actionsId = actionsId;
        this.orderTree = orderTree;
        this.type = type;
        this.query = query;
        this.apiEndpoint = apiEndpoint;
        this.apiMethod = apiMethod;
        this.apiPayload = apiPayload;
        this.apiHeaders = apiHeaders;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.name = name;
        this.archived = archived;
        this.description = description;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.javascriptEnabled = javascriptEnabled;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of actions_id
     * @return Long value of actions_id
     */
    public Long getActionsId() {
        return this.actionsId;
    }

    /**
     * Sets the value of actions_id
     * @param actionsId new value for actions_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setActionsId(Long actionsId) {
        if (actionsId == null) {
            throw new IllegalArgumentException("actions_id cannot be null (NOT NULL constraint)");
        }
        this.actionsId = actionsId;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of query
     * @return String value of query
     */
    public String getQuery() {
        return this.query;
    }

    /**
     * Sets the value of query
     * @param query new value for query
     */
    public void setQuery(String query) {
        this.query = query;
    }

    /**
     * Gets the value of api_endpoint
     * @return String value of api_endpoint
     */
    public String getApiEndpoint() {
        return this.apiEndpoint;
    }

    /**
     * Sets the value of api_endpoint
     * @param apiEndpoint new value for api_endpoint
     */
    public void setApiEndpoint(String apiEndpoint) {
        this.apiEndpoint = apiEndpoint;
    }

    /**
     * Gets the value of api_method
     * @return String value of api_method
     */
    public String getApiMethod() {
        return this.apiMethod;
    }

    /**
     * Sets the value of api_method
     * @param apiMethod new value for api_method
     */
    public void setApiMethod(String apiMethod) {
        this.apiMethod = apiMethod;
    }

    /**
     * Gets the value of api_payload
     * @return String value of api_payload
     */
    public String getApiPayload() {
        return this.apiPayload;
    }

    /**
     * Sets the value of api_payload
     * @param apiPayload new value for api_payload
     */
    public void setApiPayload(String apiPayload) {
        this.apiPayload = apiPayload;
    }

    /**
     * Gets the value of api_headers
     * @return String value of api_headers
     */
    public String getApiHeaders() {
        return this.apiHeaders;
    }

    /**
     * Sets the value of api_headers
     * @param apiHeaders new value for api_headers
     */
    public void setApiHeaders(String apiHeaders) {
        this.apiHeaders = apiHeaders;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null (NOT NULL constraint)");
        }
        this.name = name;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of javascript_enabled
     * @return Boolean value of javascript_enabled
     */
    public Boolean getJavascriptEnabled() {
        return this.javascriptEnabled;
    }

    /**
     * Sets the value of javascript_enabled
     * @param javascriptEnabled new value for javascript_enabled
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJavascriptEnabled(Boolean javascriptEnabled) {
        this.javascriptEnabled = javascriptEnabled;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.actionsId == null) {
            violations.add("actions_id cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.name == null) {
            violations.add("name cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.javascriptEnabled == null) {
            violations.add("javascript_enabled cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Effects other = (Effects) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Effects{" +
                "id=" + id +
                ", actionsId=" + actionsId +
                ", orderTree=" + orderTree +
                ", type=" + type +
                ", query=" + query +
                ", apiEndpoint=" + apiEndpoint +
                ", apiMethod=" + apiMethod +
                ", apiPayload=" + apiPayload +
                ", apiHeaders=" + apiHeaders +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", name=" + name +
                ", archived=" + archived +
                ", description=" + description +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", javascriptEnabled=" + javascriptEnabled +
                '}';
    }
}
