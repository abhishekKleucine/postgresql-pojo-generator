package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: email_templates
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: email_templates
 * 
 * Indexes:
 * - dd909f76a4d70a4d494e534a47de (UNIQUE): id
 * - email_templates_name_key (UNIQUE): name
 * 
 * Unique Constraints:
 * - email_templates_name_key: name
 * - dd909f76a4d70a4d494e534a47de: id
 * 
 * Check Constraints:
 * - 2200_221543_3_not_null: content IS NOT NULL
 * - 2200_221543_1_not_null: id IS NOT NULL
 * - 2200_221543_4_not_null: archived IS NOT NULL
 * - 2200_221543_2_not_null: name IS NOT NULL
 */
public class EmailTemplates implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Unique Constraint: dd909f76a4d70a4d494e534a47de
     */
    private Long id;

    /**
     * Database column: name
     * Type: varchar(255) NOT NULL
     * Unique Constraint: email_templates_name_key
     */
    private String name;

    /**
     * Database column: content
     * Type: text(2147483647) NOT NULL
     */
    private String content;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Default constructor
     */
    public EmailTemplates() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param name name
     * @param content content
     * @param archived archived
     */
    public EmailTemplates(Long id, String name, String content, Boolean archived) {
        this.id = id;
        this.name = name;
        this.content = content;
        this.archived = archived;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (dd909f76a4d70a4d494e534a47de)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (email_templates_name_key)
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null (NOT NULL constraint)");
        }
        this.name = name;
    }

    /**
     * Gets the value of content
     * @return String value of content
     */
    public String getContent() {
        return this.content;
    }

    /**
     * Sets the value of content
     * @param content new value for content
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setContent(String content) {
        if (content == null) {
            throw new IllegalArgumentException("content cannot be null (NOT NULL constraint)");
        }
        this.content = content;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.name == null) {
            violations.add("name cannot be null");
        }
        if (this.content == null) {
            violations.add("content cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        EmailTemplates other = (EmailTemplates) obj;
        return Objects.equals(this.id, other.id) && Objects.equals(this.name, other.name) && Objects.equals(this.content, other.content) && Objects.equals(this.archived, other.archived);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.content, this.archived);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "EmailTemplates{" +
                "id=" + id +
                ", name=" + name +
                ", content=" + content +
                ", archived=" + archived +
                '}';
    }
}
