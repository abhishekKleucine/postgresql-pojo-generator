package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: tokens
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: tokens
 * - Primary Keys: token
 * 
 * Indexes:
 * - idxgx5w2mh7k08opon3a4xb1sasg: type, token
 * 
 * Check Constraints:
 * - 2200_221921_3_not_null: type IS NOT NULL
 * - 2200_221921_1_not_null: token IS NOT NULL
 */
public class Tokens implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: token
     * Type: varchar(32) NOT NULL
     * Primary Key
     */
    private String token;

    /**
     * Database column: expiration
     * Type: int8(19)
     */
    private Long expiration;

    /**
     * Database column: type
     * Type: varchar(32) NOT NULL
     */
    private String type;

    /**
     * Database column: users_id
     * Type: int8(19)
     */
    private Long usersId;

    /**
     * Default constructor
     */
    public Tokens() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param token token
     * @param expiration expiration
     * @param type type
     * @param usersId users_id
     */
    public Tokens(String token, Long expiration, String type, Long usersId) {
        this.token = token;
        this.expiration = expiration;
        this.type = type;
        this.usersId = usersId;
    }

    /**
     * Gets the value of token
     * @return String value of token
     */
    public String getToken() {
        return this.token;
    }

    /**
     * Sets the value of token
     * @param token new value for token
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setToken(String token) {
        if (token == null) {
            throw new IllegalArgumentException("token cannot be null (NOT NULL constraint)");
        }
        this.token = token;
    }

    /**
     * Gets the value of expiration
     * @return Long value of expiration
     */
    public Long getExpiration() {
        return this.expiration;
    }

    /**
     * Sets the value of expiration
     * @param expiration new value for expiration
     */
    public void setExpiration(Long expiration) {
        this.expiration = expiration;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of users_id
     * @return Long value of users_id
     */
    public Long getUsersId() {
        return this.usersId;
    }

    /**
     * Sets the value of users_id
     * @param usersId new value for users_id
     */
    public void setUsersId(Long usersId) {
        this.usersId = usersId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.token == null) {
            violations.add("token cannot be null");
        }
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Tokens other = (Tokens) obj;
        return Objects.equals(this.token, other.token);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.token);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Tokens{" +
                "token=" + token +
                ", expiration=" + expiration +
                ", type=" + type +
                ", usersId=" + usersId +
                '}';
    }
}
