package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: qrtz_simple_triggers
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: qrtz_simple_triggers
 * - Primary Keys: sched_name, trigger_name, trigger_group
 * 
 * Check Constraints:
 * - 2200_221759_3_not_null: trigger_group IS NOT NULL
 * - 2200_221759_6_not_null: times_triggered IS NOT NULL
 * - 2200_221759_5_not_null: repeat_interval IS NOT NULL
 * - 2200_221759_1_not_null: sched_name IS NOT NULL
 * - 2200_221759_4_not_null: repeat_count IS NOT NULL
 * - 2200_221759_2_not_null: trigger_name IS NOT NULL
 * 
 * Foreign Keys:
 * - sched_name → qrtz_triggers.sched_name
 * - trigger_name → qrtz_triggers.trigger_name
 * - trigger_group → qrtz_triggers.trigger_group
 */
public class QrtzSimpleTriggers implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_triggers.sched_name
     */
    private String schedName;

    /**
     * Database column: trigger_name
     * Type: varchar(200) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_triggers.trigger_name
     */
    private String triggerName;

    /**
     * Database column: trigger_group
     * Type: varchar(200) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_triggers.trigger_group
     */
    private String triggerGroup;

    /**
     * Database column: repeat_count
     * Type: int8(19) NOT NULL
     */
    private Long repeatCount;

    /**
     * Database column: repeat_interval
     * Type: int8(19) NOT NULL
     */
    private Long repeatInterval;

    /**
     * Database column: times_triggered
     * Type: int8(19) NOT NULL
     */
    private Long timesTriggered;

    /**
     * Default constructor
     */
    public QrtzSimpleTriggers() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param schedName sched_name
     * @param triggerName trigger_name
     * @param triggerGroup trigger_group
     * @param repeatCount repeat_count
     * @param repeatInterval repeat_interval
     * @param timesTriggered times_triggered
     */
    public QrtzSimpleTriggers(String schedName, String triggerName, String triggerGroup, Long repeatCount, Long repeatInterval, Long timesTriggered) {
        this.schedName = schedName;
        this.triggerName = triggerName;
        this.triggerGroup = triggerGroup;
        this.repeatCount = repeatCount;
        this.repeatInterval = repeatInterval;
        this.timesTriggered = timesTriggered;
    }

    /**
     * Gets the value of sched_name
     * @return String value of sched_name
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets the value of sched_name
     * @param schedName new value for sched_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null (NOT NULL constraint)");
        }
        this.schedName = schedName;
    }

    /**
     * Gets the value of trigger_name
     * @return String value of trigger_name
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Sets the value of trigger_name
     * @param triggerName new value for trigger_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerName(String triggerName) {
        if (triggerName == null) {
            throw new IllegalArgumentException("trigger_name cannot be null (NOT NULL constraint)");
        }
        this.triggerName = triggerName;
    }

    /**
     * Gets the value of trigger_group
     * @return String value of trigger_group
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Sets the value of trigger_group
     * @param triggerGroup new value for trigger_group
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerGroup(String triggerGroup) {
        if (triggerGroup == null) {
            throw new IllegalArgumentException("trigger_group cannot be null (NOT NULL constraint)");
        }
        this.triggerGroup = triggerGroup;
    }

    /**
     * Gets the value of repeat_count
     * @return Long value of repeat_count
     */
    public Long getRepeatCount() {
        return this.repeatCount;
    }

    /**
     * Sets the value of repeat_count
     * @param repeatCount new value for repeat_count
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setRepeatCount(Long repeatCount) {
        if (repeatCount == null) {
            throw new IllegalArgumentException("repeat_count cannot be null (NOT NULL constraint)");
        }
        this.repeatCount = repeatCount;
    }

    /**
     * Gets the value of repeat_interval
     * @return Long value of repeat_interval
     */
    public Long getRepeatInterval() {
        return this.repeatInterval;
    }

    /**
     * Sets the value of repeat_interval
     * @param repeatInterval new value for repeat_interval
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setRepeatInterval(Long repeatInterval) {
        if (repeatInterval == null) {
            throw new IllegalArgumentException("repeat_interval cannot be null (NOT NULL constraint)");
        }
        this.repeatInterval = repeatInterval;
    }

    /**
     * Gets the value of times_triggered
     * @return Long value of times_triggered
     */
    public Long getTimesTriggered() {
        return this.timesTriggered;
    }

    /**
     * Sets the value of times_triggered
     * @param timesTriggered new value for times_triggered
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTimesTriggered(Long timesTriggered) {
        if (timesTriggered == null) {
            throw new IllegalArgumentException("times_triggered cannot be null (NOT NULL constraint)");
        }
        this.timesTriggered = timesTriggered;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.schedName == null) {
            violations.add("sched_name cannot be null");
        }
        if (this.triggerName == null) {
            violations.add("trigger_name cannot be null");
        }
        if (this.triggerGroup == null) {
            violations.add("trigger_group cannot be null");
        }
        if (this.repeatCount == null) {
            violations.add("repeat_count cannot be null");
        }
        if (this.repeatInterval == null) {
            violations.add("repeat_interval cannot be null");
        }
        if (this.timesTriggered == null) {
            violations.add("times_triggered cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzSimpleTriggers other = (QrtzSimpleTriggers) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.triggerName, other.triggerName) && Objects.equals(this.triggerGroup, other.triggerGroup);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.triggerName, this.triggerGroup);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "QrtzSimpleTriggers{" +
                "schedName=" + schedName +
                ", triggerName=" + triggerName +
                ", triggerGroup=" + triggerGroup +
                ", repeatCount=" + repeatCount +
                ", repeatInterval=" + repeatInterval +
                ", timesTriggered=" + timesTriggered +
                '}';
    }
}
