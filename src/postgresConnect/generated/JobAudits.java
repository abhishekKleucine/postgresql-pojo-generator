package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: job_audits
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: job_audits
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx1edc854fe2bc4a3698c0131c: jobs_id
 * 
 * Check Constraints:
 * - 2200_221591_1_not_null: id IS NOT NULL
 * - 2200_221591_7_not_null: organisations_id IS NOT NULL
 * - 2200_221591_10_not_null: parameters IS NOT NULL
 * - 2200_221591_8_not_null: triggered_at IS NOT NULL
 * - 2200_221591_2_not_null: jobs_id IS NOT NULL
 * - 2200_221591_9_not_null: triggered_by IS NOT NULL
 */
public class JobAudits implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     */
    private Long jobsId;

    /**
     * Database column: stages_id
     * Type: int8(19)
     */
    private Long stagesId;

    /**
     * Database column: tasks_id
     * Type: int8(19)
     */
    private Long tasksId;

    /**
     * Database column: action
     * Type: varchar(50)
     */
    private String action;

    /**
     * Database column: details
     * Type: text(2147483647)
     */
    private String details;

    /**
     * Database column: organisations_id
     * Type: int8(19) NOT NULL
     */
    private Long organisationsId;

    /**
     * Database column: triggered_at
     * Type: int8(19) NOT NULL
     */
    private Long triggeredAt;

    /**
     * Database column: triggered_by
     * Type: int8(19) NOT NULL
     */
    private Long triggeredBy;

    /**
     * Database column: parameters
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String parameters;

    /**
     * Default constructor
     */
    public JobAudits() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param jobsId jobs_id
     * @param stagesId stages_id
     * @param tasksId tasks_id
     * @param action action
     * @param details details
     * @param organisationsId organisations_id
     * @param triggeredAt triggered_at
     * @param triggeredBy triggered_by
     * @param parameters parameters
     */
    public JobAudits(Long id, Long jobsId, Long stagesId, Long tasksId, String action, String details, Long organisationsId, Long triggeredAt, Long triggeredBy, String parameters) {
        this.id = id;
        this.jobsId = jobsId;
        this.stagesId = stagesId;
        this.tasksId = tasksId;
        this.action = action;
        this.details = details;
        this.organisationsId = organisationsId;
        this.triggeredAt = triggeredAt;
        this.triggeredBy = triggeredBy;
        this.parameters = parameters;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of stages_id
     * @return Long value of stages_id
     */
    public Long getStagesId() {
        return this.stagesId;
    }

    /**
     * Sets the value of stages_id
     * @param stagesId new value for stages_id
     */
    public void setStagesId(Long stagesId) {
        this.stagesId = stagesId;
    }

    /**
     * Gets the value of tasks_id
     * @return Long value of tasks_id
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets the value of tasks_id
     * @param tasksId new value for tasks_id
     */
    public void setTasksId(Long tasksId) {
        this.tasksId = tasksId;
    }

    /**
     * Gets the value of action
     * @return String value of action
     */
    public String getAction() {
        return this.action;
    }

    /**
     * Sets the value of action
     * @param action new value for action
     */
    public void setAction(String action) {
        this.action = action;
    }

    /**
     * Gets the value of details
     * @return String value of details
     */
    public String getDetails() {
        return this.details;
    }

    /**
     * Sets the value of details
     * @param details new value for details
     */
    public void setDetails(String details) {
        this.details = details;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null (NOT NULL constraint)");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of triggered_at
     * @return Long value of triggered_at
     */
    public Long getTriggeredAt() {
        return this.triggeredAt;
    }

    /**
     * Sets the value of triggered_at
     * @param triggeredAt new value for triggered_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggeredAt(Long triggeredAt) {
        if (triggeredAt == null) {
            throw new IllegalArgumentException("triggered_at cannot be null (NOT NULL constraint)");
        }
        this.triggeredAt = triggeredAt;
    }

    /**
     * Gets the value of triggered_by
     * @return Long value of triggered_by
     */
    public Long getTriggeredBy() {
        return this.triggeredBy;
    }

    /**
     * Sets the value of triggered_by
     * @param triggeredBy new value for triggered_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggeredBy(Long triggeredBy) {
        if (triggeredBy == null) {
            throw new IllegalArgumentException("triggered_by cannot be null (NOT NULL constraint)");
        }
        this.triggeredBy = triggeredBy;
    }

    /**
     * Gets the value of parameters
     * @return String value of parameters
     */
    public String getParameters() {
        return this.parameters;
    }

    /**
     * Sets the value of parameters
     * @param parameters new value for parameters
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setParameters(String parameters) {
        if (parameters == null) {
            throw new IllegalArgumentException("parameters cannot be null (NOT NULL constraint)");
        }
        this.parameters = parameters;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.organisationsId == null) {
            violations.add("organisations_id cannot be null");
        }
        if (this.triggeredAt == null) {
            violations.add("triggered_at cannot be null");
        }
        if (this.triggeredBy == null) {
            violations.add("triggered_by cannot be null");
        }
        if (this.parameters == null) {
            violations.add("parameters cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        JobAudits other = (JobAudits) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "JobAudits{" +
                "id=" + id +
                ", jobsId=" + jobsId +
                ", stagesId=" + stagesId +
                ", tasksId=" + tasksId +
                ", action=" + action +
                ", details=" + details +
                ", organisationsId=" + organisationsId +
                ", triggeredAt=" + triggeredAt +
                ", triggeredBy=" + triggeredBy +
                ", parameters=" + parameters +
                '}';
    }
}
