package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: parameter_rule_mapping
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: parameter_rule_mapping
 * - Primary Keys: parameter_rules_id, impacted_parameters_id, triggering_parameters_id
 * 
 * Check Constraints:
 * - 2200_221649_3_not_null: triggering_parameters_id IS NOT NULL
 * - 2200_221649_1_not_null: parameter_rules_id IS NOT NULL
 * - 2200_221649_2_not_null: impacted_parameters_id IS NOT NULL
 * 
 * Foreign Keys:
 * - parameter_rules_id → parameter_rules.id
 * - impacted_parameters_id → parameters.id
 * - triggering_parameters_id → parameters.id
 */
public class ParameterRuleMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: parameter_rules_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → parameter_rules.id
     */
    private Long parameterRulesId;

    /**
     * Database column: impacted_parameters_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → parameters.id
     */
    private Long impactedParametersId;

    /**
     * Database column: triggering_parameters_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → parameters.id
     */
    private Long triggeringParametersId;

    /**
     * Default constructor
     */
    public ParameterRuleMapping() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param parameterRulesId parameter_rules_id
     * @param impactedParametersId impacted_parameters_id
     * @param triggeringParametersId triggering_parameters_id
     */
    public ParameterRuleMapping(Long parameterRulesId, Long impactedParametersId, Long triggeringParametersId) {
        this.parameterRulesId = parameterRulesId;
        this.impactedParametersId = impactedParametersId;
        this.triggeringParametersId = triggeringParametersId;
    }

    /**
     * Gets the value of parameter_rules_id
     * @return Long value of parameter_rules_id
     */
    public Long getParameterRulesId() {
        return this.parameterRulesId;
    }

    /**
     * Sets the value of parameter_rules_id
     * @param parameterRulesId new value for parameter_rules_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setParameterRulesId(Long parameterRulesId) {
        if (parameterRulesId == null) {
            throw new IllegalArgumentException("parameter_rules_id cannot be null (NOT NULL constraint)");
        }
        this.parameterRulesId = parameterRulesId;
    }

    /**
     * Gets the value of impacted_parameters_id
     * @return Long value of impacted_parameters_id
     */
    public Long getImpactedParametersId() {
        return this.impactedParametersId;
    }

    /**
     * Sets the value of impacted_parameters_id
     * @param impactedParametersId new value for impacted_parameters_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setImpactedParametersId(Long impactedParametersId) {
        if (impactedParametersId == null) {
            throw new IllegalArgumentException("impacted_parameters_id cannot be null (NOT NULL constraint)");
        }
        this.impactedParametersId = impactedParametersId;
    }

    /**
     * Gets the value of triggering_parameters_id
     * @return Long value of triggering_parameters_id
     */
    public Long getTriggeringParametersId() {
        return this.triggeringParametersId;
    }

    /**
     * Sets the value of triggering_parameters_id
     * @param triggeringParametersId new value for triggering_parameters_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggeringParametersId(Long triggeringParametersId) {
        if (triggeringParametersId == null) {
            throw new IllegalArgumentException("triggering_parameters_id cannot be null (NOT NULL constraint)");
        }
        this.triggeringParametersId = triggeringParametersId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.parameterRulesId == null) {
            violations.add("parameter_rules_id cannot be null");
        }
        if (this.impactedParametersId == null) {
            violations.add("impacted_parameters_id cannot be null");
        }
        if (this.triggeringParametersId == null) {
            violations.add("triggering_parameters_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ParameterRuleMapping other = (ParameterRuleMapping) obj;
        return Objects.equals(this.parameterRulesId, other.parameterRulesId) && Objects.equals(this.impactedParametersId, other.impactedParametersId) && Objects.equals(this.triggeringParametersId, other.triggeringParametersId);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.parameterRulesId, this.impactedParametersId, this.triggeringParametersId);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "ParameterRuleMapping{" +
                "parameterRulesId=" + parameterRulesId +
                ", impactedParametersId=" + impactedParametersId +
                ", triggeringParametersId=" + triggeringParametersId +
                '}';
    }
}
