package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: task_schedules
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: task_schedules
 * - Primary Keys: id
 * 
 * Indexes:
 * - pk_task_schedules (UNIQUE): id
 * 
 * Check Constraints:
 * - 2200_221879_9_not_null: created_at IS NOT NULL
 * - 2200_221879_6_not_null: start_date_duration IS NOT NULL
 * - 2200_221879_10_not_null: modified_at IS NOT NULL
 * - 2200_221879_4_not_null: condition IS NOT NULL
 * - 2200_221879_12_not_null: modified_by IS NOT NULL
 * - 2200_221879_2_not_null: type IS NOT NULL
 * - 2200_221879_11_not_null: created_by IS NOT NULL
 * - 2200_221879_8_not_null: due_date_duration IS NOT NULL
 * - 2200_221879_7_not_null: due_date_interval IS NOT NULL
 * - 2200_221879_1_not_null: id IS NOT NULL
 * - 2200_221879_5_not_null: start_date_interval IS NOT NULL
 * 
 * Foreign Keys:
 * - referenced_tasks_id → tasks.id
 */
public class TaskSchedules implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: referenced_tasks_id
     * Type: int8(19)
     * Foreign Key → tasks.id
     */
    private Long referencedTasksId;

    /**
     * Database column: condition
     * Type: varchar(50) NOT NULL
     */
    private String condition;

    /**
     * Database column: start_date_interval
     * Type: int4(10) NOT NULL
     */
    private Integer startDateInterval;

    /**
     * Database column: start_date_duration
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String startDateDuration;

    /**
     * Database column: due_date_interval
     * Type: int4(10) NOT NULL
     */
    private Integer dueDateInterval;

    /**
     * Database column: due_date_duration
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String dueDateDuration;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public TaskSchedules() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param type type
     * @param referencedTasksId referenced_tasks_id
     * @param condition condition
     * @param startDateInterval start_date_interval
     * @param startDateDuration start_date_duration
     * @param dueDateInterval due_date_interval
     * @param dueDateDuration due_date_duration
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     */
    public TaskSchedules(Long id, String type, Long referencedTasksId, String condition, Integer startDateInterval, String startDateDuration, Integer dueDateInterval, String dueDateDuration, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy) {
        this.id = id;
        this.type = type;
        this.referencedTasksId = referencedTasksId;
        this.condition = condition;
        this.startDateInterval = startDateInterval;
        this.startDateDuration = startDateDuration;
        this.dueDateInterval = dueDateInterval;
        this.dueDateDuration = dueDateDuration;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of referenced_tasks_id
     * @return Long value of referenced_tasks_id
     */
    public Long getReferencedTasksId() {
        return this.referencedTasksId;
    }

    /**
     * Sets the value of referenced_tasks_id
     * @param referencedTasksId new value for referenced_tasks_id
     */
    public void setReferencedTasksId(Long referencedTasksId) {
        this.referencedTasksId = referencedTasksId;
    }

    /**
     * Gets the value of condition
     * @return String value of condition
     */
    public String getCondition() {
        return this.condition;
    }

    /**
     * Sets the value of condition
     * @param condition new value for condition
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCondition(String condition) {
        if (condition == null) {
            throw new IllegalArgumentException("condition cannot be null (NOT NULL constraint)");
        }
        this.condition = condition;
    }

    /**
     * Gets the value of start_date_interval
     * @return Integer value of start_date_interval
     */
    public Integer getStartDateInterval() {
        return this.startDateInterval;
    }

    /**
     * Sets the value of start_date_interval
     * @param startDateInterval new value for start_date_interval
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setStartDateInterval(Integer startDateInterval) {
        if (startDateInterval == null) {
            throw new IllegalArgumentException("start_date_interval cannot be null (NOT NULL constraint)");
        }
        this.startDateInterval = startDateInterval;
    }

    /**
     * Gets the value of start_date_duration
     * @return String value of start_date_duration
     */
    public String getStartDateDuration() {
        return this.startDateDuration;
    }

    /**
     * Sets the value of start_date_duration
     * @param startDateDuration new value for start_date_duration
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setStartDateDuration(String startDateDuration) {
        if (startDateDuration == null) {
            throw new IllegalArgumentException("start_date_duration cannot be null (NOT NULL constraint)");
        }
        this.startDateDuration = startDateDuration;
    }

    /**
     * Gets the value of due_date_interval
     * @return Integer value of due_date_interval
     */
    public Integer getDueDateInterval() {
        return this.dueDateInterval;
    }

    /**
     * Sets the value of due_date_interval
     * @param dueDateInterval new value for due_date_interval
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setDueDateInterval(Integer dueDateInterval) {
        if (dueDateInterval == null) {
            throw new IllegalArgumentException("due_date_interval cannot be null (NOT NULL constraint)");
        }
        this.dueDateInterval = dueDateInterval;
    }

    /**
     * Gets the value of due_date_duration
     * @return String value of due_date_duration
     */
    public String getDueDateDuration() {
        return this.dueDateDuration;
    }

    /**
     * Sets the value of due_date_duration
     * @param dueDateDuration new value for due_date_duration
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setDueDateDuration(String dueDateDuration) {
        if (dueDateDuration == null) {
            throw new IllegalArgumentException("due_date_duration cannot be null (NOT NULL constraint)");
        }
        this.dueDateDuration = dueDateDuration;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        if (this.condition == null) {
            violations.add("condition cannot be null");
        }
        if (this.startDateInterval == null) {
            violations.add("start_date_interval cannot be null");
        }
        if (this.startDateDuration == null) {
            violations.add("start_date_duration cannot be null");
        }
        if (this.dueDateInterval == null) {
            violations.add("due_date_interval cannot be null");
        }
        if (this.dueDateDuration == null) {
            violations.add("due_date_duration cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskSchedules other = (TaskSchedules) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "TaskSchedules{" +
                "id=" + id +
                ", type=" + type +
                ", referencedTasksId=" + referencedTasksId +
                ", condition=" + condition +
                ", startDateInterval=" + startDateInterval +
                ", startDateDuration=" + startDateDuration +
                ", dueDateInterval=" + dueDateInterval +
                ", dueDateDuration=" + dueDateDuration +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
