package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: task_automation_mapping
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: task_automation_mapping
 * 
 * Indexes:
 * - idx587debfd99a34fa58784d7ed: automations_id
 * - idxc8b6b31403a64696a80c4656: tasks_id
 * 
 * Check Constraints:
 * - 2200_221836_3_not_null: display_name IS NOT NULL
 * - 2200_221836_1_not_null: tasks_id IS NOT NULL
 * - 2200_221836_4_not_null: order_tree IS NOT NULL
 * - 2200_221836_6_not_null: modified_at IS NOT NULL
 * - 2200_221836_8_not_null: modified_by IS NOT NULL
 * - 2200_221836_2_not_null: automations_id IS NOT NULL
 * - 2200_221836_5_not_null: created_at IS NOT NULL
 * - 2200_221836_7_not_null: created_by IS NOT NULL
 * 
 * Foreign Keys:
 * - tasks_id → tasks.id
 * - automations_id → automations.id
 */
public class TaskAutomationMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: tasks_id
     * Type: int8(19) NOT NULL
     * Foreign Key → tasks.id
     */
    private Long tasksId;

    /**
     * Database column: automations_id
     * Type: int8(19) NOT NULL
     * Foreign Key → automations.id
     */
    private Long automationsId;

    /**
     * Database column: display_name
     * Type: varchar(255) NOT NULL
     */
    private String displayName;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public TaskAutomationMapping() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param tasksId tasks_id
     * @param automationsId automations_id
     * @param displayName display_name
     * @param orderTree order_tree
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     */
    public TaskAutomationMapping(Long tasksId, Long automationsId, String displayName, Integer orderTree, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy) {
        this.tasksId = tasksId;
        this.automationsId = automationsId;
        this.displayName = displayName;
        this.orderTree = orderTree;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of tasks_id
     * @return Long value of tasks_id
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets the value of tasks_id
     * @param tasksId new value for tasks_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTasksId(Long tasksId) {
        if (tasksId == null) {
            throw new IllegalArgumentException("tasks_id cannot be null (NOT NULL constraint)");
        }
        this.tasksId = tasksId;
    }

    /**
     * Gets the value of automations_id
     * @return Long value of automations_id
     */
    public Long getAutomationsId() {
        return this.automationsId;
    }

    /**
     * Sets the value of automations_id
     * @param automationsId new value for automations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setAutomationsId(Long automationsId) {
        if (automationsId == null) {
            throw new IllegalArgumentException("automations_id cannot be null (NOT NULL constraint)");
        }
        this.automationsId = automationsId;
    }

    /**
     * Gets the value of display_name
     * @return String value of display_name
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Sets the value of display_name
     * @param displayName new value for display_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setDisplayName(String displayName) {
        if (displayName == null) {
            throw new IllegalArgumentException("display_name cannot be null (NOT NULL constraint)");
        }
        this.displayName = displayName;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.tasksId == null) {
            violations.add("tasks_id cannot be null");
        }
        if (this.automationsId == null) {
            violations.add("automations_id cannot be null");
        }
        if (this.displayName == null) {
            violations.add("display_name cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskAutomationMapping other = (TaskAutomationMapping) obj;
        return Objects.equals(this.tasksId, other.tasksId) && Objects.equals(this.automationsId, other.automationsId) && Objects.equals(this.displayName, other.displayName) && Objects.equals(this.orderTree, other.orderTree) && Objects.equals(this.createdAt, other.createdAt) && Objects.equals(this.modifiedAt, other.modifiedAt) && Objects.equals(this.createdBy, other.createdBy) && Objects.equals(this.modifiedBy, other.modifiedBy);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.tasksId, this.automationsId, this.displayName, this.orderTree, this.createdAt, this.modifiedAt, this.createdBy, this.modifiedBy);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "TaskAutomationMapping{" +
                "tasksId=" + tasksId +
                ", automationsId=" + automationsId +
                ", displayName=" + displayName +
                ", orderTree=" + orderTree +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
