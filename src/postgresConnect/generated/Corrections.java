package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: corrections
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: corrections
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx_corrections_parameter_values_id: parameter_values_id
 * - idx_corrections_jobs_id: jobs_id
 * 
 * Check Constraints:
 * - 2200_221505_16_not_null: created_at IS NOT NULL
 * - 2200_221505_8_not_null: task_executions_id IS NOT NULL
 * - 2200_221505_18_not_null: modified_at IS NOT NULL
 * - 2200_221505_10_not_null: jobs_id IS NOT NULL
 * - 2200_221505_1_not_null: id IS NOT NULL
 * - 2200_221505_17_not_null: modified_by IS NOT NULL
 * - 2200_221505_7_not_null: parameter_values_id IS NOT NULL
 * - 2200_221505_9_not_null: facilities_id IS NOT NULL
 * - 2200_221505_2_not_null: code IS NOT NULL
 * - 2200_221505_15_not_null: created_by IS NOT NULL
 * - 2200_221505_11_not_null: status IS NOT NULL
 * 
 * Foreign Keys:
 * - parameter_values_id → parameter_values.id
 * - task_executions_id → task_executions.id
 * - facilities_id → facilities.id
 * - jobs_id → jobs.id
 */
public class Corrections implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: code
     * Type: varchar(20) NOT NULL
     */
    private String code;

    /**
     * Database column: old_value
     * Type: text(2147483647)
     */
    private String oldValue;

    /**
     * Database column: new_value
     * Type: text(2147483647)
     */
    private String newValue;

    /**
     * Database column: old_choices
     * Type: jsonb(2147483647)
     */
    private String oldChoices;

    /**
     * Database column: new_choices
     * Type: jsonb(2147483647)
     */
    private String newChoices;

    /**
     * Database column: parameter_values_id
     * Type: int8(19) NOT NULL
     * Foreign Key → parameter_values.id
     */
    private Long parameterValuesId;

    /**
     * Database column: task_executions_id
     * Type: int8(19) NOT NULL
     * Foreign Key → task_executions.id
     */
    private Long taskExecutionsId;

    /**
     * Database column: facilities_id
     * Type: int8(19) NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: status
     * Type: varchar(50) NOT NULL
     */
    private String status;

    /**
     * Database column: initiators_reason
     * Type: text(2147483647)
     */
    private String initiatorsReason;

    /**
     * Database column: correctors_reason
     * Type: text(2147483647)
     */
    private String correctorsReason;

    /**
     * Database column: reviewers_reason
     * Type: text(2147483647)
     */
    private String reviewersReason;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: previous_state
     * Type: varchar(50)
     * Default: NULL::character varying
     */
    private String previousState;

    /**
     * Default constructor
     */
    public Corrections() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param code code
     * @param oldValue old_value
     * @param newValue new_value
     * @param oldChoices old_choices
     * @param newChoices new_choices
     * @param parameterValuesId parameter_values_id
     * @param taskExecutionsId task_executions_id
     * @param facilitiesId facilities_id
     * @param jobsId jobs_id
     * @param status status
     * @param initiatorsReason initiators_reason
     * @param correctorsReason correctors_reason
     * @param reviewersReason reviewers_reason
     * @param createdBy created_by
     * @param createdAt created_at
     * @param modifiedBy modified_by
     * @param modifiedAt modified_at
     * @param previousState previous_state
     */
    public Corrections(Long id, String code, String oldValue, String newValue, String oldChoices, String newChoices, Long parameterValuesId, Long taskExecutionsId, Long facilitiesId, Long jobsId, String status, String initiatorsReason, String correctorsReason, String reviewersReason, Long createdBy, Long createdAt, Long modifiedBy, Long modifiedAt, String previousState) {
        this.id = id;
        this.code = code;
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.oldChoices = oldChoices;
        this.newChoices = newChoices;
        this.parameterValuesId = parameterValuesId;
        this.taskExecutionsId = taskExecutionsId;
        this.facilitiesId = facilitiesId;
        this.jobsId = jobsId;
        this.status = status;
        this.initiatorsReason = initiatorsReason;
        this.correctorsReason = correctorsReason;
        this.reviewersReason = reviewersReason;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.modifiedBy = modifiedBy;
        this.modifiedAt = modifiedAt;
        this.previousState = previousState;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of code
     * @return String value of code
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets the value of code
     * @param code new value for code
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("code cannot be null (NOT NULL constraint)");
        }
        this.code = code;
    }

    /**
     * Gets the value of old_value
     * @return String value of old_value
     */
    public String getOldValue() {
        return this.oldValue;
    }

    /**
     * Sets the value of old_value
     * @param oldValue new value for old_value
     */
    public void setOldValue(String oldValue) {
        this.oldValue = oldValue;
    }

    /**
     * Gets the value of new_value
     * @return String value of new_value
     */
    public String getNewValue() {
        return this.newValue;
    }

    /**
     * Sets the value of new_value
     * @param newValue new value for new_value
     */
    public void setNewValue(String newValue) {
        this.newValue = newValue;
    }

    /**
     * Gets the value of old_choices
     * @return String value of old_choices
     */
    public String getOldChoices() {
        return this.oldChoices;
    }

    /**
     * Sets the value of old_choices
     * @param oldChoices new value for old_choices
     */
    public void setOldChoices(String oldChoices) {
        this.oldChoices = oldChoices;
    }

    /**
     * Gets the value of new_choices
     * @return String value of new_choices
     */
    public String getNewChoices() {
        return this.newChoices;
    }

    /**
     * Sets the value of new_choices
     * @param newChoices new value for new_choices
     */
    public void setNewChoices(String newChoices) {
        this.newChoices = newChoices;
    }

    /**
     * Gets the value of parameter_values_id
     * @return Long value of parameter_values_id
     */
    public Long getParameterValuesId() {
        return this.parameterValuesId;
    }

    /**
     * Sets the value of parameter_values_id
     * @param parameterValuesId new value for parameter_values_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setParameterValuesId(Long parameterValuesId) {
        if (parameterValuesId == null) {
            throw new IllegalArgumentException("parameter_values_id cannot be null (NOT NULL constraint)");
        }
        this.parameterValuesId = parameterValuesId;
    }

    /**
     * Gets the value of task_executions_id
     * @return Long value of task_executions_id
     */
    public Long getTaskExecutionsId() {
        return this.taskExecutionsId;
    }

    /**
     * Sets the value of task_executions_id
     * @param taskExecutionsId new value for task_executions_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTaskExecutionsId(Long taskExecutionsId) {
        if (taskExecutionsId == null) {
            throw new IllegalArgumentException("task_executions_id cannot be null (NOT NULL constraint)");
        }
        this.taskExecutionsId = taskExecutionsId;
    }

    /**
     * Gets the value of facilities_id
     * @return Long value of facilities_id
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets the value of facilities_id
     * @param facilitiesId new value for facilities_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null (NOT NULL constraint)");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of status
     * @return String value of status
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Sets the value of status
     * @param status new value for status
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setStatus(String status) {
        if (status == null) {
            throw new IllegalArgumentException("status cannot be null (NOT NULL constraint)");
        }
        this.status = status;
    }

    /**
     * Gets the value of initiators_reason
     * @return String value of initiators_reason
     */
    public String getInitiatorsReason() {
        return this.initiatorsReason;
    }

    /**
     * Sets the value of initiators_reason
     * @param initiatorsReason new value for initiators_reason
     */
    public void setInitiatorsReason(String initiatorsReason) {
        this.initiatorsReason = initiatorsReason;
    }

    /**
     * Gets the value of correctors_reason
     * @return String value of correctors_reason
     */
    public String getCorrectorsReason() {
        return this.correctorsReason;
    }

    /**
     * Sets the value of correctors_reason
     * @param correctorsReason new value for correctors_reason
     */
    public void setCorrectorsReason(String correctorsReason) {
        this.correctorsReason = correctorsReason;
    }

    /**
     * Gets the value of reviewers_reason
     * @return String value of reviewers_reason
     */
    public String getReviewersReason() {
        return this.reviewersReason;
    }

    /**
     * Sets the value of reviewers_reason
     * @param reviewersReason new value for reviewers_reason
     */
    public void setReviewersReason(String reviewersReason) {
        this.reviewersReason = reviewersReason;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of previous_state
     * @return String value of previous_state
     */
    public String getPreviousState() {
        return this.previousState;
    }

    /**
     * Sets the value of previous_state
     * @param previousState new value for previous_state
     */
    public void setPreviousState(String previousState) {
        this.previousState = previousState;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.code == null) {
            violations.add("code cannot be null");
        }
        if (this.parameterValuesId == null) {
            violations.add("parameter_values_id cannot be null");
        }
        if (this.taskExecutionsId == null) {
            violations.add("task_executions_id cannot be null");
        }
        if (this.facilitiesId == null) {
            violations.add("facilities_id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.status == null) {
            violations.add("status cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Corrections other = (Corrections) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Corrections{" +
                "id=" + id +
                ", code=" + code +
                ", oldValue=" + oldValue +
                ", newValue=" + newValue +
                ", oldChoices=" + oldChoices +
                ", newChoices=" + newChoices +
                ", parameterValuesId=" + parameterValuesId +
                ", taskExecutionsId=" + taskExecutionsId +
                ", facilitiesId=" + facilitiesId +
                ", jobsId=" + jobsId +
                ", status=" + status +
                ", initiatorsReason=" + initiatorsReason +
                ", correctorsReason=" + correctorsReason +
                ", reviewersReason=" + reviewersReason +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                ", previousState=" + previousState +
                '}';
    }
}
