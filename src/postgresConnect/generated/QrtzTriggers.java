package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: qrtz_triggers
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: qrtz_triggers
 * - Primary Keys: sched_name, trigger_name, trigger_group
 * 
 * Indexes:
 * - idx_qrtz_t_n_state: sched_name, trigger_name, trigger_group, trigger_state
 * - idx_qrtz_t_g: sched_name, trigger_group
 * - idx_qrtz_t_nft_st_misfire: sched_name, misfire_instr, next_fire_time, trigger_state
 * - idx_qrtz_t_nft_st: sched_name, trigger_state, next_fire_time
 * - idx_qrtz_t_next_fire_time: sched_name, next_fire_time
 * - idx_qrtz_t_c: sched_name, calendar_name
 * - idx_qrtz_t_n_g_state: sched_name, trigger_group, trigger_state
 * - idx_qrtz_t_nft_misfire: sched_name, misfire_instr, next_fire_time
 * - idx_qrtz_t_nft_st_misfire_grp: sched_name, misfire_instr, next_fire_time, trigger_group, trigger_state
 * - idx_qrtz_t_jg: sched_name, job_group
 * - idx_qrtz_t_state: sched_name, trigger_state
 * - idx_qrtz_t_j: sched_name, job_name, job_group
 * 
 * Check Constraints:
 * - 2200_221769_11_not_null: trigger_type IS NOT NULL
 * - 2200_221769_4_not_null: job_name IS NOT NULL
 * - 2200_221769_2_not_null: trigger_name IS NOT NULL
 * - 2200_221769_1_not_null: sched_name IS NOT NULL
 * - 2200_221769_10_not_null: trigger_state IS NOT NULL
 * - 2200_221769_3_not_null: trigger_group IS NOT NULL
 * - 2200_221769_5_not_null: job_group IS NOT NULL
 * - 2200_221769_12_not_null: start_time IS NOT NULL
 * 
 * Foreign Keys:
 * - sched_name → qrtz_job_details.sched_name
 * - job_name → qrtz_job_details.job_name
 * - job_group → qrtz_job_details.job_group
 */
public class QrtzTriggers implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_job_details.sched_name
     */
    private String schedName;

    /**
     * Database column: trigger_name
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String triggerName;

    /**
     * Database column: trigger_group
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String triggerGroup;

    /**
     * Database column: job_name
     * Type: varchar(200) NOT NULL
     * Foreign Key → qrtz_job_details.job_name
     */
    private String jobName;

    /**
     * Database column: job_group
     * Type: varchar(200) NOT NULL
     * Foreign Key → qrtz_job_details.job_group
     */
    private String jobGroup;

    /**
     * Database column: description
     * Type: varchar(250)
     */
    private String description;

    /**
     * Database column: next_fire_time
     * Type: int8(19)
     */
    private Long nextFireTime;

    /**
     * Database column: prev_fire_time
     * Type: int8(19)
     */
    private Long prevFireTime;

    /**
     * Database column: priority
     * Type: int4(10)
     */
    private Integer priority;

    /**
     * Database column: trigger_state
     * Type: varchar(16) NOT NULL
     */
    private String triggerState;

    /**
     * Database column: trigger_type
     * Type: varchar(8) NOT NULL
     */
    private String triggerType;

    /**
     * Database column: start_time
     * Type: int8(19) NOT NULL
     */
    private Long startTime;

    /**
     * Database column: end_time
     * Type: int8(19)
     */
    private Long endTime;

    /**
     * Database column: calendar_name
     * Type: varchar(200)
     */
    private String calendarName;

    /**
     * Database column: misfire_instr
     * Type: int2(5)
     */
    private String misfireInstr;

    /**
     * Database column: job_data
     * Type: bytea(2147483647)
     */
    private String jobData;

    /**
     * Default constructor
     */
    public QrtzTriggers() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param schedName sched_name
     * @param triggerName trigger_name
     * @param triggerGroup trigger_group
     * @param jobName job_name
     * @param jobGroup job_group
     * @param description description
     * @param nextFireTime next_fire_time
     * @param prevFireTime prev_fire_time
     * @param priority priority
     * @param triggerState trigger_state
     * @param triggerType trigger_type
     * @param startTime start_time
     * @param endTime end_time
     * @param calendarName calendar_name
     * @param misfireInstr misfire_instr
     * @param jobData job_data
     */
    public QrtzTriggers(String schedName, String triggerName, String triggerGroup, String jobName, String jobGroup, String description, Long nextFireTime, Long prevFireTime, Integer priority, String triggerState, String triggerType, Long startTime, Long endTime, String calendarName, String misfireInstr, String jobData) {
        this.schedName = schedName;
        this.triggerName = triggerName;
        this.triggerGroup = triggerGroup;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
        this.description = description;
        this.nextFireTime = nextFireTime;
        this.prevFireTime = prevFireTime;
        this.priority = priority;
        this.triggerState = triggerState;
        this.triggerType = triggerType;
        this.startTime = startTime;
        this.endTime = endTime;
        this.calendarName = calendarName;
        this.misfireInstr = misfireInstr;
        this.jobData = jobData;
    }

    /**
     * Gets the value of sched_name
     * @return String value of sched_name
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets the value of sched_name
     * @param schedName new value for sched_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null (NOT NULL constraint)");
        }
        this.schedName = schedName;
    }

    /**
     * Gets the value of trigger_name
     * @return String value of trigger_name
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Sets the value of trigger_name
     * @param triggerName new value for trigger_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerName(String triggerName) {
        if (triggerName == null) {
            throw new IllegalArgumentException("trigger_name cannot be null (NOT NULL constraint)");
        }
        this.triggerName = triggerName;
    }

    /**
     * Gets the value of trigger_group
     * @return String value of trigger_group
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Sets the value of trigger_group
     * @param triggerGroup new value for trigger_group
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerGroup(String triggerGroup) {
        if (triggerGroup == null) {
            throw new IllegalArgumentException("trigger_group cannot be null (NOT NULL constraint)");
        }
        this.triggerGroup = triggerGroup;
    }

    /**
     * Gets the value of job_name
     * @return String value of job_name
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Sets the value of job_name
     * @param jobName new value for job_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobName(String jobName) {
        if (jobName == null) {
            throw new IllegalArgumentException("job_name cannot be null (NOT NULL constraint)");
        }
        this.jobName = jobName;
    }

    /**
     * Gets the value of job_group
     * @return String value of job_group
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Sets the value of job_group
     * @param jobGroup new value for job_group
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobGroup(String jobGroup) {
        if (jobGroup == null) {
            throw new IllegalArgumentException("job_group cannot be null (NOT NULL constraint)");
        }
        this.jobGroup = jobGroup;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of next_fire_time
     * @return Long value of next_fire_time
     */
    public Long getNextFireTime() {
        return this.nextFireTime;
    }

    /**
     * Sets the value of next_fire_time
     * @param nextFireTime new value for next_fire_time
     */
    public void setNextFireTime(Long nextFireTime) {
        this.nextFireTime = nextFireTime;
    }

    /**
     * Gets the value of prev_fire_time
     * @return Long value of prev_fire_time
     */
    public Long getPrevFireTime() {
        return this.prevFireTime;
    }

    /**
     * Sets the value of prev_fire_time
     * @param prevFireTime new value for prev_fire_time
     */
    public void setPrevFireTime(Long prevFireTime) {
        this.prevFireTime = prevFireTime;
    }

    /**
     * Gets the value of priority
     * @return Integer value of priority
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Sets the value of priority
     * @param priority new value for priority
     */
    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    /**
     * Gets the value of trigger_state
     * @return String value of trigger_state
     */
    public String getTriggerState() {
        return this.triggerState;
    }

    /**
     * Sets the value of trigger_state
     * @param triggerState new value for trigger_state
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerState(String triggerState) {
        if (triggerState == null) {
            throw new IllegalArgumentException("trigger_state cannot be null (NOT NULL constraint)");
        }
        this.triggerState = triggerState;
    }

    /**
     * Gets the value of trigger_type
     * @return String value of trigger_type
     */
    public String getTriggerType() {
        return this.triggerType;
    }

    /**
     * Sets the value of trigger_type
     * @param triggerType new value for trigger_type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerType(String triggerType) {
        if (triggerType == null) {
            throw new IllegalArgumentException("trigger_type cannot be null (NOT NULL constraint)");
        }
        this.triggerType = triggerType;
    }

    /**
     * Gets the value of start_time
     * @return Long value of start_time
     */
    public Long getStartTime() {
        return this.startTime;
    }

    /**
     * Sets the value of start_time
     * @param startTime new value for start_time
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setStartTime(Long startTime) {
        if (startTime == null) {
            throw new IllegalArgumentException("start_time cannot be null (NOT NULL constraint)");
        }
        this.startTime = startTime;
    }

    /**
     * Gets the value of end_time
     * @return Long value of end_time
     */
    public Long getEndTime() {
        return this.endTime;
    }

    /**
     * Sets the value of end_time
     * @param endTime new value for end_time
     */
    public void setEndTime(Long endTime) {
        this.endTime = endTime;
    }

    /**
     * Gets the value of calendar_name
     * @return String value of calendar_name
     */
    public String getCalendarName() {
        return this.calendarName;
    }

    /**
     * Sets the value of calendar_name
     * @param calendarName new value for calendar_name
     */
    public void setCalendarName(String calendarName) {
        this.calendarName = calendarName;
    }

    /**
     * Gets the value of misfire_instr
     * @return String value of misfire_instr
     */
    public String getMisfireInstr() {
        return this.misfireInstr;
    }

    /**
     * Sets the value of misfire_instr
     * @param misfireInstr new value for misfire_instr
     */
    public void setMisfireInstr(String misfireInstr) {
        this.misfireInstr = misfireInstr;
    }

    /**
     * Gets the value of job_data
     * @return String value of job_data
     */
    public String getJobData() {
        return this.jobData;
    }

    /**
     * Sets the value of job_data
     * @param jobData new value for job_data
     */
    public void setJobData(String jobData) {
        this.jobData = jobData;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.schedName == null) {
            violations.add("sched_name cannot be null");
        }
        if (this.triggerName == null) {
            violations.add("trigger_name cannot be null");
        }
        if (this.triggerGroup == null) {
            violations.add("trigger_group cannot be null");
        }
        if (this.jobName == null) {
            violations.add("job_name cannot be null");
        }
        if (this.jobGroup == null) {
            violations.add("job_group cannot be null");
        }
        if (this.triggerState == null) {
            violations.add("trigger_state cannot be null");
        }
        if (this.triggerType == null) {
            violations.add("trigger_type cannot be null");
        }
        if (this.startTime == null) {
            violations.add("start_time cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzTriggers other = (QrtzTriggers) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.triggerName, other.triggerName) && Objects.equals(this.triggerGroup, other.triggerGroup);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.triggerName, this.triggerGroup);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "QrtzTriggers{" +
                "schedName=" + schedName +
                ", triggerName=" + triggerName +
                ", triggerGroup=" + triggerGroup +
                ", jobName=" + jobName +
                ", jobGroup=" + jobGroup +
                ", description=" + description +
                ", nextFireTime=" + nextFireTime +
                ", prevFireTime=" + prevFireTime +
                ", priority=" + priority +
                ", triggerState=" + triggerState +
                ", triggerType=" + triggerType +
                ", startTime=" + startTime +
                ", endTime=" + endTime +
                ", calendarName=" + calendarName +
                ", misfireInstr=" + misfireInstr +
                ", jobData=" + jobData +
                '}';
    }
}
