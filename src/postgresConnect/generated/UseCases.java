package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: use_cases
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: use_cases
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_222853_8_not_null: created_by IS NOT NULL
 * - 2200_222853_2_not_null: name IS NOT NULL
 * - 2200_222853_6_not_null: metadata IS NOT NULL
 * - 2200_222853_9_not_null: created_at IS NOT NULL
 * - 2200_222853_10_not_null: modified_by IS NOT NULL
 * - 2200_222853_1_not_null: id IS NOT NULL
 * - 2200_222853_7_not_null: archived IS NOT NULL
 * - 2200_222853_5_not_null: order_tree IS NOT NULL
 * - 2200_222853_11_not_null: modified_at IS NOT NULL
 * - 2200_222853_3_not_null: label IS NOT NULL
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 */
public class UseCases implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: varchar(2147483647) NOT NULL
     */
    private String name;

    /**
     * Database column: label
     * Type: varchar(2147483647) NOT NULL
     */
    private String label;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     * Default: 1
     */
    private Integer orderTree;

    /**
     * Database column: metadata
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String metadata;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Default constructor
     */
    public UseCases() {
        // Initialize with default values where applicable
        this.orderTree = 1; // Default value
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param name name
     * @param label label
     * @param description description
     * @param orderTree order_tree
     * @param metadata metadata
     * @param archived archived
     * @param createdBy created_by
     * @param createdAt created_at
     * @param modifiedBy modified_by
     * @param modifiedAt modified_at
     */
    public UseCases(Long id, String name, String label, String description, Integer orderTree, String metadata, Boolean archived, Long createdBy, Long createdAt, Long modifiedBy, Long modifiedAt) {
        this.id = id;
        this.name = name;
        this.label = label;
        this.description = description;
        this.orderTree = orderTree;
        this.metadata = metadata;
        this.archived = archived;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.modifiedBy = modifiedBy;
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null (NOT NULL constraint)");
        }
        this.name = name;
    }

    /**
     * Gets the value of label
     * @return String value of label
     */
    public String getLabel() {
        return this.label;
    }

    /**
     * Sets the value of label
     * @param label new value for label
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setLabel(String label) {
        if (label == null) {
            throw new IllegalArgumentException("label cannot be null (NOT NULL constraint)");
        }
        this.label = label;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of metadata
     * @return String value of metadata
     */
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Sets the value of metadata
     * @param metadata new value for metadata
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setMetadata(String metadata) {
        if (metadata == null) {
            throw new IllegalArgumentException("metadata cannot be null (NOT NULL constraint)");
        }
        this.metadata = metadata;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.name == null) {
            violations.add("name cannot be null");
        }
        if (this.label == null) {
            violations.add("label cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.metadata == null) {
            violations.add("metadata cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        UseCases other = (UseCases) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "UseCases{" +
                "id=" + id +
                ", name=" + name +
                ", label=" + label +
                ", description=" + description +
                ", orderTree=" + orderTree +
                ", metadata=" + metadata +
                ", archived=" + archived +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                '}';
    }
}
