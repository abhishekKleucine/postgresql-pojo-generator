package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: databasechangelog
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: databasechangelog
 * 
 * Check Constraints:
 * - 2200_221520_1_not_null: id IS NOT NULL
 * - 2200_221520_2_not_null: author IS NOT NULL
 * - 2200_221520_4_not_null: dateexecuted IS NOT NULL
 * - 2200_221520_6_not_null: exectype IS NOT NULL
 * - 2200_221520_3_not_null: filename IS NOT NULL
 * - 2200_221520_5_not_null: orderexecuted IS NOT NULL
 */
public class Databasechangelog implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: varchar(255) NOT NULL
     */
    private String id;

    /**
     * Database column: author
     * Type: varchar(255) NOT NULL
     */
    private String author;

    /**
     * Database column: filename
     * Type: varchar(255) NOT NULL
     */
    private String filename;

    /**
     * Database column: dateexecuted
     * Type: timestamp(29) NOT NULL
     */
    private java.time.LocalDateTime dateexecuted;

    /**
     * Database column: orderexecuted
     * Type: int4(10) NOT NULL
     */
    private Integer orderexecuted;

    /**
     * Database column: exectype
     * Type: varchar(10) NOT NULL
     */
    private String exectype;

    /**
     * Database column: md5sum
     * Type: varchar(35)
     */
    private String md5sum;

    /**
     * Database column: description
     * Type: varchar(255)
     */
    private String description;

    /**
     * Database column: comments
     * Type: varchar(255)
     */
    private String comments;

    /**
     * Database column: tag
     * Type: varchar(255)
     */
    private String tag;

    /**
     * Database column: liquibase
     * Type: varchar(20)
     */
    private String liquibase;

    /**
     * Database column: contexts
     * Type: varchar(255)
     */
    private String contexts;

    /**
     * Database column: labels
     * Type: varchar(255)
     */
    private String labels;

    /**
     * Database column: deployment_id
     * Type: varchar(10)
     */
    private String deploymentId;

    /**
     * Default constructor
     */
    public Databasechangelog() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param author author
     * @param filename filename
     * @param dateexecuted dateexecuted
     * @param orderexecuted orderexecuted
     * @param exectype exectype
     * @param md5sum md5sum
     * @param description description
     * @param comments comments
     * @param tag tag
     * @param liquibase liquibase
     * @param contexts contexts
     * @param labels labels
     * @param deploymentId deployment_id
     */
    public Databasechangelog(String id, String author, String filename, java.time.LocalDateTime dateexecuted, Integer orderexecuted, String exectype, String md5sum, String description, String comments, String tag, String liquibase, String contexts, String labels, String deploymentId) {
        this.id = id;
        this.author = author;
        this.filename = filename;
        this.dateexecuted = dateexecuted;
        this.orderexecuted = orderexecuted;
        this.exectype = exectype;
        this.md5sum = md5sum;
        this.description = description;
        this.comments = comments;
        this.tag = tag;
        this.liquibase = liquibase;
        this.contexts = contexts;
        this.labels = labels;
        this.deploymentId = deploymentId;
    }

    /**
     * Gets the value of id
     * @return String value of id
     */
    public String getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(String id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of author
     * @return String value of author
     */
    public String getAuthor() {
        return this.author;
    }

    /**
     * Sets the value of author
     * @param author new value for author
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setAuthor(String author) {
        if (author == null) {
            throw new IllegalArgumentException("author cannot be null (NOT NULL constraint)");
        }
        this.author = author;
    }

    /**
     * Gets the value of filename
     * @return String value of filename
     */
    public String getFilename() {
        return this.filename;
    }

    /**
     * Sets the value of filename
     * @param filename new value for filename
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFilename(String filename) {
        if (filename == null) {
            throw new IllegalArgumentException("filename cannot be null (NOT NULL constraint)");
        }
        this.filename = filename;
    }

    /**
     * Gets the value of dateexecuted
     * @return java.time.LocalDateTime value of dateexecuted
     */
    public java.time.LocalDateTime getDateexecuted() {
        return this.dateexecuted;
    }

    /**
     * Sets the value of dateexecuted
     * @param dateexecuted new value for dateexecuted
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setDateexecuted(java.time.LocalDateTime dateexecuted) {
        if (dateexecuted == null) {
            throw new IllegalArgumentException("dateexecuted cannot be null (NOT NULL constraint)");
        }
        this.dateexecuted = dateexecuted;
    }

    /**
     * Gets the value of orderexecuted
     * @return Integer value of orderexecuted
     */
    public Integer getOrderexecuted() {
        return this.orderexecuted;
    }

    /**
     * Sets the value of orderexecuted
     * @param orderexecuted new value for orderexecuted
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderexecuted(Integer orderexecuted) {
        if (orderexecuted == null) {
            throw new IllegalArgumentException("orderexecuted cannot be null (NOT NULL constraint)");
        }
        this.orderexecuted = orderexecuted;
    }

    /**
     * Gets the value of exectype
     * @return String value of exectype
     */
    public String getExectype() {
        return this.exectype;
    }

    /**
     * Sets the value of exectype
     * @param exectype new value for exectype
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setExectype(String exectype) {
        if (exectype == null) {
            throw new IllegalArgumentException("exectype cannot be null (NOT NULL constraint)");
        }
        this.exectype = exectype;
    }

    /**
     * Gets the value of md5sum
     * @return String value of md5sum
     */
    public String getMd5sum() {
        return this.md5sum;
    }

    /**
     * Sets the value of md5sum
     * @param md5sum new value for md5sum
     */
    public void setMd5sum(String md5sum) {
        this.md5sum = md5sum;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of comments
     * @return String value of comments
     */
    public String getComments() {
        return this.comments;
    }

    /**
     * Sets the value of comments
     * @param comments new value for comments
     */
    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * Gets the value of tag
     * @return String value of tag
     */
    public String getTag() {
        return this.tag;
    }

    /**
     * Sets the value of tag
     * @param tag new value for tag
     */
    public void setTag(String tag) {
        this.tag = tag;
    }

    /**
     * Gets the value of liquibase
     * @return String value of liquibase
     */
    public String getLiquibase() {
        return this.liquibase;
    }

    /**
     * Sets the value of liquibase
     * @param liquibase new value for liquibase
     */
    public void setLiquibase(String liquibase) {
        this.liquibase = liquibase;
    }

    /**
     * Gets the value of contexts
     * @return String value of contexts
     */
    public String getContexts() {
        return this.contexts;
    }

    /**
     * Sets the value of contexts
     * @param contexts new value for contexts
     */
    public void setContexts(String contexts) {
        this.contexts = contexts;
    }

    /**
     * Gets the value of labels
     * @return String value of labels
     */
    public String getLabels() {
        return this.labels;
    }

    /**
     * Sets the value of labels
     * @param labels new value for labels
     */
    public void setLabels(String labels) {
        this.labels = labels;
    }

    /**
     * Gets the value of deployment_id
     * @return String value of deployment_id
     */
    public String getDeploymentId() {
        return this.deploymentId;
    }

    /**
     * Sets the value of deployment_id
     * @param deploymentId new value for deployment_id
     */
    public void setDeploymentId(String deploymentId) {
        this.deploymentId = deploymentId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.author == null) {
            violations.add("author cannot be null");
        }
        if (this.filename == null) {
            violations.add("filename cannot be null");
        }
        if (this.dateexecuted == null) {
            violations.add("dateexecuted cannot be null");
        }
        if (this.orderexecuted == null) {
            violations.add("orderexecuted cannot be null");
        }
        if (this.exectype == null) {
            violations.add("exectype cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Databasechangelog other = (Databasechangelog) obj;
        return Objects.equals(this.id, other.id) && Objects.equals(this.author, other.author) && Objects.equals(this.filename, other.filename) && Objects.equals(this.dateexecuted, other.dateexecuted) && Objects.equals(this.orderexecuted, other.orderexecuted) && Objects.equals(this.exectype, other.exectype) && Objects.equals(this.md5sum, other.md5sum) && Objects.equals(this.description, other.description) && Objects.equals(this.comments, other.comments) && Objects.equals(this.tag, other.tag) && Objects.equals(this.liquibase, other.liquibase) && Objects.equals(this.contexts, other.contexts) && Objects.equals(this.labels, other.labels) && Objects.equals(this.deploymentId, other.deploymentId);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.author, this.filename, this.dateexecuted, this.orderexecuted, this.exectype, this.md5sum, this.description, this.comments, this.tag, this.liquibase, this.contexts, this.labels, this.deploymentId);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Databasechangelog{" +
                "id=" + id +
                ", author=" + author +
                ", filename=" + filename +
                ", dateexecuted=" + dateexecuted +
                ", orderexecuted=" + orderexecuted +
                ", exectype=" + exectype +
                ", md5sum=" + md5sum +
                ", description=" + description +
                ", comments=" + comments +
                ", tag=" + tag +
                ", liquibase=" + liquibase +
                ", contexts=" + contexts +
                ", labels=" + labels +
                ", deploymentId=" + deploymentId +
                '}';
    }
}
