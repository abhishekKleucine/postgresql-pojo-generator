package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: trained_user_tasks_mapping
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: trained_user_tasks_mapping
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx_d554946a549ed913739e2388d9943: tasks_id
 * - idx_trained_user_tasks_mapping (UNIQUE): trained_users_id, tasks_id
 * - idx_d554946a549ed913739e2388d9942: trained_users_id
 * 
 * Check Constraints:
 * - 2200_221924_5_not_null: modified_at IS NOT NULL
 * - 2200_221924_2_not_null: tasks_id IS NOT NULL
 * - 2200_221924_7_not_null: modified_by IS NOT NULL
 * - 2200_221924_6_not_null: created_by IS NOT NULL
 * - 2200_221924_3_not_null: trained_users_id IS NOT NULL
 * - 2200_221924_1_not_null: id IS NOT NULL
 * - 2200_221924_4_not_null: created_at IS NOT NULL
 * 
 * Foreign Keys:
 * - tasks_id → tasks.id
 * - trained_users_id → trained_users.id
 */
public class TrainedUserTasksMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: tasks_id
     * Type: int8(19) NOT NULL
     * Foreign Key → tasks.id
     */
    private Long tasksId;

    /**
     * Database column: trained_users_id
     * Type: int8(19) NOT NULL
     * Foreign Key → trained_users.id
     */
    private Long trainedUsersId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     * Default: (date_part('epoch'::text, now()))::bigint
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     * Default: (date_part('epoch'::text, now()))::bigint
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Default: 1
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Default: 1
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public TrainedUserTasksMapping() {
        // Initialize with default values where applicable
        this.createdBy = 1L; // Default value
        this.modifiedBy = 1L; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param tasksId tasks_id
     * @param trainedUsersId trained_users_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     */
    public TrainedUserTasksMapping(Long id, Long tasksId, Long trainedUsersId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy) {
        this.id = id;
        this.tasksId = tasksId;
        this.trainedUsersId = trainedUsersId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of tasks_id
     * @return Long value of tasks_id
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets the value of tasks_id
     * @param tasksId new value for tasks_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTasksId(Long tasksId) {
        if (tasksId == null) {
            throw new IllegalArgumentException("tasks_id cannot be null (NOT NULL constraint)");
        }
        this.tasksId = tasksId;
    }

    /**
     * Gets the value of trained_users_id
     * @return Long value of trained_users_id
     */
    public Long getTrainedUsersId() {
        return this.trainedUsersId;
    }

    /**
     * Sets the value of trained_users_id
     * @param trainedUsersId new value for trained_users_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTrainedUsersId(Long trainedUsersId) {
        if (trainedUsersId == null) {
            throw new IllegalArgumentException("trained_users_id cannot be null (NOT NULL constraint)");
        }
        this.trainedUsersId = trainedUsersId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.tasksId == null) {
            violations.add("tasks_id cannot be null");
        }
        if (this.trainedUsersId == null) {
            violations.add("trained_users_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TrainedUserTasksMapping other = (TrainedUserTasksMapping) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "TrainedUserTasksMapping{" +
                "id=" + id +
                ", tasksId=" + tasksId +
                ", trainedUsersId=" + trainedUsersId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
