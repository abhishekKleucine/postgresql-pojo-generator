package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: client_credentials
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: client_credentials
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221493_5_not_null: archived IS NOT NULL
 * - 2200_221493_2_not_null: client_secret IS NOT NULL
 * - 2200_221493_1_not_null: id IS NOT NULL
 * - 2200_221493_3_not_null: client_name IS NOT NULL
 */
public class ClientCredentials implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: varchar(255) NOT NULL
     * Primary Key
     */
    private String id;

    /**
     * Database column: client_secret
     * Type: varchar(255) NOT NULL
     */
    private String clientSecret;

    /**
     * Database column: client_name
     * Type: varchar(50) NOT NULL
     */
    private String clientName;

    /**
     * Database column: client_description
     * Type: varchar(255)
     */
    private String clientDescription;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Default constructor
     */
    public ClientCredentials() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param clientSecret client_secret
     * @param clientName client_name
     * @param clientDescription client_description
     * @param archived archived
     */
    public ClientCredentials(String id, String clientSecret, String clientName, String clientDescription, Boolean archived) {
        this.id = id;
        this.clientSecret = clientSecret;
        this.clientName = clientName;
        this.clientDescription = clientDescription;
        this.archived = archived;
    }

    /**
     * Gets the value of id
     * @return String value of id
     */
    public String getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(String id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of client_secret
     * @return String value of client_secret
     */
    public String getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Sets the value of client_secret
     * @param clientSecret new value for client_secret
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setClientSecret(String clientSecret) {
        if (clientSecret == null) {
            throw new IllegalArgumentException("client_secret cannot be null (NOT NULL constraint)");
        }
        this.clientSecret = clientSecret;
    }

    /**
     * Gets the value of client_name
     * @return String value of client_name
     */
    public String getClientName() {
        return this.clientName;
    }

    /**
     * Sets the value of client_name
     * @param clientName new value for client_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setClientName(String clientName) {
        if (clientName == null) {
            throw new IllegalArgumentException("client_name cannot be null (NOT NULL constraint)");
        }
        this.clientName = clientName;
    }

    /**
     * Gets the value of client_description
     * @return String value of client_description
     */
    public String getClientDescription() {
        return this.clientDescription;
    }

    /**
     * Sets the value of client_description
     * @param clientDescription new value for client_description
     */
    public void setClientDescription(String clientDescription) {
        this.clientDescription = clientDescription;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.clientSecret == null) {
            violations.add("client_secret cannot be null");
        }
        if (this.clientName == null) {
            violations.add("client_name cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ClientCredentials other = (ClientCredentials) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "ClientCredentials{" +
                "id=" + id +
                ", clientSecret=" + clientSecret +
                ", clientName=" + clientName +
                ", clientDescription=" + clientDescription +
                ", archived=" + archived +
                '}';
    }
}
