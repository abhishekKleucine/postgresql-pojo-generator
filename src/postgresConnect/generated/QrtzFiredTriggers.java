package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: qrtz_fired_triggers
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: qrtz_fired_triggers
 * - Primary Keys: sched_name, entry_id
 * 
 * Indexes:
 * - idx_qrtz_ft_tg: sched_name, trigger_group
 * - idx_qrtz_ft_jg: sched_name, job_group
 * - idx_qrtz_ft_inst_job_req_rcvry: sched_name, instance_name, requests_recovery
 * - idx_qrtz_ft_j_g: sched_name, job_name, job_group
 * - idx_qrtz_ft_trig_inst_name: sched_name, instance_name
 * - idx_qrtz_ft_t_g: sched_name, trigger_name, trigger_group
 * 
 * Check Constraints:
 * - 2200_221740_4_not_null: trigger_group IS NOT NULL
 * - 2200_221740_7_not_null: sched_time IS NOT NULL
 * - 2200_221740_6_not_null: fired_time IS NOT NULL
 * - 2200_221740_2_not_null: entry_id IS NOT NULL
 * - 2200_221740_8_not_null: priority IS NOT NULL
 * - 2200_221740_9_not_null: state IS NOT NULL
 * - 2200_221740_5_not_null: instance_name IS NOT NULL
 * - 2200_221740_3_not_null: trigger_name IS NOT NULL
 * - 2200_221740_1_not_null: sched_name IS NOT NULL
 */
public class QrtzFiredTriggers implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     */
    private String schedName;

    /**
     * Database column: entry_id
     * Type: varchar(95) NOT NULL
     * Primary Key
     */
    private String entryId;

    /**
     * Database column: trigger_name
     * Type: varchar(200) NOT NULL
     */
    private String triggerName;

    /**
     * Database column: trigger_group
     * Type: varchar(200) NOT NULL
     */
    private String triggerGroup;

    /**
     * Database column: instance_name
     * Type: varchar(200) NOT NULL
     */
    private String instanceName;

    /**
     * Database column: fired_time
     * Type: int8(19) NOT NULL
     */
    private Long firedTime;

    /**
     * Database column: sched_time
     * Type: int8(19) NOT NULL
     */
    private Long schedTime;

    /**
     * Database column: priority
     * Type: int4(10) NOT NULL
     */
    private Integer priority;

    /**
     * Database column: state
     * Type: varchar(16) NOT NULL
     */
    private String state;

    /**
     * Database column: job_name
     * Type: varchar(200)
     */
    private String jobName;

    /**
     * Database column: job_group
     * Type: varchar(200)
     */
    private String jobGroup;

    /**
     * Database column: is_nonconcurrent
     * Type: bool(1)
     */
    private Boolean isNonconcurrent;

    /**
     * Database column: requests_recovery
     * Type: bool(1)
     */
    private Boolean requestsRecovery;

    /**
     * Default constructor
     */
    public QrtzFiredTriggers() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param schedName sched_name
     * @param entryId entry_id
     * @param triggerName trigger_name
     * @param triggerGroup trigger_group
     * @param instanceName instance_name
     * @param firedTime fired_time
     * @param schedTime sched_time
     * @param priority priority
     * @param state state
     * @param jobName job_name
     * @param jobGroup job_group
     * @param isNonconcurrent is_nonconcurrent
     * @param requestsRecovery requests_recovery
     */
    public QrtzFiredTriggers(String schedName, String entryId, String triggerName, String triggerGroup, String instanceName, Long firedTime, Long schedTime, Integer priority, String state, String jobName, String jobGroup, Boolean isNonconcurrent, Boolean requestsRecovery) {
        this.schedName = schedName;
        this.entryId = entryId;
        this.triggerName = triggerName;
        this.triggerGroup = triggerGroup;
        this.instanceName = instanceName;
        this.firedTime = firedTime;
        this.schedTime = schedTime;
        this.priority = priority;
        this.state = state;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
        this.isNonconcurrent = isNonconcurrent;
        this.requestsRecovery = requestsRecovery;
    }

    /**
     * Gets the value of sched_name
     * @return String value of sched_name
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets the value of sched_name
     * @param schedName new value for sched_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null (NOT NULL constraint)");
        }
        this.schedName = schedName;
    }

    /**
     * Gets the value of entry_id
     * @return String value of entry_id
     */
    public String getEntryId() {
        return this.entryId;
    }

    /**
     * Sets the value of entry_id
     * @param entryId new value for entry_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setEntryId(String entryId) {
        if (entryId == null) {
            throw new IllegalArgumentException("entry_id cannot be null (NOT NULL constraint)");
        }
        this.entryId = entryId;
    }

    /**
     * Gets the value of trigger_name
     * @return String value of trigger_name
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Sets the value of trigger_name
     * @param triggerName new value for trigger_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerName(String triggerName) {
        if (triggerName == null) {
            throw new IllegalArgumentException("trigger_name cannot be null (NOT NULL constraint)");
        }
        this.triggerName = triggerName;
    }

    /**
     * Gets the value of trigger_group
     * @return String value of trigger_group
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Sets the value of trigger_group
     * @param triggerGroup new value for trigger_group
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerGroup(String triggerGroup) {
        if (triggerGroup == null) {
            throw new IllegalArgumentException("trigger_group cannot be null (NOT NULL constraint)");
        }
        this.triggerGroup = triggerGroup;
    }

    /**
     * Gets the value of instance_name
     * @return String value of instance_name
     */
    public String getInstanceName() {
        return this.instanceName;
    }

    /**
     * Sets the value of instance_name
     * @param instanceName new value for instance_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setInstanceName(String instanceName) {
        if (instanceName == null) {
            throw new IllegalArgumentException("instance_name cannot be null (NOT NULL constraint)");
        }
        this.instanceName = instanceName;
    }

    /**
     * Gets the value of fired_time
     * @return Long value of fired_time
     */
    public Long getFiredTime() {
        return this.firedTime;
    }

    /**
     * Sets the value of fired_time
     * @param firedTime new value for fired_time
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFiredTime(Long firedTime) {
        if (firedTime == null) {
            throw new IllegalArgumentException("fired_time cannot be null (NOT NULL constraint)");
        }
        this.firedTime = firedTime;
    }

    /**
     * Gets the value of sched_time
     * @return Long value of sched_time
     */
    public Long getSchedTime() {
        return this.schedTime;
    }

    /**
     * Sets the value of sched_time
     * @param schedTime new value for sched_time
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setSchedTime(Long schedTime) {
        if (schedTime == null) {
            throw new IllegalArgumentException("sched_time cannot be null (NOT NULL constraint)");
        }
        this.schedTime = schedTime;
    }

    /**
     * Gets the value of priority
     * @return Integer value of priority
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Sets the value of priority
     * @param priority new value for priority
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setPriority(Integer priority) {
        if (priority == null) {
            throw new IllegalArgumentException("priority cannot be null (NOT NULL constraint)");
        }
        this.priority = priority;
    }

    /**
     * Gets the value of state
     * @return String value of state
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets the value of state
     * @param state new value for state
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null (NOT NULL constraint)");
        }
        this.state = state;
    }

    /**
     * Gets the value of job_name
     * @return String value of job_name
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Sets the value of job_name
     * @param jobName new value for job_name
     */
    public void setJobName(String jobName) {
        this.jobName = jobName;
    }

    /**
     * Gets the value of job_group
     * @return String value of job_group
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Sets the value of job_group
     * @param jobGroup new value for job_group
     */
    public void setJobGroup(String jobGroup) {
        this.jobGroup = jobGroup;
    }

    /**
     * Gets the value of is_nonconcurrent
     * @return Boolean value of is_nonconcurrent
     */
    public Boolean getIsNonconcurrent() {
        return this.isNonconcurrent;
    }

    /**
     * Sets the value of is_nonconcurrent
     * @param isNonconcurrent new value for is_nonconcurrent
     */
    public void setIsNonconcurrent(Boolean isNonconcurrent) {
        this.isNonconcurrent = isNonconcurrent;
    }

    /**
     * Gets the value of requests_recovery
     * @return Boolean value of requests_recovery
     */
    public Boolean getRequestsRecovery() {
        return this.requestsRecovery;
    }

    /**
     * Sets the value of requests_recovery
     * @param requestsRecovery new value for requests_recovery
     */
    public void setRequestsRecovery(Boolean requestsRecovery) {
        this.requestsRecovery = requestsRecovery;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.schedName == null) {
            violations.add("sched_name cannot be null");
        }
        if (this.entryId == null) {
            violations.add("entry_id cannot be null");
        }
        if (this.triggerName == null) {
            violations.add("trigger_name cannot be null");
        }
        if (this.triggerGroup == null) {
            violations.add("trigger_group cannot be null");
        }
        if (this.instanceName == null) {
            violations.add("instance_name cannot be null");
        }
        if (this.firedTime == null) {
            violations.add("fired_time cannot be null");
        }
        if (this.schedTime == null) {
            violations.add("sched_time cannot be null");
        }
        if (this.priority == null) {
            violations.add("priority cannot be null");
        }
        if (this.state == null) {
            violations.add("state cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzFiredTriggers other = (QrtzFiredTriggers) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.entryId, other.entryId);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.entryId);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "QrtzFiredTriggers{" +
                "schedName=" + schedName +
                ", entryId=" + entryId +
                ", triggerName=" + triggerName +
                ", triggerGroup=" + triggerGroup +
                ", instanceName=" + instanceName +
                ", firedTime=" + firedTime +
                ", schedTime=" + schedTime +
                ", priority=" + priority +
                ", state=" + state +
                ", jobName=" + jobName +
                ", jobGroup=" + jobGroup +
                ", isNonconcurrent=" + isNonconcurrent +
                ", requestsRecovery=" + requestsRecovery +
                '}';
    }
}
