package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: codes
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: codes
 * - Primary Keys: type, clause, organisations_id
 * 
 * Indexes:
 * - codes_organisations_id_type_clause_pk (UNIQUE): organisations_id, type, clause
 * 
 * Check Constraints:
 * - 2200_221502_1_not_null: type IS NOT NULL
 * - 2200_221502_4_not_null: organisations_id IS NOT NULL
 * - 2200_221502_3_not_null: counter IS NOT NULL
 * - 2200_221502_2_not_null: clause IS NOT NULL
 * 
 * Foreign Keys:
 * - organisations_id → organisations.id
 */
public class Codes implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: type
     * Type: varchar(255) NOT NULL
     * Primary Key
     */
    private String type;

    /**
     * Database column: clause
     * Type: int2(5) NOT NULL
     * Primary Key
     */
    private String clause;

    /**
     * Database column: counter
     * Type: int4(10) NOT NULL
     */
    private Integer counter;

    /**
     * Database column: organisations_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Default constructor
     */
    public Codes() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param type type
     * @param clause clause
     * @param counter counter
     * @param organisationsId organisations_id
     */
    public Codes(String type, String clause, Integer counter, Long organisationsId) {
        this.type = type;
        this.clause = clause;
        this.counter = counter;
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of clause
     * @return String value of clause
     */
    public String getClause() {
        return this.clause;
    }

    /**
     * Sets the value of clause
     * @param clause new value for clause
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setClause(String clause) {
        if (clause == null) {
            throw new IllegalArgumentException("clause cannot be null (NOT NULL constraint)");
        }
        this.clause = clause;
    }

    /**
     * Gets the value of counter
     * @return Integer value of counter
     */
    public Integer getCounter() {
        return this.counter;
    }

    /**
     * Sets the value of counter
     * @param counter new value for counter
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCounter(Integer counter) {
        if (counter == null) {
            throw new IllegalArgumentException("counter cannot be null (NOT NULL constraint)");
        }
        this.counter = counter;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null (NOT NULL constraint)");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        if (this.clause == null) {
            violations.add("clause cannot be null");
        }
        if (this.counter == null) {
            violations.add("counter cannot be null");
        }
        if (this.organisationsId == null) {
            violations.add("organisations_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Codes other = (Codes) obj;
        return Objects.equals(this.type, other.type) && Objects.equals(this.clause, other.clause) && Objects.equals(this.organisationsId, other.organisationsId);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.type, this.clause, this.organisationsId);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Codes{" +
                "type=" + type +
                ", clause=" + clause +
                ", counter=" + counter +
                ", organisationsId=" + organisationsId +
                '}';
    }
}
