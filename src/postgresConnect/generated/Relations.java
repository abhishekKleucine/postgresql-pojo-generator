package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: relations
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: relations
 * - Primary Keys: id
 * 
 * Indexes:
 * - pkjxq7qi13myhmjajlr9rt (UNIQUE): id
 * 
 * Check Constraints:
 * - 2200_221784_7_not_null: cardinality IS NOT NULL
 * - 2200_221784_4_not_null: display_name IS NOT NULL
 * - 2200_221784_12_not_null: created_at IS NOT NULL
 * - 2200_221784_3_not_null: external_id IS NOT NULL
 * - 2200_221784_6_not_null: variables IS NOT NULL
 * - 2200_221784_10_not_null: url_path IS NOT NULL
 * - 2200_221784_13_not_null: modified_at IS NOT NULL
 * - 2200_221784_2_not_null: order_tree IS NOT NULL
 * - 2200_221784_14_not_null: created_by IS NOT NULL
 * - 2200_221784_5_not_null: validations IS NOT NULL
 * - 2200_221784_11_not_null: checklists_id IS NOT NULL
 * - 2200_221784_9_not_null: collection IS NOT NULL
 * - 2200_221784_15_not_null: modified_by IS NOT NULL
 * - 2200_221784_1_not_null: id IS NOT NULL
 * - 2200_221784_8_not_null: object_type_id IS NOT NULL
 * 
 * Foreign Keys:
 * - checklists_id → checklists.id
 */
public class Relations implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: external_id
     * Type: varchar(255) NOT NULL
     */
    private String externalId;

    /**
     * Database column: display_name
     * Type: varchar(255) NOT NULL
     */
    private String displayName;

    /**
     * Database column: validations
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String validations;

    /**
     * Database column: variables
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String variables;

    /**
     * Database column: cardinality
     * Type: varchar(50) NOT NULL
     */
    private String cardinality;

    /**
     * Database column: object_type_id
     * Type: varchar(50) NOT NULL
     */
    private String objectTypeId;

    /**
     * Database column: collection
     * Type: varchar(255) NOT NULL
     */
    private String collection;

    /**
     * Database column: url_path
     * Type: text(2147483647) NOT NULL
     */
    private String urlPath;

    /**
     * Database column: checklists_id
     * Type: int8(19) NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: is_mandatory
     * Type: bool(1)
     * Default: false
     */
    private Boolean isMandatory;

    /**
     * Default constructor
     */
    public Relations() {
        // Initialize with default values where applicable
        this.isMandatory = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param orderTree order_tree
     * @param externalId external_id
     * @param displayName display_name
     * @param validations validations
     * @param variables variables
     * @param cardinality cardinality
     * @param objectTypeId object_type_id
     * @param collection collection
     * @param urlPath url_path
     * @param checklistsId checklists_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param isMandatory is_mandatory
     */
    public Relations(Long id, Integer orderTree, String externalId, String displayName, String validations, String variables, String cardinality, String objectTypeId, String collection, String urlPath, Long checklistsId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Boolean isMandatory) {
        this.id = id;
        this.orderTree = orderTree;
        this.externalId = externalId;
        this.displayName = displayName;
        this.validations = validations;
        this.variables = variables;
        this.cardinality = cardinality;
        this.objectTypeId = objectTypeId;
        this.collection = collection;
        this.urlPath = urlPath;
        this.checklistsId = checklistsId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.isMandatory = isMandatory;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of external_id
     * @return String value of external_id
     */
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Sets the value of external_id
     * @param externalId new value for external_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setExternalId(String externalId) {
        if (externalId == null) {
            throw new IllegalArgumentException("external_id cannot be null (NOT NULL constraint)");
        }
        this.externalId = externalId;
    }

    /**
     * Gets the value of display_name
     * @return String value of display_name
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Sets the value of display_name
     * @param displayName new value for display_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setDisplayName(String displayName) {
        if (displayName == null) {
            throw new IllegalArgumentException("display_name cannot be null (NOT NULL constraint)");
        }
        this.displayName = displayName;
    }

    /**
     * Gets the value of validations
     * @return String value of validations
     */
    public String getValidations() {
        return this.validations;
    }

    /**
     * Sets the value of validations
     * @param validations new value for validations
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setValidations(String validations) {
        if (validations == null) {
            throw new IllegalArgumentException("validations cannot be null (NOT NULL constraint)");
        }
        this.validations = validations;
    }

    /**
     * Gets the value of variables
     * @return String value of variables
     */
    public String getVariables() {
        return this.variables;
    }

    /**
     * Sets the value of variables
     * @param variables new value for variables
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setVariables(String variables) {
        if (variables == null) {
            throw new IllegalArgumentException("variables cannot be null (NOT NULL constraint)");
        }
        this.variables = variables;
    }

    /**
     * Gets the value of cardinality
     * @return String value of cardinality
     */
    public String getCardinality() {
        return this.cardinality;
    }

    /**
     * Sets the value of cardinality
     * @param cardinality new value for cardinality
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCardinality(String cardinality) {
        if (cardinality == null) {
            throw new IllegalArgumentException("cardinality cannot be null (NOT NULL constraint)");
        }
        this.cardinality = cardinality;
    }

    /**
     * Gets the value of object_type_id
     * @return String value of object_type_id
     */
    public String getObjectTypeId() {
        return this.objectTypeId;
    }

    /**
     * Sets the value of object_type_id
     * @param objectTypeId new value for object_type_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setObjectTypeId(String objectTypeId) {
        if (objectTypeId == null) {
            throw new IllegalArgumentException("object_type_id cannot be null (NOT NULL constraint)");
        }
        this.objectTypeId = objectTypeId;
    }

    /**
     * Gets the value of collection
     * @return String value of collection
     */
    public String getCollection() {
        return this.collection;
    }

    /**
     * Sets the value of collection
     * @param collection new value for collection
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCollection(String collection) {
        if (collection == null) {
            throw new IllegalArgumentException("collection cannot be null (NOT NULL constraint)");
        }
        this.collection = collection;
    }

    /**
     * Gets the value of url_path
     * @return String value of url_path
     */
    public String getUrlPath() {
        return this.urlPath;
    }

    /**
     * Sets the value of url_path
     * @param urlPath new value for url_path
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setUrlPath(String urlPath) {
        if (urlPath == null) {
            throw new IllegalArgumentException("url_path cannot be null (NOT NULL constraint)");
        }
        this.urlPath = urlPath;
    }

    /**
     * Gets the value of checklists_id
     * @return Long value of checklists_id
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets the value of checklists_id
     * @param checklistsId new value for checklists_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null (NOT NULL constraint)");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of is_mandatory
     * @return Boolean value of is_mandatory
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets the value of is_mandatory
     * @param isMandatory new value for is_mandatory
     */
    public void setIsMandatory(Boolean isMandatory) {
        this.isMandatory = isMandatory;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.externalId == null) {
            violations.add("external_id cannot be null");
        }
        if (this.displayName == null) {
            violations.add("display_name cannot be null");
        }
        if (this.validations == null) {
            violations.add("validations cannot be null");
        }
        if (this.variables == null) {
            violations.add("variables cannot be null");
        }
        if (this.cardinality == null) {
            violations.add("cardinality cannot be null");
        }
        if (this.objectTypeId == null) {
            violations.add("object_type_id cannot be null");
        }
        if (this.collection == null) {
            violations.add("collection cannot be null");
        }
        if (this.urlPath == null) {
            violations.add("url_path cannot be null");
        }
        if (this.checklistsId == null) {
            violations.add("checklists_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Relations other = (Relations) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Relations{" +
                "id=" + id +
                ", orderTree=" + orderTree +
                ", externalId=" + externalId +
                ", displayName=" + displayName +
                ", validations=" + validations +
                ", variables=" + variables +
                ", cardinality=" + cardinality +
                ", objectTypeId=" + objectTypeId +
                ", collection=" + collection +
                ", urlPath=" + urlPath +
                ", checklistsId=" + checklistsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", isMandatory=" + isMandatory +
                '}';
    }
}
