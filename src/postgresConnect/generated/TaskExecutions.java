package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: task_executions
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: task_executions
 * - Primary Keys: id
 * 
 * Indexes:
 * - idxf43796c5066e43a9801a191d: jobs_id
 * - idx2e8386b34271485087cee3bf: tasks_id
 * 
 * Check Constraints:
 * - 2200_221850_7_not_null: tasks_id IS NOT NULL
 * - 2200_221850_4_not_null: state IS NOT NULL
 * - 2200_221850_19_not_null: type IS NOT NULL
 * - 2200_221850_21_not_null: continue_recurrence IS NOT NULL
 * - 2200_221850_12_not_null: modified_by IS NOT NULL
 * - 2200_221850_10_not_null: modified_at IS NOT NULL
 * - 2200_221850_11_not_null: created_by IS NOT NULL
 * - 2200_221850_8_not_null: jobs_id IS NOT NULL
 * - 2200_221850_9_not_null: created_at IS NOT NULL
 * - 2200_221850_1_not_null: id IS NOT NULL
 * - 2200_221850_20_not_null: order_tree IS NOT NULL
 * 
 * Foreign Keys:
 * - tasks_id → tasks.id
 * - jobs_id → jobs.id
 * - created_by → users.id
 * - modified_by → users.id
 * - started_by → users.id
 */
public class TaskExecutions implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: reason
     * Type: text(2147483647)
     */
    private String reason;

    /**
     * Database column: correction_reason
     * Type: text(2147483647)
     */
    private String correctionReason;

    /**
     * Database column: state
     * Type: varchar(50) NOT NULL
     */
    private String state;

    /**
     * Database column: started_at
     * Type: int8(19)
     */
    private Long startedAt;

    /**
     * Database column: ended_at
     * Type: int8(19)
     */
    private Long endedAt;

    /**
     * Database column: tasks_id
     * Type: int8(19) NOT NULL
     * Foreign Key → tasks.id
     */
    private Long tasksId;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: started_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long startedBy;

    /**
     * Database column: correction_enabled
     * Type: bool(1)
     * Default: false
     */
    private Boolean correctionEnabled;

    /**
     * Database column: corrected_by
     * Type: int8(19)
     */
    private Long correctedBy;

    /**
     * Database column: corrected_at
     * Type: int8(19)
     */
    private Long correctedAt;

    /**
     * Database column: ended_by
     * Type: int8(19)
     */
    private Long endedBy;

    /**
     * Database column: duration
     * Type: int8(19)
     */
    private Long duration;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: continue_recurrence
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean continueRecurrence;

    /**
     * Database column: recurring_premature_start_reason
     * Type: text(2147483647)
     */
    private String recurringPrematureStartReason;

    /**
     * Database column: recurring_overdue_completion_reason
     * Type: text(2147483647)
     */
    private String recurringOverdueCompletionReason;

    /**
     * Database column: recurring_overdue_start_reason
     * Type: text(2147483647)
     */
    private String recurringOverdueStartReason;

    /**
     * Database column: recurring_expected_started_at
     * Type: int8(19)
     */
    private Long recurringExpectedStartedAt;

    /**
     * Database column: recurring_expected_due_at
     * Type: int8(19)
     */
    private Long recurringExpectedDueAt;

    /**
     * Database column: is_scheduled
     * Type: bool(1)
     * Default: false
     */
    private Boolean isScheduled;

    /**
     * Database column: scheduling_expected_due_at
     * Type: int8(19)
     */
    private Long schedulingExpectedDueAt;

    /**
     * Database column: scheduling_expected_started_at
     * Type: int8(19)
     */
    private Long schedulingExpectedStartedAt;

    /**
     * Database column: schedule_overdue_completion_reason
     * Type: text(2147483647)
     */
    private String scheduleOverdueCompletionReason;

    /**
     * Database column: schedule_premature_start_reason
     * Type: text(2147483647)
     */
    private String schedulePrematureStartReason;

    /**
     * Default constructor
     */
    public TaskExecutions() {
        // Initialize with default values where applicable
        this.correctionEnabled = false; // Default value
        this.continueRecurrence = false; // Default value
        this.isScheduled = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param reason reason
     * @param correctionReason correction_reason
     * @param state state
     * @param startedAt started_at
     * @param endedAt ended_at
     * @param tasksId tasks_id
     * @param jobsId jobs_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param startedBy started_by
     * @param correctionEnabled correction_enabled
     * @param correctedBy corrected_by
     * @param correctedAt corrected_at
     * @param endedBy ended_by
     * @param duration duration
     * @param type type
     * @param orderTree order_tree
     * @param continueRecurrence continue_recurrence
     * @param recurringPrematureStartReason recurring_premature_start_reason
     * @param recurringOverdueCompletionReason recurring_overdue_completion_reason
     * @param recurringOverdueStartReason recurring_overdue_start_reason
     * @param recurringExpectedStartedAt recurring_expected_started_at
     * @param recurringExpectedDueAt recurring_expected_due_at
     * @param isScheduled is_scheduled
     * @param schedulingExpectedDueAt scheduling_expected_due_at
     * @param schedulingExpectedStartedAt scheduling_expected_started_at
     * @param scheduleOverdueCompletionReason schedule_overdue_completion_reason
     * @param schedulePrematureStartReason schedule_premature_start_reason
     */
    public TaskExecutions(Long id, String reason, String correctionReason, String state, Long startedAt, Long endedAt, Long tasksId, Long jobsId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Long startedBy, Boolean correctionEnabled, Long correctedBy, Long correctedAt, Long endedBy, Long duration, String type, Integer orderTree, Boolean continueRecurrence, String recurringPrematureStartReason, String recurringOverdueCompletionReason, String recurringOverdueStartReason, Long recurringExpectedStartedAt, Long recurringExpectedDueAt, Boolean isScheduled, Long schedulingExpectedDueAt, Long schedulingExpectedStartedAt, String scheduleOverdueCompletionReason, String schedulePrematureStartReason) {
        this.id = id;
        this.reason = reason;
        this.correctionReason = correctionReason;
        this.state = state;
        this.startedAt = startedAt;
        this.endedAt = endedAt;
        this.tasksId = tasksId;
        this.jobsId = jobsId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.startedBy = startedBy;
        this.correctionEnabled = correctionEnabled;
        this.correctedBy = correctedBy;
        this.correctedAt = correctedAt;
        this.endedBy = endedBy;
        this.duration = duration;
        this.type = type;
        this.orderTree = orderTree;
        this.continueRecurrence = continueRecurrence;
        this.recurringPrematureStartReason = recurringPrematureStartReason;
        this.recurringOverdueCompletionReason = recurringOverdueCompletionReason;
        this.recurringOverdueStartReason = recurringOverdueStartReason;
        this.recurringExpectedStartedAt = recurringExpectedStartedAt;
        this.recurringExpectedDueAt = recurringExpectedDueAt;
        this.isScheduled = isScheduled;
        this.schedulingExpectedDueAt = schedulingExpectedDueAt;
        this.schedulingExpectedStartedAt = schedulingExpectedStartedAt;
        this.scheduleOverdueCompletionReason = scheduleOverdueCompletionReason;
        this.schedulePrematureStartReason = schedulePrematureStartReason;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of reason
     * @return String value of reason
     */
    public String getReason() {
        return this.reason;
    }

    /**
     * Sets the value of reason
     * @param reason new value for reason
     */
    public void setReason(String reason) {
        this.reason = reason;
    }

    /**
     * Gets the value of correction_reason
     * @return String value of correction_reason
     */
    public String getCorrectionReason() {
        return this.correctionReason;
    }

    /**
     * Sets the value of correction_reason
     * @param correctionReason new value for correction_reason
     */
    public void setCorrectionReason(String correctionReason) {
        this.correctionReason = correctionReason;
    }

    /**
     * Gets the value of state
     * @return String value of state
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets the value of state
     * @param state new value for state
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null (NOT NULL constraint)");
        }
        this.state = state;
    }

    /**
     * Gets the value of started_at
     * @return Long value of started_at
     */
    public Long getStartedAt() {
        return this.startedAt;
    }

    /**
     * Sets the value of started_at
     * @param startedAt new value for started_at
     */
    public void setStartedAt(Long startedAt) {
        this.startedAt = startedAt;
    }

    /**
     * Gets the value of ended_at
     * @return Long value of ended_at
     */
    public Long getEndedAt() {
        return this.endedAt;
    }

    /**
     * Sets the value of ended_at
     * @param endedAt new value for ended_at
     */
    public void setEndedAt(Long endedAt) {
        this.endedAt = endedAt;
    }

    /**
     * Gets the value of tasks_id
     * @return Long value of tasks_id
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets the value of tasks_id
     * @param tasksId new value for tasks_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTasksId(Long tasksId) {
        if (tasksId == null) {
            throw new IllegalArgumentException("tasks_id cannot be null (NOT NULL constraint)");
        }
        this.tasksId = tasksId;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of started_by
     * @return Long value of started_by
     */
    public Long getStartedBy() {
        return this.startedBy;
    }

    /**
     * Sets the value of started_by
     * @param startedBy new value for started_by
     */
    public void setStartedBy(Long startedBy) {
        this.startedBy = startedBy;
    }

    /**
     * Gets the value of correction_enabled
     * @return Boolean value of correction_enabled
     */
    public Boolean getCorrectionEnabled() {
        return this.correctionEnabled;
    }

    /**
     * Sets the value of correction_enabled
     * @param correctionEnabled new value for correction_enabled
     */
    public void setCorrectionEnabled(Boolean correctionEnabled) {
        this.correctionEnabled = correctionEnabled;
    }

    /**
     * Gets the value of corrected_by
     * @return Long value of corrected_by
     */
    public Long getCorrectedBy() {
        return this.correctedBy;
    }

    /**
     * Sets the value of corrected_by
     * @param correctedBy new value for corrected_by
     */
    public void setCorrectedBy(Long correctedBy) {
        this.correctedBy = correctedBy;
    }

    /**
     * Gets the value of corrected_at
     * @return Long value of corrected_at
     */
    public Long getCorrectedAt() {
        return this.correctedAt;
    }

    /**
     * Sets the value of corrected_at
     * @param correctedAt new value for corrected_at
     */
    public void setCorrectedAt(Long correctedAt) {
        this.correctedAt = correctedAt;
    }

    /**
     * Gets the value of ended_by
     * @return Long value of ended_by
     */
    public Long getEndedBy() {
        return this.endedBy;
    }

    /**
     * Sets the value of ended_by
     * @param endedBy new value for ended_by
     */
    public void setEndedBy(Long endedBy) {
        this.endedBy = endedBy;
    }

    /**
     * Gets the value of duration
     * @return Long value of duration
     */
    public Long getDuration() {
        return this.duration;
    }

    /**
     * Sets the value of duration
     * @param duration new value for duration
     */
    public void setDuration(Long duration) {
        this.duration = duration;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of continue_recurrence
     * @return Boolean value of continue_recurrence
     */
    public Boolean getContinueRecurrence() {
        return this.continueRecurrence;
    }

    /**
     * Sets the value of continue_recurrence
     * @param continueRecurrence new value for continue_recurrence
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setContinueRecurrence(Boolean continueRecurrence) {
        this.continueRecurrence = continueRecurrence;
    }

    /**
     * Gets the value of recurring_premature_start_reason
     * @return String value of recurring_premature_start_reason
     */
    public String getRecurringPrematureStartReason() {
        return this.recurringPrematureStartReason;
    }

    /**
     * Sets the value of recurring_premature_start_reason
     * @param recurringPrematureStartReason new value for recurring_premature_start_reason
     */
    public void setRecurringPrematureStartReason(String recurringPrematureStartReason) {
        this.recurringPrematureStartReason = recurringPrematureStartReason;
    }

    /**
     * Gets the value of recurring_overdue_completion_reason
     * @return String value of recurring_overdue_completion_reason
     */
    public String getRecurringOverdueCompletionReason() {
        return this.recurringOverdueCompletionReason;
    }

    /**
     * Sets the value of recurring_overdue_completion_reason
     * @param recurringOverdueCompletionReason new value for recurring_overdue_completion_reason
     */
    public void setRecurringOverdueCompletionReason(String recurringOverdueCompletionReason) {
        this.recurringOverdueCompletionReason = recurringOverdueCompletionReason;
    }

    /**
     * Gets the value of recurring_overdue_start_reason
     * @return String value of recurring_overdue_start_reason
     */
    public String getRecurringOverdueStartReason() {
        return this.recurringOverdueStartReason;
    }

    /**
     * Sets the value of recurring_overdue_start_reason
     * @param recurringOverdueStartReason new value for recurring_overdue_start_reason
     */
    public void setRecurringOverdueStartReason(String recurringOverdueStartReason) {
        this.recurringOverdueStartReason = recurringOverdueStartReason;
    }

    /**
     * Gets the value of recurring_expected_started_at
     * @return Long value of recurring_expected_started_at
     */
    public Long getRecurringExpectedStartedAt() {
        return this.recurringExpectedStartedAt;
    }

    /**
     * Sets the value of recurring_expected_started_at
     * @param recurringExpectedStartedAt new value for recurring_expected_started_at
     */
    public void setRecurringExpectedStartedAt(Long recurringExpectedStartedAt) {
        this.recurringExpectedStartedAt = recurringExpectedStartedAt;
    }

    /**
     * Gets the value of recurring_expected_due_at
     * @return Long value of recurring_expected_due_at
     */
    public Long getRecurringExpectedDueAt() {
        return this.recurringExpectedDueAt;
    }

    /**
     * Sets the value of recurring_expected_due_at
     * @param recurringExpectedDueAt new value for recurring_expected_due_at
     */
    public void setRecurringExpectedDueAt(Long recurringExpectedDueAt) {
        this.recurringExpectedDueAt = recurringExpectedDueAt;
    }

    /**
     * Gets the value of is_scheduled
     * @return Boolean value of is_scheduled
     */
    public Boolean getIsScheduled() {
        return this.isScheduled;
    }

    /**
     * Sets the value of is_scheduled
     * @param isScheduled new value for is_scheduled
     */
    public void setIsScheduled(Boolean isScheduled) {
        this.isScheduled = isScheduled;
    }

    /**
     * Gets the value of scheduling_expected_due_at
     * @return Long value of scheduling_expected_due_at
     */
    public Long getSchedulingExpectedDueAt() {
        return this.schedulingExpectedDueAt;
    }

    /**
     * Sets the value of scheduling_expected_due_at
     * @param schedulingExpectedDueAt new value for scheduling_expected_due_at
     */
    public void setSchedulingExpectedDueAt(Long schedulingExpectedDueAt) {
        this.schedulingExpectedDueAt = schedulingExpectedDueAt;
    }

    /**
     * Gets the value of scheduling_expected_started_at
     * @return Long value of scheduling_expected_started_at
     */
    public Long getSchedulingExpectedStartedAt() {
        return this.schedulingExpectedStartedAt;
    }

    /**
     * Sets the value of scheduling_expected_started_at
     * @param schedulingExpectedStartedAt new value for scheduling_expected_started_at
     */
    public void setSchedulingExpectedStartedAt(Long schedulingExpectedStartedAt) {
        this.schedulingExpectedStartedAt = schedulingExpectedStartedAt;
    }

    /**
     * Gets the value of schedule_overdue_completion_reason
     * @return String value of schedule_overdue_completion_reason
     */
    public String getScheduleOverdueCompletionReason() {
        return this.scheduleOverdueCompletionReason;
    }

    /**
     * Sets the value of schedule_overdue_completion_reason
     * @param scheduleOverdueCompletionReason new value for schedule_overdue_completion_reason
     */
    public void setScheduleOverdueCompletionReason(String scheduleOverdueCompletionReason) {
        this.scheduleOverdueCompletionReason = scheduleOverdueCompletionReason;
    }

    /**
     * Gets the value of schedule_premature_start_reason
     * @return String value of schedule_premature_start_reason
     */
    public String getSchedulePrematureStartReason() {
        return this.schedulePrematureStartReason;
    }

    /**
     * Sets the value of schedule_premature_start_reason
     * @param schedulePrematureStartReason new value for schedule_premature_start_reason
     */
    public void setSchedulePrematureStartReason(String schedulePrematureStartReason) {
        this.schedulePrematureStartReason = schedulePrematureStartReason;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.state == null) {
            violations.add("state cannot be null");
        }
        if (this.tasksId == null) {
            violations.add("tasks_id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.continueRecurrence == null) {
            violations.add("continue_recurrence cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskExecutions other = (TaskExecutions) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "TaskExecutions{" +
                "id=" + id +
                ", reason=" + reason +
                ", correctionReason=" + correctionReason +
                ", state=" + state +
                ", startedAt=" + startedAt +
                ", endedAt=" + endedAt +
                ", tasksId=" + tasksId +
                ", jobsId=" + jobsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", startedBy=" + startedBy +
                ", correctionEnabled=" + correctionEnabled +
                ", correctedBy=" + correctedBy +
                ", correctedAt=" + correctedAt +
                ", endedBy=" + endedBy +
                ", duration=" + duration +
                ", type=" + type +
                ", orderTree=" + orderTree +
                ", continueRecurrence=" + continueRecurrence +
                ", recurringPrematureStartReason=" + recurringPrematureStartReason +
                ", recurringOverdueCompletionReason=" + recurringOverdueCompletionReason +
                ", recurringOverdueStartReason=" + recurringOverdueStartReason +
                ", recurringExpectedStartedAt=" + recurringExpectedStartedAt +
                ", recurringExpectedDueAt=" + recurringExpectedDueAt +
                ", isScheduled=" + isScheduled +
                ", schedulingExpectedDueAt=" + schedulingExpectedDueAt +
                ", schedulingExpectedStartedAt=" + schedulingExpectedStartedAt +
                ", scheduleOverdueCompletionReason=" + scheduleOverdueCompletionReason +
                ", schedulePrematureStartReason=" + schedulePrematureStartReason +
                '}';
    }
}
