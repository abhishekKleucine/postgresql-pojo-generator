package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: schedulers
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: schedulers
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221806_8_not_null: use_cases_id IS NOT NULL
 * - 2200_221806_5_not_null: code IS NOT NULL
 * - 2200_221806_11_not_null: expected_start_date IS NOT NULL
 * - 2200_221806_2_not_null: name IS NOT NULL
 * - 2200_221806_7_not_null: versions_id IS NOT NULL
 * - 2200_221806_23_not_null: modified_by IS NOT NULL
 * - 2200_221806_10_not_null: checklists_name IS NOT NULL
 * - 2200_221806_16_not_null: data IS NOT NULL
 * - 2200_221806_6_not_null: facilities_id IS NOT NULL
 * - 2200_221806_20_not_null: created_at IS NOT NULL
 * - 2200_221806_22_not_null: created_by IS NOT NULL
 * - 2200_221806_4_not_null: state IS NOT NULL
 * - 2200_221806_9_not_null: checklists_id IS NOT NULL
 * - 2200_221806_1_not_null: id IS NOT NULL
 * - 2200_221806_21_not_null: modified_at IS NOT NULL
 * 
 * Foreign Keys:
 * - facilities_id → facilities.id
 * - versions_id → versions.id
 * - use_cases_id → use_cases.id
 * - checklists_id → checklists.id
 */
public class Schedulers implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: varchar(255) NOT NULL
     */
    private String name;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: state
     * Type: varchar(50) NOT NULL
     */
    private String state;

    /**
     * Database column: code
     * Type: varchar(20) NOT NULL
     */
    private String code;

    /**
     * Database column: facilities_id
     * Type: int8(19) NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: versions_id
     * Type: int8(19) NOT NULL
     * Foreign Key → versions.id
     */
    private Long versionsId;

    /**
     * Database column: use_cases_id
     * Type: int8(19) NOT NULL
     * Foreign Key → use_cases.id
     */
    private Long useCasesId;

    /**
     * Database column: checklists_id
     * Type: int8(19) NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: checklists_name
     * Type: varchar(255) NOT NULL
     */
    private String checklistsName;

    /**
     * Database column: expected_start_date
     * Type: int8(19) NOT NULL
     */
    private Long expectedStartDate;

    /**
     * Database column: is_repeated
     * Type: bool(1)
     * Default: false
     */
    private Boolean isRepeated;

    /**
     * Database column: recurrence_rule
     * Type: text(2147483647)
     */
    private String recurrenceRule;

    /**
     * Database column: due_date_interval
     * Type: int4(10)
     */
    private Integer dueDateInterval;

    /**
     * Database column: due_date_duration
     * Type: jsonb(2147483647)
     */
    private String dueDateDuration;

    /**
     * Database column: data
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String data;

    /**
     * Database column: is_custom_recurrence
     * Type: bool(1)
     * Default: false
     */
    private Boolean isCustomRecurrence;

    /**
     * Database column: enabled
     * Type: bool(1)
     * Default: true
     */
    private Boolean enabled;

    /**
     * Database column: archived
     * Type: bool(1)
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: deprecated_at
     * Type: int8(19)
     */
    private Long deprecatedAt;

    /**
     * Default constructor
     */
    public Schedulers() {
        // Initialize with default values where applicable
        this.isRepeated = false; // Default value
        this.isCustomRecurrence = false; // Default value
        this.enabled = true; // Default value
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param name name
     * @param description description
     * @param state state
     * @param code code
     * @param facilitiesId facilities_id
     * @param versionsId versions_id
     * @param useCasesId use_cases_id
     * @param checklistsId checklists_id
     * @param checklistsName checklists_name
     * @param expectedStartDate expected_start_date
     * @param isRepeated is_repeated
     * @param recurrenceRule recurrence_rule
     * @param dueDateInterval due_date_interval
     * @param dueDateDuration due_date_duration
     * @param data data
     * @param isCustomRecurrence is_custom_recurrence
     * @param enabled enabled
     * @param archived archived
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param deprecatedAt deprecated_at
     */
    public Schedulers(Long id, String name, String description, String state, String code, Long facilitiesId, Long versionsId, Long useCasesId, Long checklistsId, String checklistsName, Long expectedStartDate, Boolean isRepeated, String recurrenceRule, Integer dueDateInterval, String dueDateDuration, String data, Boolean isCustomRecurrence, Boolean enabled, Boolean archived, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Long deprecatedAt) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.state = state;
        this.code = code;
        this.facilitiesId = facilitiesId;
        this.versionsId = versionsId;
        this.useCasesId = useCasesId;
        this.checklistsId = checklistsId;
        this.checklistsName = checklistsName;
        this.expectedStartDate = expectedStartDate;
        this.isRepeated = isRepeated;
        this.recurrenceRule = recurrenceRule;
        this.dueDateInterval = dueDateInterval;
        this.dueDateDuration = dueDateDuration;
        this.data = data;
        this.isCustomRecurrence = isCustomRecurrence;
        this.enabled = enabled;
        this.archived = archived;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.deprecatedAt = deprecatedAt;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null (NOT NULL constraint)");
        }
        this.name = name;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of state
     * @return String value of state
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets the value of state
     * @param state new value for state
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null (NOT NULL constraint)");
        }
        this.state = state;
    }

    /**
     * Gets the value of code
     * @return String value of code
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets the value of code
     * @param code new value for code
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("code cannot be null (NOT NULL constraint)");
        }
        this.code = code;
    }

    /**
     * Gets the value of facilities_id
     * @return Long value of facilities_id
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets the value of facilities_id
     * @param facilitiesId new value for facilities_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null (NOT NULL constraint)");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets the value of versions_id
     * @return Long value of versions_id
     */
    public Long getVersionsId() {
        return this.versionsId;
    }

    /**
     * Sets the value of versions_id
     * @param versionsId new value for versions_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setVersionsId(Long versionsId) {
        if (versionsId == null) {
            throw new IllegalArgumentException("versions_id cannot be null (NOT NULL constraint)");
        }
        this.versionsId = versionsId;
    }

    /**
     * Gets the value of use_cases_id
     * @return Long value of use_cases_id
     */
    public Long getUseCasesId() {
        return this.useCasesId;
    }

    /**
     * Sets the value of use_cases_id
     * @param useCasesId new value for use_cases_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setUseCasesId(Long useCasesId) {
        if (useCasesId == null) {
            throw new IllegalArgumentException("use_cases_id cannot be null (NOT NULL constraint)");
        }
        this.useCasesId = useCasesId;
    }

    /**
     * Gets the value of checklists_id
     * @return Long value of checklists_id
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets the value of checklists_id
     * @param checklistsId new value for checklists_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null (NOT NULL constraint)");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets the value of checklists_name
     * @return String value of checklists_name
     */
    public String getChecklistsName() {
        return this.checklistsName;
    }

    /**
     * Sets the value of checklists_name
     * @param checklistsName new value for checklists_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setChecklistsName(String checklistsName) {
        if (checklistsName == null) {
            throw new IllegalArgumentException("checklists_name cannot be null (NOT NULL constraint)");
        }
        this.checklistsName = checklistsName;
    }

    /**
     * Gets the value of expected_start_date
     * @return Long value of expected_start_date
     */
    public Long getExpectedStartDate() {
        return this.expectedStartDate;
    }

    /**
     * Sets the value of expected_start_date
     * @param expectedStartDate new value for expected_start_date
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setExpectedStartDate(Long expectedStartDate) {
        if (expectedStartDate == null) {
            throw new IllegalArgumentException("expected_start_date cannot be null (NOT NULL constraint)");
        }
        this.expectedStartDate = expectedStartDate;
    }

    /**
     * Gets the value of is_repeated
     * @return Boolean value of is_repeated
     */
    public Boolean getIsRepeated() {
        return this.isRepeated;
    }

    /**
     * Sets the value of is_repeated
     * @param isRepeated new value for is_repeated
     */
    public void setIsRepeated(Boolean isRepeated) {
        this.isRepeated = isRepeated;
    }

    /**
     * Gets the value of recurrence_rule
     * @return String value of recurrence_rule
     */
    public String getRecurrenceRule() {
        return this.recurrenceRule;
    }

    /**
     * Sets the value of recurrence_rule
     * @param recurrenceRule new value for recurrence_rule
     */
    public void setRecurrenceRule(String recurrenceRule) {
        this.recurrenceRule = recurrenceRule;
    }

    /**
     * Gets the value of due_date_interval
     * @return Integer value of due_date_interval
     */
    public Integer getDueDateInterval() {
        return this.dueDateInterval;
    }

    /**
     * Sets the value of due_date_interval
     * @param dueDateInterval new value for due_date_interval
     */
    public void setDueDateInterval(Integer dueDateInterval) {
        this.dueDateInterval = dueDateInterval;
    }

    /**
     * Gets the value of due_date_duration
     * @return String value of due_date_duration
     */
    public String getDueDateDuration() {
        return this.dueDateDuration;
    }

    /**
     * Sets the value of due_date_duration
     * @param dueDateDuration new value for due_date_duration
     */
    public void setDueDateDuration(String dueDateDuration) {
        this.dueDateDuration = dueDateDuration;
    }

    /**
     * Gets the value of data
     * @return String value of data
     */
    public String getData() {
        return this.data;
    }

    /**
     * Sets the value of data
     * @param data new value for data
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setData(String data) {
        if (data == null) {
            throw new IllegalArgumentException("data cannot be null (NOT NULL constraint)");
        }
        this.data = data;
    }

    /**
     * Gets the value of is_custom_recurrence
     * @return Boolean value of is_custom_recurrence
     */
    public Boolean getIsCustomRecurrence() {
        return this.isCustomRecurrence;
    }

    /**
     * Sets the value of is_custom_recurrence
     * @param isCustomRecurrence new value for is_custom_recurrence
     */
    public void setIsCustomRecurrence(Boolean isCustomRecurrence) {
        this.isCustomRecurrence = isCustomRecurrence;
    }

    /**
     * Gets the value of enabled
     * @return Boolean value of enabled
     */
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Sets the value of enabled
     * @param enabled new value for enabled
     */
    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of deprecated_at
     * @return Long value of deprecated_at
     */
    public Long getDeprecatedAt() {
        return this.deprecatedAt;
    }

    /**
     * Sets the value of deprecated_at
     * @param deprecatedAt new value for deprecated_at
     */
    public void setDeprecatedAt(Long deprecatedAt) {
        this.deprecatedAt = deprecatedAt;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.name == null) {
            violations.add("name cannot be null");
        }
        if (this.state == null) {
            violations.add("state cannot be null");
        }
        if (this.code == null) {
            violations.add("code cannot be null");
        }
        if (this.facilitiesId == null) {
            violations.add("facilities_id cannot be null");
        }
        if (this.versionsId == null) {
            violations.add("versions_id cannot be null");
        }
        if (this.useCasesId == null) {
            violations.add("use_cases_id cannot be null");
        }
        if (this.checklistsId == null) {
            violations.add("checklists_id cannot be null");
        }
        if (this.checklistsName == null) {
            violations.add("checklists_name cannot be null");
        }
        if (this.expectedStartDate == null) {
            violations.add("expected_start_date cannot be null");
        }
        if (this.data == null) {
            violations.add("data cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Schedulers other = (Schedulers) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Schedulers{" +
                "id=" + id +
                ", name=" + name +
                ", description=" + description +
                ", state=" + state +
                ", code=" + code +
                ", facilitiesId=" + facilitiesId +
                ", versionsId=" + versionsId +
                ", useCasesId=" + useCasesId +
                ", checklistsId=" + checklistsId +
                ", checklistsName=" + checklistsName +
                ", expectedStartDate=" + expectedStartDate +
                ", isRepeated=" + isRepeated +
                ", recurrenceRule=" + recurrenceRule +
                ", dueDateInterval=" + dueDateInterval +
                ", dueDateDuration=" + dueDateDuration +
                ", data=" + data +
                ", isCustomRecurrence=" + isCustomRecurrence +
                ", enabled=" + enabled +
                ", archived=" + archived +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", deprecatedAt=" + deprecatedAt +
                '}';
    }
}
