package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: temp_parameter_values
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: temp_parameter_values
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx21cc0138b45f4fb283a22ce8: task_executions_id
 * 
 * Check Constraints:
 * - 2200_221905_8_not_null: created_at IS NOT NULL
 * - 2200_221905_6_not_null: jobs_id IS NOT NULL
 * - 2200_221905_10_not_null: created_by IS NOT NULL
 * - 2200_221905_1_not_null: id IS NOT NULL
 * - 2200_221905_7_not_null: parameters_id IS NOT NULL
 * 
 * Foreign Keys:
 * - jobs_id → jobs.id
 * - parameters_id → parameters.id
 * - created_by → users.id
 * - modified_by → users.id
 * - parameter_value_approval_id → parameter_value_approvals.id
 * - task_executions_id → task_executions.id
 */
public class TempParameterValues implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: value
     * Type: text(2147483647)
     */
    private String value;

    /**
     * Database column: reason
     * Type: text(2147483647)
     */
    private String reason;

    /**
     * Database column: state
     * Type: varchar(50)
     */
    private String state;

    /**
     * Database column: choices
     * Type: jsonb(2147483647)
     * Default: '{}'::jsonb
     */
    private String choices;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: parameters_id
     * Type: int8(19) NOT NULL
     * Foreign Key → parameters.id
     */
    private Long parametersId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19)
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: parameter_value_approval_id
     * Type: int8(19)
     * Foreign Key → parameter_value_approvals.id
     */
    private Long parameterValueApprovalId;

    /**
     * Database column: hidden
     * Type: bool(1)
     * Default: false
     */
    private Boolean hidden;

    /**
     * Database column: impacted_by
     * Type: jsonb(2147483647)
     */
    private String impactedBy;

    /**
     * Database column: verified
     * Type: bool(1)
     * Default: false
     */
    private Boolean verified;

    /**
     * Database column: task_executions_id
     * Type: int8(19)
     * Foreign Key → task_executions.id
     */
    private Long taskExecutionsId;

    /**
     * Database column: has_variations
     * Type: bool(1)
     * Default: false
     */
    private Boolean hasVariations;

    /**
     * Database column: client_epoch
     * Type: int8(19)
     */
    private Long clientEpoch;

    /**
     * Database column: version
     * Type: int8(19)
     * Default: 0
     */
    private Long version;

    /**
     * Default constructor
     */
    public TempParameterValues() {
        // Initialize with default values where applicable
        this.hidden = false; // Default value
        this.verified = false; // Default value
        this.hasVariations = false; // Default value
        this.version = 0L; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param value value
     * @param reason reason
     * @param state state
     * @param choices choices
     * @param jobsId jobs_id
     * @param parametersId parameters_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param parameterValueApprovalId parameter_value_approval_id
     * @param hidden hidden
     * @param impactedBy impacted_by
     * @param verified verified
     * @param taskExecutionsId task_executions_id
     * @param hasVariations has_variations
     * @param clientEpoch client_epoch
     * @param version version
     */
    public TempParameterValues(Long id, String value, String reason, String state, String choices, Long jobsId, Long parametersId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Long parameterValueApprovalId, Boolean hidden, String impactedBy, Boolean verified, Long taskExecutionsId, Boolean hasVariations, Long clientEpoch, Long version) {
        this.id = id;
        this.value = value;
        this.reason = reason;
        this.state = state;
        this.choices = choices;
        this.jobsId = jobsId;
        this.parametersId = parametersId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.parameterValueApprovalId = parameterValueApprovalId;
        this.hidden = hidden;
        this.impactedBy = impactedBy;
        this.verified = verified;
        this.taskExecutionsId = taskExecutionsId;
        this.hasVariations = hasVariations;
        this.clientEpoch = clientEpoch;
        this.version = version;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of value
     * @return String value of value
     */
    public String getValue() {
        return this.value;
    }

    /**
     * Sets the value of value
     * @param value new value for value
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Gets the value of reason
     * @return String value of reason
     */
    public String getReason() {
        return this.reason;
    }

    /**
     * Sets the value of reason
     * @param reason new value for reason
     */
    public void setReason(String reason) {
        this.reason = reason;
    }

    /**
     * Gets the value of state
     * @return String value of state
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets the value of state
     * @param state new value for state
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Gets the value of choices
     * @return String value of choices
     */
    public String getChoices() {
        return this.choices;
    }

    /**
     * Sets the value of choices
     * @param choices new value for choices
     */
    public void setChoices(String choices) {
        this.choices = choices;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of parameters_id
     * @return Long value of parameters_id
     */
    public Long getParametersId() {
        return this.parametersId;
    }

    /**
     * Sets the value of parameters_id
     * @param parametersId new value for parameters_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setParametersId(Long parametersId) {
        if (parametersId == null) {
            throw new IllegalArgumentException("parameters_id cannot be null (NOT NULL constraint)");
        }
        this.parametersId = parametersId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     */
    public void setModifiedAt(Long modifiedAt) {
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of parameter_value_approval_id
     * @return Long value of parameter_value_approval_id
     */
    public Long getParameterValueApprovalId() {
        return this.parameterValueApprovalId;
    }

    /**
     * Sets the value of parameter_value_approval_id
     * @param parameterValueApprovalId new value for parameter_value_approval_id
     */
    public void setParameterValueApprovalId(Long parameterValueApprovalId) {
        this.parameterValueApprovalId = parameterValueApprovalId;
    }

    /**
     * Gets the value of hidden
     * @return Boolean value of hidden
     */
    public Boolean getHidden() {
        return this.hidden;
    }

    /**
     * Sets the value of hidden
     * @param hidden new value for hidden
     */
    public void setHidden(Boolean hidden) {
        this.hidden = hidden;
    }

    /**
     * Gets the value of impacted_by
     * @return String value of impacted_by
     */
    public String getImpactedBy() {
        return this.impactedBy;
    }

    /**
     * Sets the value of impacted_by
     * @param impactedBy new value for impacted_by
     */
    public void setImpactedBy(String impactedBy) {
        this.impactedBy = impactedBy;
    }

    /**
     * Gets the value of verified
     * @return Boolean value of verified
     */
    public Boolean getVerified() {
        return this.verified;
    }

    /**
     * Sets the value of verified
     * @param verified new value for verified
     */
    public void setVerified(Boolean verified) {
        this.verified = verified;
    }

    /**
     * Gets the value of task_executions_id
     * @return Long value of task_executions_id
     */
    public Long getTaskExecutionsId() {
        return this.taskExecutionsId;
    }

    /**
     * Sets the value of task_executions_id
     * @param taskExecutionsId new value for task_executions_id
     */
    public void setTaskExecutionsId(Long taskExecutionsId) {
        this.taskExecutionsId = taskExecutionsId;
    }

    /**
     * Gets the value of has_variations
     * @return Boolean value of has_variations
     */
    public Boolean getHasVariations() {
        return this.hasVariations;
    }

    /**
     * Sets the value of has_variations
     * @param hasVariations new value for has_variations
     */
    public void setHasVariations(Boolean hasVariations) {
        this.hasVariations = hasVariations;
    }

    /**
     * Gets the value of client_epoch
     * @return Long value of client_epoch
     */
    public Long getClientEpoch() {
        return this.clientEpoch;
    }

    /**
     * Sets the value of client_epoch
     * @param clientEpoch new value for client_epoch
     */
    public void setClientEpoch(Long clientEpoch) {
        this.clientEpoch = clientEpoch;
    }

    /**
     * Gets the value of version
     * @return Long value of version
     */
    public Long getVersion() {
        return this.version;
    }

    /**
     * Sets the value of version
     * @param version new value for version
     */
    public void setVersion(Long version) {
        this.version = version;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.parametersId == null) {
            violations.add("parameters_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TempParameterValues other = (TempParameterValues) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "TempParameterValues{" +
                "id=" + id +
                ", value=" + value +
                ", reason=" + reason +
                ", state=" + state +
                ", choices=" + choices +
                ", jobsId=" + jobsId +
                ", parametersId=" + parametersId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", parameterValueApprovalId=" + parameterValueApprovalId +
                ", hidden=" + hidden +
                ", impactedBy=" + impactedBy +
                ", verified=" + verified +
                ", taskExecutionsId=" + taskExecutionsId +
                ", hasVariations=" + hasVariations +
                ", clientEpoch=" + clientEpoch +
                ", version=" + version +
                '}';
    }
}
