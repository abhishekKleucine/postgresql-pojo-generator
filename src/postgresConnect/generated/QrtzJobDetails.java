package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: qrtz_job_details
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: qrtz_job_details
 * - Primary Keys: sched_name, job_name, job_group
 * 
 * Indexes:
 * - idx_qrtz_j_req_recovery: sched_name, requests_recovery
 * - idx_qrtz_j_grp: sched_name, job_group
 * 
 * Check Constraints:
 * - 2200_221745_1_not_null: sched_name IS NOT NULL
 * - 2200_221745_6_not_null: is_durable IS NOT NULL
 * - 2200_221745_3_not_null: job_group IS NOT NULL
 * - 2200_221745_7_not_null: is_nonconcurrent IS NOT NULL
 * - 2200_221745_9_not_null: requests_recovery IS NOT NULL
 * - 2200_221745_2_not_null: job_name IS NOT NULL
 * - 2200_221745_5_not_null: job_class_name IS NOT NULL
 * - 2200_221745_8_not_null: is_update_data IS NOT NULL
 */
public class QrtzJobDetails implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     */
    private String schedName;

    /**
     * Database column: job_name
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String jobName;

    /**
     * Database column: job_group
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String jobGroup;

    /**
     * Database column: description
     * Type: varchar(250)
     */
    private String description;

    /**
     * Database column: job_class_name
     * Type: varchar(250) NOT NULL
     */
    private String jobClassName;

    /**
     * Database column: is_durable
     * Type: bool(1) NOT NULL
     */
    private Boolean isDurable;

    /**
     * Database column: is_nonconcurrent
     * Type: bool(1) NOT NULL
     */
    private Boolean isNonconcurrent;

    /**
     * Database column: is_update_data
     * Type: bool(1) NOT NULL
     */
    private Boolean isUpdateData;

    /**
     * Database column: requests_recovery
     * Type: bool(1) NOT NULL
     */
    private Boolean requestsRecovery;

    /**
     * Database column: job_data
     * Type: bytea(2147483647)
     */
    private String jobData;

    /**
     * Default constructor
     */
    public QrtzJobDetails() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param schedName sched_name
     * @param jobName job_name
     * @param jobGroup job_group
     * @param description description
     * @param jobClassName job_class_name
     * @param isDurable is_durable
     * @param isNonconcurrent is_nonconcurrent
     * @param isUpdateData is_update_data
     * @param requestsRecovery requests_recovery
     * @param jobData job_data
     */
    public QrtzJobDetails(String schedName, String jobName, String jobGroup, String description, String jobClassName, Boolean isDurable, Boolean isNonconcurrent, Boolean isUpdateData, Boolean requestsRecovery, String jobData) {
        this.schedName = schedName;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
        this.description = description;
        this.jobClassName = jobClassName;
        this.isDurable = isDurable;
        this.isNonconcurrent = isNonconcurrent;
        this.isUpdateData = isUpdateData;
        this.requestsRecovery = requestsRecovery;
        this.jobData = jobData;
    }

    /**
     * Gets the value of sched_name
     * @return String value of sched_name
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets the value of sched_name
     * @param schedName new value for sched_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null (NOT NULL constraint)");
        }
        this.schedName = schedName;
    }

    /**
     * Gets the value of job_name
     * @return String value of job_name
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Sets the value of job_name
     * @param jobName new value for job_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobName(String jobName) {
        if (jobName == null) {
            throw new IllegalArgumentException("job_name cannot be null (NOT NULL constraint)");
        }
        this.jobName = jobName;
    }

    /**
     * Gets the value of job_group
     * @return String value of job_group
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Sets the value of job_group
     * @param jobGroup new value for job_group
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobGroup(String jobGroup) {
        if (jobGroup == null) {
            throw new IllegalArgumentException("job_group cannot be null (NOT NULL constraint)");
        }
        this.jobGroup = jobGroup;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of job_class_name
     * @return String value of job_class_name
     */
    public String getJobClassName() {
        return this.jobClassName;
    }

    /**
     * Sets the value of job_class_name
     * @param jobClassName new value for job_class_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobClassName(String jobClassName) {
        if (jobClassName == null) {
            throw new IllegalArgumentException("job_class_name cannot be null (NOT NULL constraint)");
        }
        this.jobClassName = jobClassName;
    }

    /**
     * Gets the value of is_durable
     * @return Boolean value of is_durable
     */
    public Boolean getIsDurable() {
        return this.isDurable;
    }

    /**
     * Sets the value of is_durable
     * @param isDurable new value for is_durable
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsDurable(Boolean isDurable) {
        this.isDurable = isDurable;
    }

    /**
     * Gets the value of is_nonconcurrent
     * @return Boolean value of is_nonconcurrent
     */
    public Boolean getIsNonconcurrent() {
        return this.isNonconcurrent;
    }

    /**
     * Sets the value of is_nonconcurrent
     * @param isNonconcurrent new value for is_nonconcurrent
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsNonconcurrent(Boolean isNonconcurrent) {
        this.isNonconcurrent = isNonconcurrent;
    }

    /**
     * Gets the value of is_update_data
     * @return Boolean value of is_update_data
     */
    public Boolean getIsUpdateData() {
        return this.isUpdateData;
    }

    /**
     * Sets the value of is_update_data
     * @param isUpdateData new value for is_update_data
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsUpdateData(Boolean isUpdateData) {
        this.isUpdateData = isUpdateData;
    }

    /**
     * Gets the value of requests_recovery
     * @return Boolean value of requests_recovery
     */
    public Boolean getRequestsRecovery() {
        return this.requestsRecovery;
    }

    /**
     * Sets the value of requests_recovery
     * @param requestsRecovery new value for requests_recovery
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setRequestsRecovery(Boolean requestsRecovery) {
        this.requestsRecovery = requestsRecovery;
    }

    /**
     * Gets the value of job_data
     * @return String value of job_data
     */
    public String getJobData() {
        return this.jobData;
    }

    /**
     * Sets the value of job_data
     * @param jobData new value for job_data
     */
    public void setJobData(String jobData) {
        this.jobData = jobData;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.schedName == null) {
            violations.add("sched_name cannot be null");
        }
        if (this.jobName == null) {
            violations.add("job_name cannot be null");
        }
        if (this.jobGroup == null) {
            violations.add("job_group cannot be null");
        }
        if (this.jobClassName == null) {
            violations.add("job_class_name cannot be null");
        }
        if (this.isDurable == null) {
            violations.add("is_durable cannot be null");
        }
        if (this.isNonconcurrent == null) {
            violations.add("is_nonconcurrent cannot be null");
        }
        if (this.isUpdateData == null) {
            violations.add("is_update_data cannot be null");
        }
        if (this.requestsRecovery == null) {
            violations.add("requests_recovery cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzJobDetails other = (QrtzJobDetails) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.jobName, other.jobName) && Objects.equals(this.jobGroup, other.jobGroup);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.jobName, this.jobGroup);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "QrtzJobDetails{" +
                "schedName=" + schedName +
                ", jobName=" + jobName +
                ", jobGroup=" + jobGroup +
                ", description=" + description +
                ", jobClassName=" + jobClassName +
                ", isDurable=" + isDurable +
                ", isNonconcurrent=" + isNonconcurrent +
                ", isUpdateData=" + isUpdateData +
                ", requestsRecovery=" + requestsRecovery +
                ", jobData=" + jobData +
                '}';
    }
}
