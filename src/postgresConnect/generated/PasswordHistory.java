package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: password_history
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: password_history
 * - Primary Keys: id
 * 
 * Indexes:
 * - idxb9xt56fyg8luuosihexhda3ke: users_id
 * 
 * Check Constraints:
 * - 2200_221697_1_not_null: id IS NOT NULL
 * - 2200_221697_2_not_null: created_at IS NOT NULL
 * 
 * Foreign Keys:
 * - users_id → users.id
 */
public class PasswordHistory implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: password
     * Type: text(2147483647)
     */
    private String password;

    /**
     * Database column: users_id
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long usersId;

    /**
     * Default constructor
     */
    public PasswordHistory() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param createdAt created_at
     * @param password password
     * @param usersId users_id
     */
    public PasswordHistory(Long id, Long createdAt, String password, Long usersId) {
        this.id = id;
        this.createdAt = createdAt;
        this.password = password;
        this.usersId = usersId;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of password
     * @return String value of password
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Sets the value of password
     * @param password new value for password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Gets the value of users_id
     * @return Long value of users_id
     */
    public Long getUsersId() {
        return this.usersId;
    }

    /**
     * Sets the value of users_id
     * @param usersId new value for users_id
     */
    public void setUsersId(Long usersId) {
        this.usersId = usersId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        PasswordHistory other = (PasswordHistory) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "PasswordHistory{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", password=" + password +
                ", usersId=" + usersId +
                '}';
    }
}
