package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: r_stage_execution
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: r_stage_execution
 * 
 * Check Constraints:
 * - 2200_221774_7_not_null: tasks_in_progress IS NOT NULL
 * - 2200_221774_1_not_null: id IS NOT NULL
 * - 2200_221774_2_not_null: stages_id IS NOT NULL
 * - 2200_221774_6_not_null: completed_tasks IS NOT NULL
 * - 2200_221774_3_not_null: jobs_id IS NOT NULL
 * - 2200_221774_5_not_null: total_tasks IS NOT NULL
 */
public class RStageExecution implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     */
    private Long id;

    /**
     * Database column: stages_id
     * Type: int8(19) NOT NULL
     */
    private Long stagesId;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     */
    private Long jobsId;

    /**
     * Database column: stage_name
     * Type: varchar(255)
     */
    private String stageName;

    /**
     * Database column: total_tasks
     * Type: int4(10) NOT NULL
     */
    private Integer totalTasks;

    /**
     * Database column: completed_tasks
     * Type: int4(10) NOT NULL
     * Default: 0
     */
    private Integer completedTasks;

    /**
     * Database column: tasks_in_progress
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean tasksInProgress;

    /**
     * Default constructor
     */
    public RStageExecution() {
        // Initialize with default values where applicable
        this.completedTasks = 0; // Default value
        this.tasksInProgress = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param stagesId stages_id
     * @param jobsId jobs_id
     * @param stageName stage_name
     * @param totalTasks total_tasks
     * @param completedTasks completed_tasks
     * @param tasksInProgress tasks_in_progress
     */
    public RStageExecution(Long id, Long stagesId, Long jobsId, String stageName, Integer totalTasks, Integer completedTasks, Boolean tasksInProgress) {
        this.id = id;
        this.stagesId = stagesId;
        this.jobsId = jobsId;
        this.stageName = stageName;
        this.totalTasks = totalTasks;
        this.completedTasks = completedTasks;
        this.tasksInProgress = tasksInProgress;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of stages_id
     * @return Long value of stages_id
     */
    public Long getStagesId() {
        return this.stagesId;
    }

    /**
     * Sets the value of stages_id
     * @param stagesId new value for stages_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setStagesId(Long stagesId) {
        if (stagesId == null) {
            throw new IllegalArgumentException("stages_id cannot be null (NOT NULL constraint)");
        }
        this.stagesId = stagesId;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of stage_name
     * @return String value of stage_name
     */
    public String getStageName() {
        return this.stageName;
    }

    /**
     * Sets the value of stage_name
     * @param stageName new value for stage_name
     */
    public void setStageName(String stageName) {
        this.stageName = stageName;
    }

    /**
     * Gets the value of total_tasks
     * @return Integer value of total_tasks
     */
    public Integer getTotalTasks() {
        return this.totalTasks;
    }

    /**
     * Sets the value of total_tasks
     * @param totalTasks new value for total_tasks
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTotalTasks(Integer totalTasks) {
        if (totalTasks == null) {
            throw new IllegalArgumentException("total_tasks cannot be null (NOT NULL constraint)");
        }
        this.totalTasks = totalTasks;
    }

    /**
     * Gets the value of completed_tasks
     * @return Integer value of completed_tasks
     */
    public Integer getCompletedTasks() {
        return this.completedTasks;
    }

    /**
     * Sets the value of completed_tasks
     * @param completedTasks new value for completed_tasks
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCompletedTasks(Integer completedTasks) {
        if (completedTasks == null) {
            throw new IllegalArgumentException("completed_tasks cannot be null (NOT NULL constraint)");
        }
        this.completedTasks = completedTasks;
    }

    /**
     * Gets the value of tasks_in_progress
     * @return Boolean value of tasks_in_progress
     */
    public Boolean getTasksInProgress() {
        return this.tasksInProgress;
    }

    /**
     * Sets the value of tasks_in_progress
     * @param tasksInProgress new value for tasks_in_progress
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTasksInProgress(Boolean tasksInProgress) {
        this.tasksInProgress = tasksInProgress;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.stagesId == null) {
            violations.add("stages_id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.totalTasks == null) {
            violations.add("total_tasks cannot be null");
        }
        if (this.completedTasks == null) {
            violations.add("completed_tasks cannot be null");
        }
        if (this.tasksInProgress == null) {
            violations.add("tasks_in_progress cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        RStageExecution other = (RStageExecution) obj;
        return Objects.equals(this.id, other.id) && Objects.equals(this.stagesId, other.stagesId) && Objects.equals(this.jobsId, other.jobsId) && Objects.equals(this.stageName, other.stageName) && Objects.equals(this.totalTasks, other.totalTasks) && Objects.equals(this.completedTasks, other.completedTasks) && Objects.equals(this.tasksInProgress, other.tasksInProgress);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.stagesId, this.jobsId, this.stageName, this.totalTasks, this.completedTasks, this.tasksInProgress);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "RStageExecution{" +
                "id=" + id +
                ", stagesId=" + stagesId +
                ", jobsId=" + jobsId +
                ", stageName=" + stageName +
                ", totalTasks=" + totalTasks +
                ", completedTasks=" + completedTasks +
                ", tasksInProgress=" + tasksInProgress +
                '}';
    }
}
