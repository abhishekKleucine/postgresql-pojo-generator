package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: variations
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: variations
 * - Primary Keys: id
 * 
 * Indexes:
 * - pk_variations (UNIQUE): id
 * - e0d4f71ce7a6434d91f52f7afa (UNIQUE): config_id, parameter_values_id
 * 
 * Unique Constraints:
 * - e0d4f71ce7a6434d91f52f7afa: parameter_values_id
 * - e0d4f71ce7a6434d91f52f7afa: config_id
 * 
 * Check Constraints:
 * - 2200_222899_13_not_null: variation_number IS NOT NULL
 * - 2200_222899_7_not_null: old_details IS NOT NULL
 * - 2200_222899_14_not_null: config_id IS NOT NULL
 * - 2200_222899_5_not_null: jobs_id IS NOT NULL
 * - 2200_222899_4_not_null: parameter_values_id IS NOT NULL
 * - 2200_222899_1_not_null: id IS NOT NULL
 * - 2200_222899_8_not_null: type IS NOT NULL
 * - 2200_222899_10_not_null: modified_at IS NOT NULL
 * - 2200_222899_6_not_null: new_details IS NOT NULL
 * - 2200_222899_9_not_null: created_at IS NOT NULL
 * - 2200_222899_11_not_null: created_by IS NOT NULL
 * - 2200_222899_2_not_null: name IS NOT NULL
 * - 2200_222899_12_not_null: modified_by IS NOT NULL
 * 
 * Foreign Keys:
 * - parameter_values_id → parameter_values.id
 * - jobs_id → jobs.id
 */
public class Variations implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: text(2147483647) NOT NULL
     */
    private String name;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: parameter_values_id
     * Type: int8(19) NOT NULL
     * Foreign Key → parameter_values.id
     * Unique Constraint: e0d4f71ce7a6434d91f52f7afa
     */
    private Long parameterValuesId;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: new_details
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String newDetails;

    /**
     * Database column: old_details
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String oldDetails;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: variation_number
     * Type: text(2147483647) NOT NULL
     */
    private String variationNumber;

    /**
     * Database column: config_id
     * Type: text(2147483647) NOT NULL
     * Unique Constraint: e0d4f71ce7a6434d91f52f7afa
     */
    private String configId;

    /**
     * Default constructor
     */
    public Variations() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param name name
     * @param description description
     * @param parameterValuesId parameter_values_id
     * @param jobsId jobs_id
     * @param newDetails new_details
     * @param oldDetails old_details
     * @param type type
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param variationNumber variation_number
     * @param configId config_id
     */
    public Variations(Long id, String name, String description, Long parameterValuesId, Long jobsId, String newDetails, String oldDetails, String type, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, String variationNumber, String configId) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.parameterValuesId = parameterValuesId;
        this.jobsId = jobsId;
        this.newDetails = newDetails;
        this.oldDetails = oldDetails;
        this.type = type;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.variationNumber = variationNumber;
        this.configId = configId;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null (NOT NULL constraint)");
        }
        this.name = name;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of parameter_values_id
     * @return Long value of parameter_values_id
     */
    public Long getParameterValuesId() {
        return this.parameterValuesId;
    }

    /**
     * Sets the value of parameter_values_id
     * @param parameterValuesId new value for parameter_values_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (e0d4f71ce7a6434d91f52f7afa)
     */
    public void setParameterValuesId(Long parameterValuesId) {
        if (parameterValuesId == null) {
            throw new IllegalArgumentException("parameter_values_id cannot be null (NOT NULL constraint)");
        }
        this.parameterValuesId = parameterValuesId;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of new_details
     * @return String value of new_details
     */
    public String getNewDetails() {
        return this.newDetails;
    }

    /**
     * Sets the value of new_details
     * @param newDetails new value for new_details
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setNewDetails(String newDetails) {
        if (newDetails == null) {
            throw new IllegalArgumentException("new_details cannot be null (NOT NULL constraint)");
        }
        this.newDetails = newDetails;
    }

    /**
     * Gets the value of old_details
     * @return String value of old_details
     */
    public String getOldDetails() {
        return this.oldDetails;
    }

    /**
     * Sets the value of old_details
     * @param oldDetails new value for old_details
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOldDetails(String oldDetails) {
        if (oldDetails == null) {
            throw new IllegalArgumentException("old_details cannot be null (NOT NULL constraint)");
        }
        this.oldDetails = oldDetails;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of variation_number
     * @return String value of variation_number
     */
    public String getVariationNumber() {
        return this.variationNumber;
    }

    /**
     * Sets the value of variation_number
     * @param variationNumber new value for variation_number
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setVariationNumber(String variationNumber) {
        if (variationNumber == null) {
            throw new IllegalArgumentException("variation_number cannot be null (NOT NULL constraint)");
        }
        this.variationNumber = variationNumber;
    }

    /**
     * Gets the value of config_id
     * @return String value of config_id
     */
    public String getConfigId() {
        return this.configId;
    }

    /**
     * Sets the value of config_id
     * @param configId new value for config_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (e0d4f71ce7a6434d91f52f7afa)
     */
    public void setConfigId(String configId) {
        if (configId == null) {
            throw new IllegalArgumentException("config_id cannot be null (NOT NULL constraint)");
        }
        this.configId = configId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.name == null) {
            violations.add("name cannot be null");
        }
        if (this.parameterValuesId == null) {
            violations.add("parameter_values_id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.newDetails == null) {
            violations.add("new_details cannot be null");
        }
        if (this.oldDetails == null) {
            violations.add("old_details cannot be null");
        }
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.variationNumber == null) {
            violations.add("variation_number cannot be null");
        }
        if (this.configId == null) {
            violations.add("config_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Variations other = (Variations) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Variations{" +
                "id=" + id +
                ", name=" + name +
                ", description=" + description +
                ", parameterValuesId=" + parameterValuesId +
                ", jobsId=" + jobsId +
                ", newDetails=" + newDetails +
                ", oldDetails=" + oldDetails +
                ", type=" + type +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", variationNumber=" + variationNumber +
                ", configId=" + configId +
                '}';
    }
}
