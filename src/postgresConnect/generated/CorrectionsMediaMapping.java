package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: corrections_media_mapping
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: corrections_media_mapping
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221511_1_not_null: id IS NOT NULL
 * - 2200_221511_7_not_null: archived IS NOT NULL
 * - 2200_221511_4_not_null: modified_by IS NOT NULL
 * - 2200_221511_6_not_null: is_old_media IS NOT NULL
 * - 2200_221511_8_not_null: corrections_id IS NOT NULL
 * - 2200_221511_2_not_null: created_by IS NOT NULL
 * - 2200_221511_5_not_null: modified_at IS NOT NULL
 * - 2200_221511_10_not_null: parameter_values_id IS NOT NULL
 * - 2200_221511_3_not_null: created_at IS NOT NULL
 * - 2200_221511_9_not_null: medias_id IS NOT NULL
 * 
 * Foreign Keys:
 * - corrections_id → corrections.id
 * - medias_id → medias.id
 * - parameter_values_id → parameter_values.id
 */
public class CorrectionsMediaMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: is_old_media
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean isOldMedia;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: corrections_id
     * Type: int8(19) NOT NULL
     * Foreign Key → corrections.id
     */
    private Long correctionsId;

    /**
     * Database column: medias_id
     * Type: int8(19) NOT NULL
     * Foreign Key → medias.id
     */
    private Long mediasId;

    /**
     * Database column: parameter_values_id
     * Type: int8(19) NOT NULL
     * Foreign Key → parameter_values.id
     */
    private Long parameterValuesId;

    /**
     * Default constructor
     */
    public CorrectionsMediaMapping() {
        // Initialize with default values where applicable
        this.isOldMedia = false; // Default value
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param createdBy created_by
     * @param createdAt created_at
     * @param modifiedBy modified_by
     * @param modifiedAt modified_at
     * @param isOldMedia is_old_media
     * @param archived archived
     * @param correctionsId corrections_id
     * @param mediasId medias_id
     * @param parameterValuesId parameter_values_id
     */
    public CorrectionsMediaMapping(Long id, Long createdBy, Long createdAt, Long modifiedBy, Long modifiedAt, Boolean isOldMedia, Boolean archived, Long correctionsId, Long mediasId, Long parameterValuesId) {
        this.id = id;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.modifiedBy = modifiedBy;
        this.modifiedAt = modifiedAt;
        this.isOldMedia = isOldMedia;
        this.archived = archived;
        this.correctionsId = correctionsId;
        this.mediasId = mediasId;
        this.parameterValuesId = parameterValuesId;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of is_old_media
     * @return Boolean value of is_old_media
     */
    public Boolean getIsOldMedia() {
        return this.isOldMedia;
    }

    /**
     * Sets the value of is_old_media
     * @param isOldMedia new value for is_old_media
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsOldMedia(Boolean isOldMedia) {
        this.isOldMedia = isOldMedia;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of corrections_id
     * @return Long value of corrections_id
     */
    public Long getCorrectionsId() {
        return this.correctionsId;
    }

    /**
     * Sets the value of corrections_id
     * @param correctionsId new value for corrections_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCorrectionsId(Long correctionsId) {
        if (correctionsId == null) {
            throw new IllegalArgumentException("corrections_id cannot be null (NOT NULL constraint)");
        }
        this.correctionsId = correctionsId;
    }

    /**
     * Gets the value of medias_id
     * @return Long value of medias_id
     */
    public Long getMediasId() {
        return this.mediasId;
    }

    /**
     * Sets the value of medias_id
     * @param mediasId new value for medias_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setMediasId(Long mediasId) {
        if (mediasId == null) {
            throw new IllegalArgumentException("medias_id cannot be null (NOT NULL constraint)");
        }
        this.mediasId = mediasId;
    }

    /**
     * Gets the value of parameter_values_id
     * @return Long value of parameter_values_id
     */
    public Long getParameterValuesId() {
        return this.parameterValuesId;
    }

    /**
     * Sets the value of parameter_values_id
     * @param parameterValuesId new value for parameter_values_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setParameterValuesId(Long parameterValuesId) {
        if (parameterValuesId == null) {
            throw new IllegalArgumentException("parameter_values_id cannot be null (NOT NULL constraint)");
        }
        this.parameterValuesId = parameterValuesId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.isOldMedia == null) {
            violations.add("is_old_media cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        if (this.correctionsId == null) {
            violations.add("corrections_id cannot be null");
        }
        if (this.mediasId == null) {
            violations.add("medias_id cannot be null");
        }
        if (this.parameterValuesId == null) {
            violations.add("parameter_values_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        CorrectionsMediaMapping other = (CorrectionsMediaMapping) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "CorrectionsMediaMapping{" +
                "id=" + id +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                ", isOldMedia=" + isOldMedia +
                ", archived=" + archived +
                ", correctionsId=" + correctionsId +
                ", mediasId=" + mediasId +
                ", parameterValuesId=" + parameterValuesId +
                '}';
    }
}
