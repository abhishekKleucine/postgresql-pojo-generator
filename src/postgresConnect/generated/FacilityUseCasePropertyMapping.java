package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: facility_use_case_property_mapping
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: facility_use_case_property_mapping
 * - Primary Keys: id
 * 
 * Indexes:
 * - unqb9f98ab5cb984e9d913b10d8 (UNIQUE): facilities_id, use_cases_id, properties_id
 * - idxde693d8b33bc41baaac62ded: facilities_id, use_cases_id
 * 
 * Unique Constraints:
 * - unqb9f98ab5cb984e9d913b10d8: use_cases_id
 * - unqb9f98ab5cb984e9d913b10d8: properties_id
 * - unqb9f98ab5cb984e9d913b10d8: facilities_id
 * 
 * Check Constraints:
 * - 2200_221570_12_not_null: modified_at IS NOT NULL
 * - 2200_221570_3_not_null: use_cases_id IS NOT NULL
 * - 2200_221570_6_not_null: place_holder_alias IS NOT NULL
 * - 2200_221570_8_not_null: is_mandatory IS NOT NULL
 * - 2200_221570_5_not_null: label_alias IS NOT NULL
 * - 2200_221570_2_not_null: facilities_id IS NOT NULL
 * - 2200_221570_9_not_null: created_by IS NOT NULL
 * - 2200_221570_7_not_null: order_tree IS NOT NULL
 * - 2200_221570_1_not_null: id IS NOT NULL
 * - 2200_221570_11_not_null: modified_by IS NOT NULL
 * - 2200_221570_4_not_null: properties_id IS NOT NULL
 * - 2200_221570_10_not_null: created_at IS NOT NULL
 * 
 * Foreign Keys:
 * - facilities_id → facilities.id
 * - use_cases_id → use_cases.id
 * - properties_id → properties.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class FacilityUseCasePropertyMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: facilities_id
     * Type: int8(19) NOT NULL
     * Foreign Key → facilities.id
     * Unique Constraint: unqb9f98ab5cb984e9d913b10d8
     */
    private Long facilitiesId;

    /**
     * Database column: use_cases_id
     * Type: int8(19) NOT NULL
     * Foreign Key → use_cases.id
     * Unique Constraint: unqb9f98ab5cb984e9d913b10d8
     */
    private Long useCasesId;

    /**
     * Database column: properties_id
     * Type: int8(19) NOT NULL
     * Foreign Key → properties.id
     * Unique Constraint: unqb9f98ab5cb984e9d913b10d8
     */
    private Long propertiesId;

    /**
     * Database column: label_alias
     * Type: varchar(255) NOT NULL
     */
    private String labelAlias;

    /**
     * Database column: place_holder_alias
     * Type: varchar(512) NOT NULL
     */
    private String placeHolderAlias;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     * Default: 1
     */
    private Integer orderTree;

    /**
     * Database column: is_mandatory
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean isMandatory;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Default constructor
     */
    public FacilityUseCasePropertyMapping() {
        // Initialize with default values where applicable
        this.orderTree = 1; // Default value
        this.isMandatory = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param facilitiesId facilities_id
     * @param useCasesId use_cases_id
     * @param propertiesId properties_id
     * @param labelAlias label_alias
     * @param placeHolderAlias place_holder_alias
     * @param orderTree order_tree
     * @param isMandatory is_mandatory
     * @param createdBy created_by
     * @param createdAt created_at
     * @param modifiedBy modified_by
     * @param modifiedAt modified_at
     */
    public FacilityUseCasePropertyMapping(Long id, Long facilitiesId, Long useCasesId, Long propertiesId, String labelAlias, String placeHolderAlias, Integer orderTree, Boolean isMandatory, Long createdBy, Long createdAt, Long modifiedBy, Long modifiedAt) {
        this.id = id;
        this.facilitiesId = facilitiesId;
        this.useCasesId = useCasesId;
        this.propertiesId = propertiesId;
        this.labelAlias = labelAlias;
        this.placeHolderAlias = placeHolderAlias;
        this.orderTree = orderTree;
        this.isMandatory = isMandatory;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.modifiedBy = modifiedBy;
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of facilities_id
     * @return Long value of facilities_id
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets the value of facilities_id
     * @param facilitiesId new value for facilities_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (unqb9f98ab5cb984e9d913b10d8)
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null (NOT NULL constraint)");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets the value of use_cases_id
     * @return Long value of use_cases_id
     */
    public Long getUseCasesId() {
        return this.useCasesId;
    }

    /**
     * Sets the value of use_cases_id
     * @param useCasesId new value for use_cases_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (unqb9f98ab5cb984e9d913b10d8)
     */
    public void setUseCasesId(Long useCasesId) {
        if (useCasesId == null) {
            throw new IllegalArgumentException("use_cases_id cannot be null (NOT NULL constraint)");
        }
        this.useCasesId = useCasesId;
    }

    /**
     * Gets the value of properties_id
     * @return Long value of properties_id
     */
    public Long getPropertiesId() {
        return this.propertiesId;
    }

    /**
     * Sets the value of properties_id
     * @param propertiesId new value for properties_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (unqb9f98ab5cb984e9d913b10d8)
     */
    public void setPropertiesId(Long propertiesId) {
        if (propertiesId == null) {
            throw new IllegalArgumentException("properties_id cannot be null (NOT NULL constraint)");
        }
        this.propertiesId = propertiesId;
    }

    /**
     * Gets the value of label_alias
     * @return String value of label_alias
     */
    public String getLabelAlias() {
        return this.labelAlias;
    }

    /**
     * Sets the value of label_alias
     * @param labelAlias new value for label_alias
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setLabelAlias(String labelAlias) {
        if (labelAlias == null) {
            throw new IllegalArgumentException("label_alias cannot be null (NOT NULL constraint)");
        }
        this.labelAlias = labelAlias;
    }

    /**
     * Gets the value of place_holder_alias
     * @return String value of place_holder_alias
     */
    public String getPlaceHolderAlias() {
        return this.placeHolderAlias;
    }

    /**
     * Sets the value of place_holder_alias
     * @param placeHolderAlias new value for place_holder_alias
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setPlaceHolderAlias(String placeHolderAlias) {
        if (placeHolderAlias == null) {
            throw new IllegalArgumentException("place_holder_alias cannot be null (NOT NULL constraint)");
        }
        this.placeHolderAlias = placeHolderAlias;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of is_mandatory
     * @return Boolean value of is_mandatory
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets the value of is_mandatory
     * @param isMandatory new value for is_mandatory
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsMandatory(Boolean isMandatory) {
        this.isMandatory = isMandatory;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.facilitiesId == null) {
            violations.add("facilities_id cannot be null");
        }
        if (this.useCasesId == null) {
            violations.add("use_cases_id cannot be null");
        }
        if (this.propertiesId == null) {
            violations.add("properties_id cannot be null");
        }
        if (this.labelAlias == null) {
            violations.add("label_alias cannot be null");
        }
        if (this.placeHolderAlias == null) {
            violations.add("place_holder_alias cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.isMandatory == null) {
            violations.add("is_mandatory cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        FacilityUseCasePropertyMapping other = (FacilityUseCasePropertyMapping) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "FacilityUseCasePropertyMapping{" +
                "id=" + id +
                ", facilitiesId=" + facilitiesId +
                ", useCasesId=" + useCasesId +
                ", propertiesId=" + propertiesId +
                ", labelAlias=" + labelAlias +
                ", placeHolderAlias=" + placeHolderAlias +
                ", orderTree=" + orderTree +
                ", isMandatory=" + isMandatory +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                '}';
    }
}
