package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: qrtz_calendars
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: qrtz_calendars
 * - Primary Keys: sched_name, calendar_name
 * 
 * Check Constraints:
 * - 2200_221730_1_not_null: sched_name IS NOT NULL
 * - 2200_221730_2_not_null: calendar_name IS NOT NULL
 * - 2200_221730_3_not_null: calendar IS NOT NULL
 */
public class QrtzCalendars implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     */
    private String schedName;

    /**
     * Database column: calendar_name
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String calendarName;

    /**
     * Database column: calendar
     * Type: bytea(2147483647) NOT NULL
     */
    private String calendar;

    /**
     * Default constructor
     */
    public QrtzCalendars() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param schedName sched_name
     * @param calendarName calendar_name
     * @param calendar calendar
     */
    public QrtzCalendars(String schedName, String calendarName, String calendar) {
        this.schedName = schedName;
        this.calendarName = calendarName;
        this.calendar = calendar;
    }

    /**
     * Gets the value of sched_name
     * @return String value of sched_name
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets the value of sched_name
     * @param schedName new value for sched_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null (NOT NULL constraint)");
        }
        this.schedName = schedName;
    }

    /**
     * Gets the value of calendar_name
     * @return String value of calendar_name
     */
    public String getCalendarName() {
        return this.calendarName;
    }

    /**
     * Sets the value of calendar_name
     * @param calendarName new value for calendar_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCalendarName(String calendarName) {
        if (calendarName == null) {
            throw new IllegalArgumentException("calendar_name cannot be null (NOT NULL constraint)");
        }
        this.calendarName = calendarName;
    }

    /**
     * Gets the value of calendar
     * @return String value of calendar
     */
    public String getCalendar() {
        return this.calendar;
    }

    /**
     * Sets the value of calendar
     * @param calendar new value for calendar
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCalendar(String calendar) {
        if (calendar == null) {
            throw new IllegalArgumentException("calendar cannot be null (NOT NULL constraint)");
        }
        this.calendar = calendar;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.schedName == null) {
            violations.add("sched_name cannot be null");
        }
        if (this.calendarName == null) {
            violations.add("calendar_name cannot be null");
        }
        if (this.calendar == null) {
            violations.add("calendar cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzCalendars other = (QrtzCalendars) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.calendarName, other.calendarName);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.calendarName);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "QrtzCalendars{" +
                "schedName=" + schedName +
                ", calendarName=" + calendarName +
                ", calendar=" + calendar +
                '}';
    }
}
