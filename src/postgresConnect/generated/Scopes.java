package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: scopes
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: scopes
 * - Primary Keys: id
 * 
 * Indexes:
 * - ukrbhy5v58w1gtysg0h9smgo0no (UNIQUE): name, scope_groups_id, archived
 * 
 * Unique Constraints:
 * - ukrbhy5v58w1gtysg0h9smgo0no: archived
 * - ukrbhy5v58w1gtysg0h9smgo0no: name
 * - ukrbhy5v58w1gtysg0h9smgo0no: scope_groups_id
 * 
 * Check Constraints:
 * - 2200_221820_6_not_null: archived IS NOT NULL
 * - 2200_221820_1_not_null: id IS NOT NULL
 * - 2200_221820_9_not_null: scope_groups_id IS NOT NULL
 * - 2200_221820_2_not_null: created_at IS NOT NULL
 * - 2200_221820_4_not_null: modified_at IS NOT NULL
 * - 2200_221820_8_not_null: order_tree IS NOT NULL
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - scope_groups_id → scope_groups.id
 */
public class Scopes implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: modified_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     * Unique Constraint: ukrbhy5v58w1gtysg0h9smgo0no
     */
    private Boolean archived;

    /**
     * Database column: name
     * Type: varchar(255)
     * Unique Constraint: ukrbhy5v58w1gtysg0h9smgo0no
     */
    private String name;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: scope_groups_id
     * Type: int8(19) NOT NULL
     * Foreign Key → scope_groups.id
     * Unique Constraint: ukrbhy5v58w1gtysg0h9smgo0no
     */
    private Long scopeGroupsId;

    /**
     * Default constructor
     */
    public Scopes() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param createdAt created_at
     * @param createdBy created_by
     * @param modifiedAt modified_at
     * @param modifiedBy modified_by
     * @param archived archived
     * @param name name
     * @param orderTree order_tree
     * @param scopeGroupsId scope_groups_id
     */
    public Scopes(Long id, Long createdAt, Long createdBy, Long modifiedAt, Long modifiedBy, Boolean archived, String name, Integer orderTree, Long scopeGroupsId) {
        this.id = id;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.modifiedAt = modifiedAt;
        this.modifiedBy = modifiedBy;
        this.archived = archived;
        this.name = name;
        this.orderTree = orderTree;
        this.scopeGroupsId = scopeGroupsId;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (ukrbhy5v58w1gtysg0h9smgo0no)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * Note: Value must be unique (ukrbhy5v58w1gtysg0h9smgo0no)
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of scope_groups_id
     * @return Long value of scope_groups_id
     */
    public Long getScopeGroupsId() {
        return this.scopeGroupsId;
    }

    /**
     * Sets the value of scope_groups_id
     * @param scopeGroupsId new value for scope_groups_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (ukrbhy5v58w1gtysg0h9smgo0no)
     */
    public void setScopeGroupsId(Long scopeGroupsId) {
        if (scopeGroupsId == null) {
            throw new IllegalArgumentException("scope_groups_id cannot be null (NOT NULL constraint)");
        }
        this.scopeGroupsId = scopeGroupsId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.scopeGroupsId == null) {
            violations.add("scope_groups_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Scopes other = (Scopes) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Scopes{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                ", modifiedAt=" + modifiedAt +
                ", modifiedBy=" + modifiedBy +
                ", archived=" + archived +
                ", name=" + name +
                ", orderTree=" + orderTree +
                ", scopeGroupsId=" + scopeGroupsId +
                '}';
    }
}
