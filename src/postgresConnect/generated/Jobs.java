package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: jobs
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: jobs
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx3de8f27a751f40bc9191a509: use_cases_id
 * - idxab176c90496d41cbad3767ae: state
 * - idxf8b4d5f7c5df4069b2b73652: organisations_id, facilities_id
 * 
 * Check Constraints:
 * - 2200_221608_13_not_null: use_cases_id IS NOT NULL
 * - 2200_221608_7_not_null: created_by IS NOT NULL
 * - 2200_221608_3_not_null: state IS NOT NULL
 * - 2200_221608_11_not_null: facilities_id IS NOT NULL
 * - 2200_221608_1_not_null: id IS NOT NULL
 * - 2200_221608_8_not_null: modified_by IS NOT NULL
 * - 2200_221608_5_not_null: created_at IS NOT NULL
 * - 2200_221608_6_not_null: modified_at IS NOT NULL
 * - 2200_221608_12_not_null: organisations_id IS NOT NULL
 * - 2200_221608_2_not_null: code IS NOT NULL
 * - 2200_221608_4_not_null: checklists_id IS NOT NULL
 * 
 * Foreign Keys:
 * - checklists_id → checklists.id
 * - created_by → users.id
 * - modified_by → users.id
 * - facilities_id → facilities.id
 * - organisations_id → organisations.id
 * - use_cases_id → use_cases.id
 * - started_by → users.id
 * - ended_by → users.id
 * - schedulers_id → schedulers.id
 */
public class Jobs implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: code
     * Type: varchar(50) NOT NULL
     */
    private String code;

    /**
     * Database column: state
     * Type: varchar(50) NOT NULL
     */
    private String state;

    /**
     * Database column: checklists_id
     * Type: int8(19) NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: started_at
     * Type: int8(19)
     */
    private Long startedAt;

    /**
     * Database column: ended_at
     * Type: int8(19)
     */
    private Long endedAt;

    /**
     * Database column: facilities_id
     * Type: int8(19) NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: organisations_id
     * Type: int8(19) NOT NULL
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: use_cases_id
     * Type: int8(19) NOT NULL
     * Foreign Key → use_cases.id
     */
    private Long useCasesId;

    /**
     * Database column: started_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long startedBy;

    /**
     * Database column: ended_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long endedBy;

    /**
     * Database column: is_scheduled
     * Type: bool(1)
     * Default: false
     */
    private Boolean isScheduled;

    /**
     * Database column: schedulers_id
     * Type: int8(19)
     * Foreign Key → schedulers.id
     */
    private Long schedulersId;

    /**
     * Database column: expected_start_date
     * Type: int8(19)
     */
    private Long expectedStartDate;

    /**
     * Database column: expected_end_date
     * Type: int8(19)
     */
    private Long expectedEndDate;

    /**
     * Database column: checklist_ancestor_id
     * Type: int8(19)
     */
    private Long checklistAncestorId;

    /**
     * Default constructor
     */
    public Jobs() {
        // Initialize with default values where applicable
        this.isScheduled = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param code code
     * @param state state
     * @param checklistsId checklists_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param startedAt started_at
     * @param endedAt ended_at
     * @param facilitiesId facilities_id
     * @param organisationsId organisations_id
     * @param useCasesId use_cases_id
     * @param startedBy started_by
     * @param endedBy ended_by
     * @param isScheduled is_scheduled
     * @param schedulersId schedulers_id
     * @param expectedStartDate expected_start_date
     * @param expectedEndDate expected_end_date
     * @param checklistAncestorId checklist_ancestor_id
     */
    public Jobs(Long id, String code, String state, Long checklistsId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Long startedAt, Long endedAt, Long facilitiesId, Long organisationsId, Long useCasesId, Long startedBy, Long endedBy, Boolean isScheduled, Long schedulersId, Long expectedStartDate, Long expectedEndDate, Long checklistAncestorId) {
        this.id = id;
        this.code = code;
        this.state = state;
        this.checklistsId = checklistsId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.startedAt = startedAt;
        this.endedAt = endedAt;
        this.facilitiesId = facilitiesId;
        this.organisationsId = organisationsId;
        this.useCasesId = useCasesId;
        this.startedBy = startedBy;
        this.endedBy = endedBy;
        this.isScheduled = isScheduled;
        this.schedulersId = schedulersId;
        this.expectedStartDate = expectedStartDate;
        this.expectedEndDate = expectedEndDate;
        this.checklistAncestorId = checklistAncestorId;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of code
     * @return String value of code
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets the value of code
     * @param code new value for code
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("code cannot be null (NOT NULL constraint)");
        }
        this.code = code;
    }

    /**
     * Gets the value of state
     * @return String value of state
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets the value of state
     * @param state new value for state
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null (NOT NULL constraint)");
        }
        this.state = state;
    }

    /**
     * Gets the value of checklists_id
     * @return Long value of checklists_id
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets the value of checklists_id
     * @param checklistsId new value for checklists_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null (NOT NULL constraint)");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of started_at
     * @return Long value of started_at
     */
    public Long getStartedAt() {
        return this.startedAt;
    }

    /**
     * Sets the value of started_at
     * @param startedAt new value for started_at
     */
    public void setStartedAt(Long startedAt) {
        this.startedAt = startedAt;
    }

    /**
     * Gets the value of ended_at
     * @return Long value of ended_at
     */
    public Long getEndedAt() {
        return this.endedAt;
    }

    /**
     * Sets the value of ended_at
     * @param endedAt new value for ended_at
     */
    public void setEndedAt(Long endedAt) {
        this.endedAt = endedAt;
    }

    /**
     * Gets the value of facilities_id
     * @return Long value of facilities_id
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets the value of facilities_id
     * @param facilitiesId new value for facilities_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null (NOT NULL constraint)");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null (NOT NULL constraint)");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of use_cases_id
     * @return Long value of use_cases_id
     */
    public Long getUseCasesId() {
        return this.useCasesId;
    }

    /**
     * Sets the value of use_cases_id
     * @param useCasesId new value for use_cases_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setUseCasesId(Long useCasesId) {
        if (useCasesId == null) {
            throw new IllegalArgumentException("use_cases_id cannot be null (NOT NULL constraint)");
        }
        this.useCasesId = useCasesId;
    }

    /**
     * Gets the value of started_by
     * @return Long value of started_by
     */
    public Long getStartedBy() {
        return this.startedBy;
    }

    /**
     * Sets the value of started_by
     * @param startedBy new value for started_by
     */
    public void setStartedBy(Long startedBy) {
        this.startedBy = startedBy;
    }

    /**
     * Gets the value of ended_by
     * @return Long value of ended_by
     */
    public Long getEndedBy() {
        return this.endedBy;
    }

    /**
     * Sets the value of ended_by
     * @param endedBy new value for ended_by
     */
    public void setEndedBy(Long endedBy) {
        this.endedBy = endedBy;
    }

    /**
     * Gets the value of is_scheduled
     * @return Boolean value of is_scheduled
     */
    public Boolean getIsScheduled() {
        return this.isScheduled;
    }

    /**
     * Sets the value of is_scheduled
     * @param isScheduled new value for is_scheduled
     */
    public void setIsScheduled(Boolean isScheduled) {
        this.isScheduled = isScheduled;
    }

    /**
     * Gets the value of schedulers_id
     * @return Long value of schedulers_id
     */
    public Long getSchedulersId() {
        return this.schedulersId;
    }

    /**
     * Sets the value of schedulers_id
     * @param schedulersId new value for schedulers_id
     */
    public void setSchedulersId(Long schedulersId) {
        this.schedulersId = schedulersId;
    }

    /**
     * Gets the value of expected_start_date
     * @return Long value of expected_start_date
     */
    public Long getExpectedStartDate() {
        return this.expectedStartDate;
    }

    /**
     * Sets the value of expected_start_date
     * @param expectedStartDate new value for expected_start_date
     */
    public void setExpectedStartDate(Long expectedStartDate) {
        this.expectedStartDate = expectedStartDate;
    }

    /**
     * Gets the value of expected_end_date
     * @return Long value of expected_end_date
     */
    public Long getExpectedEndDate() {
        return this.expectedEndDate;
    }

    /**
     * Sets the value of expected_end_date
     * @param expectedEndDate new value for expected_end_date
     */
    public void setExpectedEndDate(Long expectedEndDate) {
        this.expectedEndDate = expectedEndDate;
    }

    /**
     * Gets the value of checklist_ancestor_id
     * @return Long value of checklist_ancestor_id
     */
    public Long getChecklistAncestorId() {
        return this.checklistAncestorId;
    }

    /**
     * Sets the value of checklist_ancestor_id
     * @param checklistAncestorId new value for checklist_ancestor_id
     */
    public void setChecklistAncestorId(Long checklistAncestorId) {
        this.checklistAncestorId = checklistAncestorId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.code == null) {
            violations.add("code cannot be null");
        }
        if (this.state == null) {
            violations.add("state cannot be null");
        }
        if (this.checklistsId == null) {
            violations.add("checklists_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.facilitiesId == null) {
            violations.add("facilities_id cannot be null");
        }
        if (this.organisationsId == null) {
            violations.add("organisations_id cannot be null");
        }
        if (this.useCasesId == null) {
            violations.add("use_cases_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Jobs other = (Jobs) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Jobs{" +
                "id=" + id +
                ", code=" + code +
                ", state=" + state +
                ", checklistsId=" + checklistsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", startedAt=" + startedAt +
                ", endedAt=" + endedAt +
                ", facilitiesId=" + facilitiesId +
                ", organisationsId=" + organisationsId +
                ", useCasesId=" + useCasesId +
                ", startedBy=" + startedBy +
                ", endedBy=" + endedBy +
                ", isScheduled=" + isScheduled +
                ", schedulersId=" + schedulersId +
                ", expectedStartDate=" + expectedStartDate +
                ", expectedEndDate=" + expectedEndDate +
                ", checklistAncestorId=" + checklistAncestorId +
                '}';
    }
}
