package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: checklists
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: checklists
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221484_8_not_null: modified_at IS NOT NULL
 * - 2200_221484_5_not_null: archived IS NOT NULL
 * - 2200_221484_2_not_null: name IS NOT NULL
 * - 2200_221484_11_not_null: review_cycle IS NOT NULL
 * - 2200_221484_15_not_null: organisations_id IS NOT NULL
 * - 2200_221484_10_not_null: modified_by IS NOT NULL
 * - 2200_221484_4_not_null: state IS NOT NULL
 * - 2200_221484_1_not_null: id IS NOT NULL
 * - 2200_221484_3_not_null: code IS NOT NULL
 * - 2200_221484_18_not_null: is_global IS NOT NULL
 * - 2200_221484_7_not_null: created_at IS NOT NULL
 * - 2200_221484_9_not_null: created_by IS NOT NULL
 * 
 * Foreign Keys:
 * - versions_id → versions.id
 * - created_by → users.id
 * - modified_by → users.id
 * - released_by → users.id
 * - organisations_id → organisations.id
 * - use_cases_id → use_cases.id
 */
public class Checklists implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: text(2147483647) NOT NULL
     */
    private String name;

    /**
     * Database column: code
     * Type: varchar(20) NOT NULL
     */
    private String code;

    /**
     * Database column: state
     * Type: varchar(50) NOT NULL
     */
    private String state;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: versions_id
     * Type: int8(19)
     * Foreign Key → versions.id
     */
    private Long versionsId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: review_cycle
     * Type: int4(10) NOT NULL
     * Default: 1
     */
    private Integer reviewCycle;

    /**
     * Database column: released_at
     * Type: int8(19)
     */
    private Long releasedAt;

    /**
     * Database column: released_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long releasedBy;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: organisations_id
     * Type: int8(19) NOT NULL
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: use_cases_id
     * Type: int8(19)
     * Foreign Key → use_cases.id
     */
    private Long useCasesId;

    /**
     * Database column: job_log_columns
     * Type: jsonb(2147483647)
     * Default: '{}'::jsonb
     */
    private String jobLogColumns;

    /**
     * Database column: is_global
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean isGlobal;

    /**
     * Database column: color_code
     * Type: varchar(50)
     */
    private String colorCode;

    /**
     * Default constructor
     */
    public Checklists() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
        this.reviewCycle = 1; // Default value
        this.isGlobal = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param name name
     * @param code code
     * @param state state
     * @param archived archived
     * @param versionsId versions_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param reviewCycle review_cycle
     * @param releasedAt released_at
     * @param releasedBy released_by
     * @param description description
     * @param organisationsId organisations_id
     * @param useCasesId use_cases_id
     * @param jobLogColumns job_log_columns
     * @param isGlobal is_global
     * @param colorCode color_code
     */
    public Checklists(Long id, String name, String code, String state, Boolean archived, Long versionsId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Integer reviewCycle, Long releasedAt, Long releasedBy, String description, Long organisationsId, Long useCasesId, String jobLogColumns, Boolean isGlobal, String colorCode) {
        this.id = id;
        this.name = name;
        this.code = code;
        this.state = state;
        this.archived = archived;
        this.versionsId = versionsId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.reviewCycle = reviewCycle;
        this.releasedAt = releasedAt;
        this.releasedBy = releasedBy;
        this.description = description;
        this.organisationsId = organisationsId;
        this.useCasesId = useCasesId;
        this.jobLogColumns = jobLogColumns;
        this.isGlobal = isGlobal;
        this.colorCode = colorCode;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null (NOT NULL constraint)");
        }
        this.name = name;
    }

    /**
     * Gets the value of code
     * @return String value of code
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets the value of code
     * @param code new value for code
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("code cannot be null (NOT NULL constraint)");
        }
        this.code = code;
    }

    /**
     * Gets the value of state
     * @return String value of state
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets the value of state
     * @param state new value for state
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null (NOT NULL constraint)");
        }
        this.state = state;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of versions_id
     * @return Long value of versions_id
     */
    public Long getVersionsId() {
        return this.versionsId;
    }

    /**
     * Sets the value of versions_id
     * @param versionsId new value for versions_id
     */
    public void setVersionsId(Long versionsId) {
        this.versionsId = versionsId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of review_cycle
     * @return Integer value of review_cycle
     */
    public Integer getReviewCycle() {
        return this.reviewCycle;
    }

    /**
     * Sets the value of review_cycle
     * @param reviewCycle new value for review_cycle
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setReviewCycle(Integer reviewCycle) {
        if (reviewCycle == null) {
            throw new IllegalArgumentException("review_cycle cannot be null (NOT NULL constraint)");
        }
        this.reviewCycle = reviewCycle;
    }

    /**
     * Gets the value of released_at
     * @return Long value of released_at
     */
    public Long getReleasedAt() {
        return this.releasedAt;
    }

    /**
     * Sets the value of released_at
     * @param releasedAt new value for released_at
     */
    public void setReleasedAt(Long releasedAt) {
        this.releasedAt = releasedAt;
    }

    /**
     * Gets the value of released_by
     * @return Long value of released_by
     */
    public Long getReleasedBy() {
        return this.releasedBy;
    }

    /**
     * Sets the value of released_by
     * @param releasedBy new value for released_by
     */
    public void setReleasedBy(Long releasedBy) {
        this.releasedBy = releasedBy;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null (NOT NULL constraint)");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of use_cases_id
     * @return Long value of use_cases_id
     */
    public Long getUseCasesId() {
        return this.useCasesId;
    }

    /**
     * Sets the value of use_cases_id
     * @param useCasesId new value for use_cases_id
     */
    public void setUseCasesId(Long useCasesId) {
        this.useCasesId = useCasesId;
    }

    /**
     * Gets the value of job_log_columns
     * @return String value of job_log_columns
     */
    public String getJobLogColumns() {
        return this.jobLogColumns;
    }

    /**
     * Sets the value of job_log_columns
     * @param jobLogColumns new value for job_log_columns
     */
    public void setJobLogColumns(String jobLogColumns) {
        this.jobLogColumns = jobLogColumns;
    }

    /**
     * Gets the value of is_global
     * @return Boolean value of is_global
     */
    public Boolean getIsGlobal() {
        return this.isGlobal;
    }

    /**
     * Sets the value of is_global
     * @param isGlobal new value for is_global
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsGlobal(Boolean isGlobal) {
        this.isGlobal = isGlobal;
    }

    /**
     * Gets the value of color_code
     * @return String value of color_code
     */
    public String getColorCode() {
        return this.colorCode;
    }

    /**
     * Sets the value of color_code
     * @param colorCode new value for color_code
     */
    public void setColorCode(String colorCode) {
        this.colorCode = colorCode;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.name == null) {
            violations.add("name cannot be null");
        }
        if (this.code == null) {
            violations.add("code cannot be null");
        }
        if (this.state == null) {
            violations.add("state cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.reviewCycle == null) {
            violations.add("review_cycle cannot be null");
        }
        if (this.organisationsId == null) {
            violations.add("organisations_id cannot be null");
        }
        if (this.isGlobal == null) {
            violations.add("is_global cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Checklists other = (Checklists) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Checklists{" +
                "id=" + id +
                ", name=" + name +
                ", code=" + code +
                ", state=" + state +
                ", archived=" + archived +
                ", versionsId=" + versionsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", reviewCycle=" + reviewCycle +
                ", releasedAt=" + releasedAt +
                ", releasedBy=" + releasedBy +
                ", description=" + description +
                ", organisationsId=" + organisationsId +
                ", useCasesId=" + useCasesId +
                ", jobLogColumns=" + jobLogColumns +
                ", isGlobal=" + isGlobal +
                ", colorCode=" + colorCode +
                '}';
    }
}
