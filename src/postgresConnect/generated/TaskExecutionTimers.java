package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: task_execution_timers
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: task_execution_timers
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221842_2_not_null: created_at IS NOT NULL
 * - 2200_221842_8_not_null: task_executions_id IS NOT NULL
 * - 2200_221842_1_not_null: id IS NOT NULL
 * - 2200_221842_3_not_null: modified_at IS NOT NULL
 * - 2200_221842_5_not_null: paused_at IS NOT NULL
 * 
 * Foreign Keys:
 * - task_executions_id → task_executions.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class TaskExecutionTimers implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: comment
     * Type: text(2147483647)
     */
    private String comment;

    /**
     * Database column: paused_at
     * Type: int8(19) NOT NULL
     */
    private Long pausedAt;

    /**
     * Database column: reason
     * Type: text(2147483647)
     */
    private String reason;

    /**
     * Database column: resumed_at
     * Type: int8(19)
     */
    private Long resumedAt;

    /**
     * Database column: task_executions_id
     * Type: int8(19) NOT NULL
     * Foreign Key → task_executions.id
     */
    private Long taskExecutionsId;

    /**
     * Database column: created_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public TaskExecutionTimers() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param comment comment
     * @param pausedAt paused_at
     * @param reason reason
     * @param resumedAt resumed_at
     * @param taskExecutionsId task_executions_id
     * @param createdBy created_by
     * @param modifiedBy modified_by
     */
    public TaskExecutionTimers(Long id, Long createdAt, Long modifiedAt, String comment, Long pausedAt, String reason, Long resumedAt, Long taskExecutionsId, Long createdBy, Long modifiedBy) {
        this.id = id;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.comment = comment;
        this.pausedAt = pausedAt;
        this.reason = reason;
        this.resumedAt = resumedAt;
        this.taskExecutionsId = taskExecutionsId;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of comment
     * @return String value of comment
     */
    public String getComment() {
        return this.comment;
    }

    /**
     * Sets the value of comment
     * @param comment new value for comment
     */
    public void setComment(String comment) {
        this.comment = comment;
    }

    /**
     * Gets the value of paused_at
     * @return Long value of paused_at
     */
    public Long getPausedAt() {
        return this.pausedAt;
    }

    /**
     * Sets the value of paused_at
     * @param pausedAt new value for paused_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setPausedAt(Long pausedAt) {
        if (pausedAt == null) {
            throw new IllegalArgumentException("paused_at cannot be null (NOT NULL constraint)");
        }
        this.pausedAt = pausedAt;
    }

    /**
     * Gets the value of reason
     * @return String value of reason
     */
    public String getReason() {
        return this.reason;
    }

    /**
     * Sets the value of reason
     * @param reason new value for reason
     */
    public void setReason(String reason) {
        this.reason = reason;
    }

    /**
     * Gets the value of resumed_at
     * @return Long value of resumed_at
     */
    public Long getResumedAt() {
        return this.resumedAt;
    }

    /**
     * Sets the value of resumed_at
     * @param resumedAt new value for resumed_at
     */
    public void setResumedAt(Long resumedAt) {
        this.resumedAt = resumedAt;
    }

    /**
     * Gets the value of task_executions_id
     * @return Long value of task_executions_id
     */
    public Long getTaskExecutionsId() {
        return this.taskExecutionsId;
    }

    /**
     * Sets the value of task_executions_id
     * @param taskExecutionsId new value for task_executions_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTaskExecutionsId(Long taskExecutionsId) {
        if (taskExecutionsId == null) {
            throw new IllegalArgumentException("task_executions_id cannot be null (NOT NULL constraint)");
        }
        this.taskExecutionsId = taskExecutionsId;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.pausedAt == null) {
            violations.add("paused_at cannot be null");
        }
        if (this.taskExecutionsId == null) {
            violations.add("task_executions_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskExecutionTimers other = (TaskExecutionTimers) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "TaskExecutionTimers{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", comment=" + comment +
                ", pausedAt=" + pausedAt +
                ", reason=" + reason +
                ", resumedAt=" + resumedAt +
                ", taskExecutionsId=" + taskExecutionsId +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
