package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: password_policies
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: password_policies
 * - Primary Keys: id
 * 
 * Indexes:
 * - uk_i31gwblxtrvf9xw9020ve5hpg (UNIQUE): organisations_id
 * 
 * Unique Constraints:
 * - uk_i31gwblxtrvf9xw9020ve5hpg: organisations_id
 * 
 * Check Constraints:
 * - 2200_221702_4_not_null: modified_at IS NOT NULL
 * - 2200_221702_2_not_null: created_at IS NOT NULL
 * - 2200_221702_14_not_null: organisations_id IS NOT NULL
 * - 2200_221702_1_not_null: id IS NOT NULL
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - organisations_id → organisations.id
 */
public class PasswordPolicies implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: modified_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: allow_password_similar_to_username_or_email
     * Type: bool(1)
     * Default: false
     */
    private Boolean allowPasswordSimilarToUsernameOrEmail;

    /**
     * Database column: maximum_password_age
     * Type: int4(10)
     */
    private Integer maximumPasswordAge;

    /**
     * Database column: minimum_lowercase_characters
     * Type: int4(10)
     */
    private Integer minimumLowercaseCharacters;

    /**
     * Database column: minimum_numeric_characters
     * Type: int4(10)
     */
    private Integer minimumNumericCharacters;

    /**
     * Database column: minimum_password_history
     * Type: int4(10)
     */
    private Integer minimumPasswordHistory;

    /**
     * Database column: minimum_password_length
     * Type: int4(10)
     */
    private Integer minimumPasswordLength;

    /**
     * Database column: minimum_special_characters
     * Type: int4(10)
     */
    private Integer minimumSpecialCharacters;

    /**
     * Database column: minimum_uppercase_characters
     * Type: int4(10)
     */
    private Integer minimumUppercaseCharacters;

    /**
     * Database column: organisations_id
     * Type: int8(19) NOT NULL
     * Foreign Key → organisations.id
     * Unique Constraint: uk_i31gwblxtrvf9xw9020ve5hpg
     */
    private Long organisationsId;

    /**
     * Database column: password_expiration
     * Type: int4(10)
     */
    private Integer passwordExpiration;

    /**
     * Default constructor
     */
    public PasswordPolicies() {
        // Initialize with default values where applicable
        this.allowPasswordSimilarToUsernameOrEmail = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param createdAt created_at
     * @param createdBy created_by
     * @param modifiedAt modified_at
     * @param modifiedBy modified_by
     * @param allowPasswordSimilarToUsernameOrEmail allow_password_similar_to_username_or_email
     * @param maximumPasswordAge maximum_password_age
     * @param minimumLowercaseCharacters minimum_lowercase_characters
     * @param minimumNumericCharacters minimum_numeric_characters
     * @param minimumPasswordHistory minimum_password_history
     * @param minimumPasswordLength minimum_password_length
     * @param minimumSpecialCharacters minimum_special_characters
     * @param minimumUppercaseCharacters minimum_uppercase_characters
     * @param organisationsId organisations_id
     * @param passwordExpiration password_expiration
     */
    public PasswordPolicies(Long id, Long createdAt, Long createdBy, Long modifiedAt, Long modifiedBy, Boolean allowPasswordSimilarToUsernameOrEmail, Integer maximumPasswordAge, Integer minimumLowercaseCharacters, Integer minimumNumericCharacters, Integer minimumPasswordHistory, Integer minimumPasswordLength, Integer minimumSpecialCharacters, Integer minimumUppercaseCharacters, Long organisationsId, Integer passwordExpiration) {
        this.id = id;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.modifiedAt = modifiedAt;
        this.modifiedBy = modifiedBy;
        this.allowPasswordSimilarToUsernameOrEmail = allowPasswordSimilarToUsernameOrEmail;
        this.maximumPasswordAge = maximumPasswordAge;
        this.minimumLowercaseCharacters = minimumLowercaseCharacters;
        this.minimumNumericCharacters = minimumNumericCharacters;
        this.minimumPasswordHistory = minimumPasswordHistory;
        this.minimumPasswordLength = minimumPasswordLength;
        this.minimumSpecialCharacters = minimumSpecialCharacters;
        this.minimumUppercaseCharacters = minimumUppercaseCharacters;
        this.organisationsId = organisationsId;
        this.passwordExpiration = passwordExpiration;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of allow_password_similar_to_username_or_email
     * @return Boolean value of allow_password_similar_to_username_or_email
     */
    public Boolean getAllowPasswordSimilarToUsernameOrEmail() {
        return this.allowPasswordSimilarToUsernameOrEmail;
    }

    /**
     * Sets the value of allow_password_similar_to_username_or_email
     * @param allowPasswordSimilarToUsernameOrEmail new value for allow_password_similar_to_username_or_email
     */
    public void setAllowPasswordSimilarToUsernameOrEmail(Boolean allowPasswordSimilarToUsernameOrEmail) {
        this.allowPasswordSimilarToUsernameOrEmail = allowPasswordSimilarToUsernameOrEmail;
    }

    /**
     * Gets the value of maximum_password_age
     * @return Integer value of maximum_password_age
     */
    public Integer getMaximumPasswordAge() {
        return this.maximumPasswordAge;
    }

    /**
     * Sets the value of maximum_password_age
     * @param maximumPasswordAge new value for maximum_password_age
     */
    public void setMaximumPasswordAge(Integer maximumPasswordAge) {
        this.maximumPasswordAge = maximumPasswordAge;
    }

    /**
     * Gets the value of minimum_lowercase_characters
     * @return Integer value of minimum_lowercase_characters
     */
    public Integer getMinimumLowercaseCharacters() {
        return this.minimumLowercaseCharacters;
    }

    /**
     * Sets the value of minimum_lowercase_characters
     * @param minimumLowercaseCharacters new value for minimum_lowercase_characters
     */
    public void setMinimumLowercaseCharacters(Integer minimumLowercaseCharacters) {
        this.minimumLowercaseCharacters = minimumLowercaseCharacters;
    }

    /**
     * Gets the value of minimum_numeric_characters
     * @return Integer value of minimum_numeric_characters
     */
    public Integer getMinimumNumericCharacters() {
        return this.minimumNumericCharacters;
    }

    /**
     * Sets the value of minimum_numeric_characters
     * @param minimumNumericCharacters new value for minimum_numeric_characters
     */
    public void setMinimumNumericCharacters(Integer minimumNumericCharacters) {
        this.minimumNumericCharacters = minimumNumericCharacters;
    }

    /**
     * Gets the value of minimum_password_history
     * @return Integer value of minimum_password_history
     */
    public Integer getMinimumPasswordHistory() {
        return this.minimumPasswordHistory;
    }

    /**
     * Sets the value of minimum_password_history
     * @param minimumPasswordHistory new value for minimum_password_history
     */
    public void setMinimumPasswordHistory(Integer minimumPasswordHistory) {
        this.minimumPasswordHistory = minimumPasswordHistory;
    }

    /**
     * Gets the value of minimum_password_length
     * @return Integer value of minimum_password_length
     */
    public Integer getMinimumPasswordLength() {
        return this.minimumPasswordLength;
    }

    /**
     * Sets the value of minimum_password_length
     * @param minimumPasswordLength new value for minimum_password_length
     */
    public void setMinimumPasswordLength(Integer minimumPasswordLength) {
        this.minimumPasswordLength = minimumPasswordLength;
    }

    /**
     * Gets the value of minimum_special_characters
     * @return Integer value of minimum_special_characters
     */
    public Integer getMinimumSpecialCharacters() {
        return this.minimumSpecialCharacters;
    }

    /**
     * Sets the value of minimum_special_characters
     * @param minimumSpecialCharacters new value for minimum_special_characters
     */
    public void setMinimumSpecialCharacters(Integer minimumSpecialCharacters) {
        this.minimumSpecialCharacters = minimumSpecialCharacters;
    }

    /**
     * Gets the value of minimum_uppercase_characters
     * @return Integer value of minimum_uppercase_characters
     */
    public Integer getMinimumUppercaseCharacters() {
        return this.minimumUppercaseCharacters;
    }

    /**
     * Sets the value of minimum_uppercase_characters
     * @param minimumUppercaseCharacters new value for minimum_uppercase_characters
     */
    public void setMinimumUppercaseCharacters(Integer minimumUppercaseCharacters) {
        this.minimumUppercaseCharacters = minimumUppercaseCharacters;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     * Note: Value must be unique (uk_i31gwblxtrvf9xw9020ve5hpg)
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null (NOT NULL constraint)");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of password_expiration
     * @return Integer value of password_expiration
     */
    public Integer getPasswordExpiration() {
        return this.passwordExpiration;
    }

    /**
     * Sets the value of password_expiration
     * @param passwordExpiration new value for password_expiration
     */
    public void setPasswordExpiration(Integer passwordExpiration) {
        this.passwordExpiration = passwordExpiration;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.organisationsId == null) {
            violations.add("organisations_id cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        PasswordPolicies other = (PasswordPolicies) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "PasswordPolicies{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                ", modifiedAt=" + modifiedAt +
                ", modifiedBy=" + modifiedBy +
                ", allowPasswordSimilarToUsernameOrEmail=" + allowPasswordSimilarToUsernameOrEmail +
                ", maximumPasswordAge=" + maximumPasswordAge +
                ", minimumLowercaseCharacters=" + minimumLowercaseCharacters +
                ", minimumNumericCharacters=" + minimumNumericCharacters +
                ", minimumPasswordHistory=" + minimumPasswordHistory +
                ", minimumPasswordLength=" + minimumPasswordLength +
                ", minimumSpecialCharacters=" + minimumSpecialCharacters +
                ", minimumUppercaseCharacters=" + minimumUppercaseCharacters +
                ", organisationsId=" + organisationsId +
                ", passwordExpiration=" + passwordExpiration +
                '}';
    }
}
