package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: tasks
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: tasks
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx132468d6e0404caa9ce0e56c: stages_id
 * 
 * Check Constraints:
 * - 2200_221886_12_not_null: created_at IS NOT NULL
 * - 2200_221886_10_not_null: is_mandatory IS NOT NULL
 * - 2200_221886_3_not_null: archived IS NOT NULL
 * - 2200_221886_13_not_null: modified_at IS NOT NULL
 * - 2200_221886_14_not_null: created_by IS NOT NULL
 * - 2200_221886_5_not_null: has_stop IS NOT NULL
 * - 2200_221886_21_not_null: has_executor_lock IS NOT NULL
 * - 2200_221886_2_not_null: name IS NOT NULL
 * - 2200_221886_1_not_null: id IS NOT NULL
 * - 2200_221886_4_not_null: order_tree IS NOT NULL
 * - 2200_221886_20_not_null: is_solo_task IS NOT NULL
 * - 2200_221886_9_not_null: is_timed IS NOT NULL
 * - 2200_221886_15_not_null: modified_by IS NOT NULL
 * - 2200_221886_11_not_null: stages_id IS NOT NULL
 * 
 * Foreign Keys:
 * - stages_id → stages.id
 * - created_by → users.id
 * - modified_by → users.id
 * - task_recurrences_id → task_recurrences.id
 */
public class Tasks implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: varchar(512) NOT NULL
     */
    private String name;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: has_stop
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean hasStop;

    /**
     * Database column: max_period
     * Type: int8(19)
     */
    private Long maxPeriod;

    /**
     * Database column: min_period
     * Type: int8(19)
     */
    private Long minPeriod;

    /**
     * Database column: timer_operator
     * Type: varchar(50)
     */
    private String timerOperator;

    /**
     * Database column: is_timed
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean isTimed;

    /**
     * Database column: is_mandatory
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean isMandatory;

    /**
     * Database column: stages_id
     * Type: int8(19) NOT NULL
     * Foreign Key → stages.id
     */
    private Long stagesId;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: enable_recurrence
     * Type: bool(1)
     * Default: false
     */
    private Boolean enableRecurrence;

    /**
     * Database column: task_recurrences_id
     * Type: int8(19)
     * Foreign Key → task_recurrences.id
     */
    private Long taskRecurrencesId;

    /**
     * Database column: enable_scheduling
     * Type: bool(1)
     * Default: false
     */
    private Boolean enableScheduling;

    /**
     * Database column: task_schedules_id
     * Type: int8(19)
     */
    private Long taskSchedulesId;

    /**
     * Database column: is_solo_task
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean isSoloTask;

    /**
     * Database column: has_executor_lock
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean hasExecutorLock;

    /**
     * Database column: has_bulk_verification
     * Type: bool(1)
     * Default: false
     */
    private Boolean hasBulkVerification;

    /**
     * Database column: has_interlocks
     * Type: bool(1)
     * Default: false
     */
    private Boolean hasInterlocks;

    /**
     * Default constructor
     */
    public Tasks() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
        this.hasStop = false; // Default value
        this.isTimed = false; // Default value
        this.isMandatory = false; // Default value
        this.enableRecurrence = false; // Default value
        this.enableScheduling = false; // Default value
        this.isSoloTask = false; // Default value
        this.hasExecutorLock = false; // Default value
        this.hasBulkVerification = false; // Default value
        this.hasInterlocks = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param name name
     * @param archived archived
     * @param orderTree order_tree
     * @param hasStop has_stop
     * @param maxPeriod max_period
     * @param minPeriod min_period
     * @param timerOperator timer_operator
     * @param isTimed is_timed
     * @param isMandatory is_mandatory
     * @param stagesId stages_id
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param enableRecurrence enable_recurrence
     * @param taskRecurrencesId task_recurrences_id
     * @param enableScheduling enable_scheduling
     * @param taskSchedulesId task_schedules_id
     * @param isSoloTask is_solo_task
     * @param hasExecutorLock has_executor_lock
     * @param hasBulkVerification has_bulk_verification
     * @param hasInterlocks has_interlocks
     */
    public Tasks(Long id, String name, Boolean archived, Integer orderTree, Boolean hasStop, Long maxPeriod, Long minPeriod, String timerOperator, Boolean isTimed, Boolean isMandatory, Long stagesId, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Boolean enableRecurrence, Long taskRecurrencesId, Boolean enableScheduling, Long taskSchedulesId, Boolean isSoloTask, Boolean hasExecutorLock, Boolean hasBulkVerification, Boolean hasInterlocks) {
        this.id = id;
        this.name = name;
        this.archived = archived;
        this.orderTree = orderTree;
        this.hasStop = hasStop;
        this.maxPeriod = maxPeriod;
        this.minPeriod = minPeriod;
        this.timerOperator = timerOperator;
        this.isTimed = isTimed;
        this.isMandatory = isMandatory;
        this.stagesId = stagesId;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.enableRecurrence = enableRecurrence;
        this.taskRecurrencesId = taskRecurrencesId;
        this.enableScheduling = enableScheduling;
        this.taskSchedulesId = taskSchedulesId;
        this.isSoloTask = isSoloTask;
        this.hasExecutorLock = hasExecutorLock;
        this.hasBulkVerification = hasBulkVerification;
        this.hasInterlocks = hasInterlocks;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of name
     * @return String value of name
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets the value of name
     * @param name new value for name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null (NOT NULL constraint)");
        }
        this.name = name;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of has_stop
     * @return Boolean value of has_stop
     */
    public Boolean getHasStop() {
        return this.hasStop;
    }

    /**
     * Sets the value of has_stop
     * @param hasStop new value for has_stop
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setHasStop(Boolean hasStop) {
        this.hasStop = hasStop;
    }

    /**
     * Gets the value of max_period
     * @return Long value of max_period
     */
    public Long getMaxPeriod() {
        return this.maxPeriod;
    }

    /**
     * Sets the value of max_period
     * @param maxPeriod new value for max_period
     */
    public void setMaxPeriod(Long maxPeriod) {
        this.maxPeriod = maxPeriod;
    }

    /**
     * Gets the value of min_period
     * @return Long value of min_period
     */
    public Long getMinPeriod() {
        return this.minPeriod;
    }

    /**
     * Sets the value of min_period
     * @param minPeriod new value for min_period
     */
    public void setMinPeriod(Long minPeriod) {
        this.minPeriod = minPeriod;
    }

    /**
     * Gets the value of timer_operator
     * @return String value of timer_operator
     */
    public String getTimerOperator() {
        return this.timerOperator;
    }

    /**
     * Sets the value of timer_operator
     * @param timerOperator new value for timer_operator
     */
    public void setTimerOperator(String timerOperator) {
        this.timerOperator = timerOperator;
    }

    /**
     * Gets the value of is_timed
     * @return Boolean value of is_timed
     */
    public Boolean getIsTimed() {
        return this.isTimed;
    }

    /**
     * Sets the value of is_timed
     * @param isTimed new value for is_timed
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsTimed(Boolean isTimed) {
        this.isTimed = isTimed;
    }

    /**
     * Gets the value of is_mandatory
     * @return Boolean value of is_mandatory
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets the value of is_mandatory
     * @param isMandatory new value for is_mandatory
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsMandatory(Boolean isMandatory) {
        this.isMandatory = isMandatory;
    }

    /**
     * Gets the value of stages_id
     * @return Long value of stages_id
     */
    public Long getStagesId() {
        return this.stagesId;
    }

    /**
     * Sets the value of stages_id
     * @param stagesId new value for stages_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setStagesId(Long stagesId) {
        if (stagesId == null) {
            throw new IllegalArgumentException("stages_id cannot be null (NOT NULL constraint)");
        }
        this.stagesId = stagesId;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of enable_recurrence
     * @return Boolean value of enable_recurrence
     */
    public Boolean getEnableRecurrence() {
        return this.enableRecurrence;
    }

    /**
     * Sets the value of enable_recurrence
     * @param enableRecurrence new value for enable_recurrence
     */
    public void setEnableRecurrence(Boolean enableRecurrence) {
        this.enableRecurrence = enableRecurrence;
    }

    /**
     * Gets the value of task_recurrences_id
     * @return Long value of task_recurrences_id
     */
    public Long getTaskRecurrencesId() {
        return this.taskRecurrencesId;
    }

    /**
     * Sets the value of task_recurrences_id
     * @param taskRecurrencesId new value for task_recurrences_id
     */
    public void setTaskRecurrencesId(Long taskRecurrencesId) {
        this.taskRecurrencesId = taskRecurrencesId;
    }

    /**
     * Gets the value of enable_scheduling
     * @return Boolean value of enable_scheduling
     */
    public Boolean getEnableScheduling() {
        return this.enableScheduling;
    }

    /**
     * Sets the value of enable_scheduling
     * @param enableScheduling new value for enable_scheduling
     */
    public void setEnableScheduling(Boolean enableScheduling) {
        this.enableScheduling = enableScheduling;
    }

    /**
     * Gets the value of task_schedules_id
     * @return Long value of task_schedules_id
     */
    public Long getTaskSchedulesId() {
        return this.taskSchedulesId;
    }

    /**
     * Sets the value of task_schedules_id
     * @param taskSchedulesId new value for task_schedules_id
     */
    public void setTaskSchedulesId(Long taskSchedulesId) {
        this.taskSchedulesId = taskSchedulesId;
    }

    /**
     * Gets the value of is_solo_task
     * @return Boolean value of is_solo_task
     */
    public Boolean getIsSoloTask() {
        return this.isSoloTask;
    }

    /**
     * Sets the value of is_solo_task
     * @param isSoloTask new value for is_solo_task
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsSoloTask(Boolean isSoloTask) {
        this.isSoloTask = isSoloTask;
    }

    /**
     * Gets the value of has_executor_lock
     * @return Boolean value of has_executor_lock
     */
    public Boolean getHasExecutorLock() {
        return this.hasExecutorLock;
    }

    /**
     * Sets the value of has_executor_lock
     * @param hasExecutorLock new value for has_executor_lock
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setHasExecutorLock(Boolean hasExecutorLock) {
        this.hasExecutorLock = hasExecutorLock;
    }

    /**
     * Gets the value of has_bulk_verification
     * @return Boolean value of has_bulk_verification
     */
    public Boolean getHasBulkVerification() {
        return this.hasBulkVerification;
    }

    /**
     * Sets the value of has_bulk_verification
     * @param hasBulkVerification new value for has_bulk_verification
     */
    public void setHasBulkVerification(Boolean hasBulkVerification) {
        this.hasBulkVerification = hasBulkVerification;
    }

    /**
     * Gets the value of has_interlocks
     * @return Boolean value of has_interlocks
     */
    public Boolean getHasInterlocks() {
        return this.hasInterlocks;
    }

    /**
     * Sets the value of has_interlocks
     * @param hasInterlocks new value for has_interlocks
     */
    public void setHasInterlocks(Boolean hasInterlocks) {
        this.hasInterlocks = hasInterlocks;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.name == null) {
            violations.add("name cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.hasStop == null) {
            violations.add("has_stop cannot be null");
        }
        if (this.isTimed == null) {
            violations.add("is_timed cannot be null");
        }
        if (this.isMandatory == null) {
            violations.add("is_mandatory cannot be null");
        }
        if (this.stagesId == null) {
            violations.add("stages_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.isSoloTask == null) {
            violations.add("is_solo_task cannot be null");
        }
        if (this.hasExecutorLock == null) {
            violations.add("has_executor_lock cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Tasks other = (Tasks) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Tasks{" +
                "id=" + id +
                ", name=" + name +
                ", archived=" + archived +
                ", orderTree=" + orderTree +
                ", hasStop=" + hasStop +
                ", maxPeriod=" + maxPeriod +
                ", minPeriod=" + minPeriod +
                ", timerOperator=" + timerOperator +
                ", isTimed=" + isTimed +
                ", isMandatory=" + isMandatory +
                ", stagesId=" + stagesId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", enableRecurrence=" + enableRecurrence +
                ", taskRecurrencesId=" + taskRecurrencesId +
                ", enableScheduling=" + enableScheduling +
                ", taskSchedulesId=" + taskSchedulesId +
                ", isSoloTask=" + isSoloTask +
                ", hasExecutorLock=" + hasExecutorLock +
                ", hasBulkVerification=" + hasBulkVerification +
                ", hasInterlocks=" + hasInterlocks +
                '}';
    }
}
