package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: parameter_media_mapping
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: parameter_media_mapping
 * - Primary Keys: medias_id, parameters_id
 * 
 * Check Constraints:
 * - 2200_221645_1_not_null: medias_id IS NOT NULL
 * - 2200_221645_7_not_null: modified_by IS NOT NULL
 * - 2200_221645_5_not_null: modified_at IS NOT NULL
 * - 2200_221645_2_not_null: parameters_id IS NOT NULL
 * - 2200_221645_4_not_null: created_at IS NOT NULL
 * - 2200_221645_6_not_null: created_by IS NOT NULL
 * 
 * Foreign Keys:
 * - medias_id → medias.id
 * - parameters_id → parameters.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class ParameterMediaMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: medias_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → medias.id
     */
    private Long mediasId;

    /**
     * Database column: parameters_id
     * Type: int8(19) NOT NULL
     * Primary Key
     * Foreign Key → parameters.id
     */
    private Long parametersId;

    /**
     * Database column: archived
     * Type: bool(1)
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public ParameterMediaMapping() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param mediasId medias_id
     * @param parametersId parameters_id
     * @param archived archived
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     */
    public ParameterMediaMapping(Long mediasId, Long parametersId, Boolean archived, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy) {
        this.mediasId = mediasId;
        this.parametersId = parametersId;
        this.archived = archived;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of medias_id
     * @return Long value of medias_id
     */
    public Long getMediasId() {
        return this.mediasId;
    }

    /**
     * Sets the value of medias_id
     * @param mediasId new value for medias_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setMediasId(Long mediasId) {
        if (mediasId == null) {
            throw new IllegalArgumentException("medias_id cannot be null (NOT NULL constraint)");
        }
        this.mediasId = mediasId;
    }

    /**
     * Gets the value of parameters_id
     * @return Long value of parameters_id
     */
    public Long getParametersId() {
        return this.parametersId;
    }

    /**
     * Sets the value of parameters_id
     * @param parametersId new value for parameters_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setParametersId(Long parametersId) {
        if (parametersId == null) {
            throw new IllegalArgumentException("parameters_id cannot be null (NOT NULL constraint)");
        }
        this.parametersId = parametersId;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.mediasId == null) {
            violations.add("medias_id cannot be null");
        }
        if (this.parametersId == null) {
            violations.add("parameters_id cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ParameterMediaMapping other = (ParameterMediaMapping) obj;
        return Objects.equals(this.mediasId, other.mediasId) && Objects.equals(this.parametersId, other.parametersId);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.mediasId, this.parametersId);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "ParameterMediaMapping{" +
                "mediasId=" + mediasId +
                ", parametersId=" + parametersId +
                ", archived=" + archived +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
