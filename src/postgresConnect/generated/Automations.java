package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: automations
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: automations
 * - Primary Keys: id
 * 
 * Indexes:
 * - pk_automations (UNIQUE): id
 * 
 * Check Constraints:
 * - 2200_221451_11_not_null: modified_by IS NOT NULL
 * - 2200_221451_2_not_null: type IS NOT NULL
 * - 2200_221451_8_not_null: created_at IS NOT NULL
 * - 2200_221451_6_not_null: action_details IS NOT NULL
 * - 2200_221451_4_not_null: target_entity_type IS NOT NULL
 * - 2200_221451_7_not_null: trigger_details IS NOT NULL
 * - 2200_221451_1_not_null: id IS NOT NULL
 * - 2200_221451_10_not_null: created_by IS NOT NULL
 * - 2200_221451_9_not_null: modified_at IS NOT NULL
 * - 2200_221451_3_not_null: action_type IS NOT NULL
 * - 2200_221451_5_not_null: trigger_type IS NOT NULL
 */
public class Automations implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: action_type
     * Type: varchar(50) NOT NULL
     */
    private String actionType;

    /**
     * Database column: target_entity_type
     * Type: varchar(50) NOT NULL
     */
    private String targetEntityType;

    /**
     * Database column: trigger_type
     * Type: varchar(50) NOT NULL
     */
    private String triggerType;

    /**
     * Database column: action_details
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String actionDetails;

    /**
     * Database column: trigger_details
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String triggerDetails;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: archived
     * Type: bool(1)
     * Default: false
     */
    private Boolean archived;

    /**
     * Default constructor
     */
    public Automations() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param type type
     * @param actionType action_type
     * @param targetEntityType target_entity_type
     * @param triggerType trigger_type
     * @param actionDetails action_details
     * @param triggerDetails trigger_details
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param archived archived
     */
    public Automations(Long id, String type, String actionType, String targetEntityType, String triggerType, String actionDetails, String triggerDetails, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Boolean archived) {
        this.id = id;
        this.type = type;
        this.actionType = actionType;
        this.targetEntityType = targetEntityType;
        this.triggerType = triggerType;
        this.actionDetails = actionDetails;
        this.triggerDetails = triggerDetails;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.archived = archived;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of action_type
     * @return String value of action_type
     */
    public String getActionType() {
        return this.actionType;
    }

    /**
     * Sets the value of action_type
     * @param actionType new value for action_type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setActionType(String actionType) {
        if (actionType == null) {
            throw new IllegalArgumentException("action_type cannot be null (NOT NULL constraint)");
        }
        this.actionType = actionType;
    }

    /**
     * Gets the value of target_entity_type
     * @return String value of target_entity_type
     */
    public String getTargetEntityType() {
        return this.targetEntityType;
    }

    /**
     * Sets the value of target_entity_type
     * @param targetEntityType new value for target_entity_type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTargetEntityType(String targetEntityType) {
        if (targetEntityType == null) {
            throw new IllegalArgumentException("target_entity_type cannot be null (NOT NULL constraint)");
        }
        this.targetEntityType = targetEntityType;
    }

    /**
     * Gets the value of trigger_type
     * @return String value of trigger_type
     */
    public String getTriggerType() {
        return this.triggerType;
    }

    /**
     * Sets the value of trigger_type
     * @param triggerType new value for trigger_type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerType(String triggerType) {
        if (triggerType == null) {
            throw new IllegalArgumentException("trigger_type cannot be null (NOT NULL constraint)");
        }
        this.triggerType = triggerType;
    }

    /**
     * Gets the value of action_details
     * @return String value of action_details
     */
    public String getActionDetails() {
        return this.actionDetails;
    }

    /**
     * Sets the value of action_details
     * @param actionDetails new value for action_details
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setActionDetails(String actionDetails) {
        if (actionDetails == null) {
            throw new IllegalArgumentException("action_details cannot be null (NOT NULL constraint)");
        }
        this.actionDetails = actionDetails;
    }

    /**
     * Gets the value of trigger_details
     * @return String value of trigger_details
     */
    public String getTriggerDetails() {
        return this.triggerDetails;
    }

    /**
     * Sets the value of trigger_details
     * @param triggerDetails new value for trigger_details
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTriggerDetails(String triggerDetails) {
        if (triggerDetails == null) {
            throw new IllegalArgumentException("trigger_details cannot be null (NOT NULL constraint)");
        }
        this.triggerDetails = triggerDetails;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        if (this.actionType == null) {
            violations.add("action_type cannot be null");
        }
        if (this.targetEntityType == null) {
            violations.add("target_entity_type cannot be null");
        }
        if (this.triggerType == null) {
            violations.add("trigger_type cannot be null");
        }
        if (this.actionDetails == null) {
            violations.add("action_details cannot be null");
        }
        if (this.triggerDetails == null) {
            violations.add("trigger_details cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Automations other = (Automations) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Automations{" +
                "id=" + id +
                ", type=" + type +
                ", actionType=" + actionType +
                ", targetEntityType=" + targetEntityType +
                ", triggerType=" + triggerType +
                ", actionDetails=" + actionDetails +
                ", triggerDetails=" + triggerDetails +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", archived=" + archived +
                '}';
    }
}
