package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: licenses
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: licenses
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221612_3_not_null: facilities_id IS NOT NULL
 * - 2200_221612_1_not_null: id IS NOT NULL
 * - 2200_221612_2_not_null: organisations_id IS NOT NULL
 * - 2200_221612_13_not_null: archived IS NOT NULL
 * - 2200_221612_15_not_null: created_at IS NOT NULL
 * - 2200_221612_17_not_null: modified_at IS NOT NULL
 * 
 * Foreign Keys:
 * - organisations_id → organisations.id
 * - facilities_id → facilities.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class Licenses implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: organisations_id
     * Type: int8(19) NOT NULL
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: facilities_id
     * Type: int8(19) NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: product
     * Type: varchar(150)
     */
    private String product;

    /**
     * Database column: type
     * Type: varchar(150)
     */
    private String type;

    /**
     * Database column: subscription_start_date
     * Type: date(13)
     */
    private java.time.LocalDate subscriptionStartDate;

    /**
     * Database column: subscription_period
     * Type: int4(10)
     */
    private Integer subscriptionPeriod;

    /**
     * Database column: subscription_renewal_date
     * Type: date(13)
     */
    private java.time.LocalDate subscriptionRenewalDate;

    /**
     * Database column: payment_done
     * Type: bool(1)
     */
    private Boolean paymentDone;

    /**
     * Database column: intimate_before
     * Type: int4(10)
     */
    private Integer intimateBefore;

    /**
     * Database column: grace_period
     * Type: int4(10)
     */
    private Integer gracePeriod;

    /**
     * Database column: workflow
     * Type: varchar(150)
     */
    private String workflow;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: created_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8(19)
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Default constructor
     */
    public Licenses() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param organisationsId organisations_id
     * @param facilitiesId facilities_id
     * @param product product
     * @param type type
     * @param subscriptionStartDate subscription_start_date
     * @param subscriptionPeriod subscription_period
     * @param subscriptionRenewalDate subscription_renewal_date
     * @param paymentDone payment_done
     * @param intimateBefore intimate_before
     * @param gracePeriod grace_period
     * @param workflow workflow
     * @param archived archived
     * @param createdBy created_by
     * @param createdAt created_at
     * @param modifiedBy modified_by
     * @param modifiedAt modified_at
     */
    public Licenses(Long id, Long organisationsId, Long facilitiesId, String product, String type, java.time.LocalDate subscriptionStartDate, Integer subscriptionPeriod, java.time.LocalDate subscriptionRenewalDate, Boolean paymentDone, Integer intimateBefore, Integer gracePeriod, String workflow, Boolean archived, Long createdBy, Long createdAt, Long modifiedBy, Long modifiedAt) {
        this.id = id;
        this.organisationsId = organisationsId;
        this.facilitiesId = facilitiesId;
        this.product = product;
        this.type = type;
        this.subscriptionStartDate = subscriptionStartDate;
        this.subscriptionPeriod = subscriptionPeriod;
        this.subscriptionRenewalDate = subscriptionRenewalDate;
        this.paymentDone = paymentDone;
        this.intimateBefore = intimateBefore;
        this.gracePeriod = gracePeriod;
        this.workflow = workflow;
        this.archived = archived;
        this.createdBy = createdBy;
        this.createdAt = createdAt;
        this.modifiedBy = modifiedBy;
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of organisations_id
     * @return Long value of organisations_id
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets the value of organisations_id
     * @param organisationsId new value for organisations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null (NOT NULL constraint)");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets the value of facilities_id
     * @return Long value of facilities_id
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets the value of facilities_id
     * @param facilitiesId new value for facilities_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null (NOT NULL constraint)");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets the value of product
     * @return String value of product
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * Sets the value of product
     * @param product new value for product
     */
    public void setProduct(String product) {
        this.product = product;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Gets the value of subscription_start_date
     * @return java.time.LocalDate value of subscription_start_date
     */
    public java.time.LocalDate getSubscriptionStartDate() {
        return this.subscriptionStartDate;
    }

    /**
     * Sets the value of subscription_start_date
     * @param subscriptionStartDate new value for subscription_start_date
     */
    public void setSubscriptionStartDate(java.time.LocalDate subscriptionStartDate) {
        this.subscriptionStartDate = subscriptionStartDate;
    }

    /**
     * Gets the value of subscription_period
     * @return Integer value of subscription_period
     */
    public Integer getSubscriptionPeriod() {
        return this.subscriptionPeriod;
    }

    /**
     * Sets the value of subscription_period
     * @param subscriptionPeriod new value for subscription_period
     */
    public void setSubscriptionPeriod(Integer subscriptionPeriod) {
        this.subscriptionPeriod = subscriptionPeriod;
    }

    /**
     * Gets the value of subscription_renewal_date
     * @return java.time.LocalDate value of subscription_renewal_date
     */
    public java.time.LocalDate getSubscriptionRenewalDate() {
        return this.subscriptionRenewalDate;
    }

    /**
     * Sets the value of subscription_renewal_date
     * @param subscriptionRenewalDate new value for subscription_renewal_date
     */
    public void setSubscriptionRenewalDate(java.time.LocalDate subscriptionRenewalDate) {
        this.subscriptionRenewalDate = subscriptionRenewalDate;
    }

    /**
     * Gets the value of payment_done
     * @return Boolean value of payment_done
     */
    public Boolean getPaymentDone() {
        return this.paymentDone;
    }

    /**
     * Sets the value of payment_done
     * @param paymentDone new value for payment_done
     */
    public void setPaymentDone(Boolean paymentDone) {
        this.paymentDone = paymentDone;
    }

    /**
     * Gets the value of intimate_before
     * @return Integer value of intimate_before
     */
    public Integer getIntimateBefore() {
        return this.intimateBefore;
    }

    /**
     * Sets the value of intimate_before
     * @param intimateBefore new value for intimate_before
     */
    public void setIntimateBefore(Integer intimateBefore) {
        this.intimateBefore = intimateBefore;
    }

    /**
     * Gets the value of grace_period
     * @return Integer value of grace_period
     */
    public Integer getGracePeriod() {
        return this.gracePeriod;
    }

    /**
     * Sets the value of grace_period
     * @param gracePeriod new value for grace_period
     */
    public void setGracePeriod(Integer gracePeriod) {
        this.gracePeriod = gracePeriod;
    }

    /**
     * Gets the value of workflow
     * @return String value of workflow
     */
    public String getWorkflow() {
        return this.workflow;
    }

    /**
     * Sets the value of workflow
     * @param workflow new value for workflow
     */
    public void setWorkflow(String workflow) {
        this.workflow = workflow;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.organisationsId == null) {
            violations.add("organisations_id cannot be null");
        }
        if (this.facilitiesId == null) {
            violations.add("facilities_id cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Licenses other = (Licenses) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Licenses{" +
                "id=" + id +
                ", organisationsId=" + organisationsId +
                ", facilitiesId=" + facilitiesId +
                ", product=" + product +
                ", type=" + type +
                ", subscriptionStartDate=" + subscriptionStartDate +
                ", subscriptionPeriod=" + subscriptionPeriod +
                ", subscriptionRenewalDate=" + subscriptionRenewalDate +
                ", paymentDone=" + paymentDone +
                ", intimateBefore=" + intimateBefore +
                ", gracePeriod=" + gracePeriod +
                ", workflow=" + workflow +
                ", archived=" + archived +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                '}';
    }
}
