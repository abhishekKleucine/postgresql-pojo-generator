package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: databasechangeloglock
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: databasechangeloglock
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221525_2_not_null: locked IS NOT NULL
 * - 2200_221525_1_not_null: id IS NOT NULL
 */
public class Databasechangeloglock implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int4(10) NOT NULL
     * Primary Key
     */
    private Integer id;

    /**
     * Database column: locked
     * Type: bool(1) NOT NULL
     */
    private Boolean locked;

    /**
     * Database column: lockgranted
     * Type: timestamp(29)
     */
    private java.time.LocalDateTime lockgranted;

    /**
     * Database column: lockedby
     * Type: varchar(255)
     */
    private String lockedby;

    /**
     * Default constructor
     */
    public Databasechangeloglock() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param locked locked
     * @param lockgranted lockgranted
     * @param lockedby lockedby
     */
    public Databasechangeloglock(Integer id, Boolean locked, java.time.LocalDateTime lockgranted, String lockedby) {
        this.id = id;
        this.locked = locked;
        this.lockgranted = lockgranted;
        this.lockedby = lockedby;
    }

    /**
     * Gets the value of id
     * @return Integer value of id
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Integer id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of locked
     * @return Boolean value of locked
     */
    public Boolean getLocked() {
        return this.locked;
    }

    /**
     * Sets the value of locked
     * @param locked new value for locked
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setLocked(Boolean locked) {
        this.locked = locked;
    }

    /**
     * Gets the value of lockgranted
     * @return java.time.LocalDateTime value of lockgranted
     */
    public java.time.LocalDateTime getLockgranted() {
        return this.lockgranted;
    }

    /**
     * Sets the value of lockgranted
     * @param lockgranted new value for lockgranted
     */
    public void setLockgranted(java.time.LocalDateTime lockgranted) {
        this.lockgranted = lockgranted;
    }

    /**
     * Gets the value of lockedby
     * @return String value of lockedby
     */
    public String getLockedby() {
        return this.lockedby;
    }

    /**
     * Sets the value of lockedby
     * @param lockedby new value for lockedby
     */
    public void setLockedby(String lockedby) {
        this.lockedby = lockedby;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.locked == null) {
            violations.add("locked cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Databasechangeloglock other = (Databasechangeloglock) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Databasechangeloglock{" +
                "id=" + id +
                ", locked=" + locked +
                ", lockgranted=" + lockgranted +
                ", lockedby=" + lockedby +
                '}';
    }
}
