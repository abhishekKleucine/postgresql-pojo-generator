package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: parameters
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: parameters
 * - Primary Keys: id
 * 
 * Indexes:
 * - idxb90a74e43e5a4d1db3ec5011: tasks_id
 * 
 * Check Constraints:
 * - 2200_221684_21_not_null: verification_type IS NOT NULL
 * - 2200_221684_1_not_null: id IS NOT NULL
 * - 2200_221684_3_not_null: order_tree IS NOT NULL
 * - 2200_221684_7_not_null: type IS NOT NULL
 * - 2200_221684_9_not_null: modified_at IS NOT NULL
 * - 2200_221684_6_not_null: is_mandatory IS NOT NULL
 * - 2200_221684_2_not_null: archived IS NOT NULL
 * - 2200_221684_16_not_null: checklists_id IS NOT NULL
 * - 2200_221684_10_not_null: created_by IS NOT NULL
 * - 2200_221684_11_not_null: modified_by IS NOT NULL
 * - 2200_221684_14_not_null: validations IS NOT NULL
 * - 2200_221684_4_not_null: data IS NOT NULL
 * - 2200_221684_8_not_null: created_at IS NOT NULL
 * - 2200_221684_15_not_null: target_entity_type IS NOT NULL
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - tasks_id → tasks.id
 * - checklists_id → checklists.id
 */
public class Parameters implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: archived
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean archived;

    /**
     * Database column: order_tree
     * Type: int4(10) NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: data
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String data;

    /**
     * Database column: label
     * Type: text(2147483647)
     */
    private String label;

    /**
     * Database column: is_mandatory
     * Type: bool(1) NOT NULL
     * Default: false
     */
    private Boolean isMandatory;

    /**
     * Database column: type
     * Type: varchar(20) NOT NULL
     */
    private String type;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: tasks_id
     * Type: int8(19)
     * Foreign Key → tasks.id
     */
    private Long tasksId;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: validations
     * Type: jsonb(2147483647) NOT NULL
     * Default: '{}'::jsonb
     */
    private String validations;

    /**
     * Database column: target_entity_type
     * Type: varchar(50) NOT NULL
     */
    private String targetEntityType;

    /**
     * Database column: checklists_id
     * Type: int8(19) NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: is_auto_initialized
     * Type: bool(1)
     * Default: false
     */
    private Boolean isAutoInitialized;

    /**
     * Database column: auto_initialize
     * Type: jsonb(2147483647)
     */
    private String autoInitialize;

    /**
     * Database column: rules
     * Type: jsonb(2147483647)
     */
    private String rules;

    /**
     * Database column: hidden
     * Type: bool(1)
     * Default: false
     */
    private Boolean hidden;

    /**
     * Database column: verification_type
     * Type: varchar(50) NOT NULL
     * Default: 'NONE'::character varying
     */
    private String verificationType;

    /**
     * Database column: metadata
     * Type: jsonb(2147483647)
     * Default: '{}'::jsonb
     */
    private String metadata;

    /**
     * Default constructor
     */
    public Parameters() {
        // Initialize with default values where applicable
        this.archived = false; // Default value
        this.isMandatory = false; // Default value
        this.isAutoInitialized = false; // Default value
        this.hidden = false; // Default value
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param archived archived
     * @param orderTree order_tree
     * @param data data
     * @param label label
     * @param isMandatory is_mandatory
     * @param type type
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     * @param tasksId tasks_id
     * @param description description
     * @param validations validations
     * @param targetEntityType target_entity_type
     * @param checklistsId checklists_id
     * @param isAutoInitialized is_auto_initialized
     * @param autoInitialize auto_initialize
     * @param rules rules
     * @param hidden hidden
     * @param verificationType verification_type
     * @param metadata metadata
     */
    public Parameters(Long id, Boolean archived, Integer orderTree, String data, String label, Boolean isMandatory, String type, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy, Long tasksId, String description, String validations, String targetEntityType, Long checklistsId, Boolean isAutoInitialized, String autoInitialize, String rules, Boolean hidden, String verificationType, String metadata) {
        this.id = id;
        this.archived = archived;
        this.orderTree = orderTree;
        this.data = data;
        this.label = label;
        this.isMandatory = isMandatory;
        this.type = type;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
        this.tasksId = tasksId;
        this.description = description;
        this.validations = validations;
        this.targetEntityType = targetEntityType;
        this.checklistsId = checklistsId;
        this.isAutoInitialized = isAutoInitialized;
        this.autoInitialize = autoInitialize;
        this.rules = rules;
        this.hidden = hidden;
        this.verificationType = verificationType;
        this.metadata = metadata;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of archived
     * @return Boolean value of archived
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets the value of archived
     * @param archived new value for archived
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets the value of order_tree
     * @return Integer value of order_tree
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets the value of order_tree
     * @param orderTree new value for order_tree
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null (NOT NULL constraint)");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets the value of data
     * @return String value of data
     */
    public String getData() {
        return this.data;
    }

    /**
     * Sets the value of data
     * @param data new value for data
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setData(String data) {
        if (data == null) {
            throw new IllegalArgumentException("data cannot be null (NOT NULL constraint)");
        }
        this.data = data;
    }

    /**
     * Gets the value of label
     * @return String value of label
     */
    public String getLabel() {
        return this.label;
    }

    /**
     * Sets the value of label
     * @param label new value for label
     */
    public void setLabel(String label) {
        this.label = label;
    }

    /**
     * Gets the value of is_mandatory
     * @return Boolean value of is_mandatory
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets the value of is_mandatory
     * @param isMandatory new value for is_mandatory
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setIsMandatory(Boolean isMandatory) {
        this.isMandatory = isMandatory;
    }

    /**
     * Gets the value of type
     * @return String value of type
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets the value of type
     * @param type new value for type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null (NOT NULL constraint)");
        }
        this.type = type;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of tasks_id
     * @return Long value of tasks_id
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets the value of tasks_id
     * @param tasksId new value for tasks_id
     */
    public void setTasksId(Long tasksId) {
        this.tasksId = tasksId;
    }

    /**
     * Gets the value of description
     * @return String value of description
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets the value of description
     * @param description new value for description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the value of validations
     * @return String value of validations
     */
    public String getValidations() {
        return this.validations;
    }

    /**
     * Sets the value of validations
     * @param validations new value for validations
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setValidations(String validations) {
        if (validations == null) {
            throw new IllegalArgumentException("validations cannot be null (NOT NULL constraint)");
        }
        this.validations = validations;
    }

    /**
     * Gets the value of target_entity_type
     * @return String value of target_entity_type
     */
    public String getTargetEntityType() {
        return this.targetEntityType;
    }

    /**
     * Sets the value of target_entity_type
     * @param targetEntityType new value for target_entity_type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setTargetEntityType(String targetEntityType) {
        if (targetEntityType == null) {
            throw new IllegalArgumentException("target_entity_type cannot be null (NOT NULL constraint)");
        }
        this.targetEntityType = targetEntityType;
    }

    /**
     * Gets the value of checklists_id
     * @return Long value of checklists_id
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets the value of checklists_id
     * @param checklistsId new value for checklists_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null (NOT NULL constraint)");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets the value of is_auto_initialized
     * @return Boolean value of is_auto_initialized
     */
    public Boolean getIsAutoInitialized() {
        return this.isAutoInitialized;
    }

    /**
     * Sets the value of is_auto_initialized
     * @param isAutoInitialized new value for is_auto_initialized
     */
    public void setIsAutoInitialized(Boolean isAutoInitialized) {
        this.isAutoInitialized = isAutoInitialized;
    }

    /**
     * Gets the value of auto_initialize
     * @return String value of auto_initialize
     */
    public String getAutoInitialize() {
        return this.autoInitialize;
    }

    /**
     * Sets the value of auto_initialize
     * @param autoInitialize new value for auto_initialize
     */
    public void setAutoInitialize(String autoInitialize) {
        this.autoInitialize = autoInitialize;
    }

    /**
     * Gets the value of rules
     * @return String value of rules
     */
    public String getRules() {
        return this.rules;
    }

    /**
     * Sets the value of rules
     * @param rules new value for rules
     */
    public void setRules(String rules) {
        this.rules = rules;
    }

    /**
     * Gets the value of hidden
     * @return Boolean value of hidden
     */
    public Boolean getHidden() {
        return this.hidden;
    }

    /**
     * Sets the value of hidden
     * @param hidden new value for hidden
     */
    public void setHidden(Boolean hidden) {
        this.hidden = hidden;
    }

    /**
     * Gets the value of verification_type
     * @return String value of verification_type
     */
    public String getVerificationType() {
        return this.verificationType;
    }

    /**
     * Sets the value of verification_type
     * @param verificationType new value for verification_type
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setVerificationType(String verificationType) {
        if (verificationType == null) {
            throw new IllegalArgumentException("verification_type cannot be null (NOT NULL constraint)");
        }
        this.verificationType = verificationType;
    }

    /**
     * Gets the value of metadata
     * @return String value of metadata
     */
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Sets the value of metadata
     * @param metadata new value for metadata
     */
    public void setMetadata(String metadata) {
        this.metadata = metadata;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.archived == null) {
            violations.add("archived cannot be null");
        }
        if (this.orderTree == null) {
            violations.add("order_tree cannot be null");
        }
        if (this.data == null) {
            violations.add("data cannot be null");
        }
        if (this.isMandatory == null) {
            violations.add("is_mandatory cannot be null");
        }
        if (this.type == null) {
            violations.add("type cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        if (this.validations == null) {
            violations.add("validations cannot be null");
        }
        if (this.targetEntityType == null) {
            violations.add("target_entity_type cannot be null");
        }
        if (this.checklistsId == null) {
            violations.add("checklists_id cannot be null");
        }
        if (this.verificationType == null) {
            violations.add("verification_type cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Parameters other = (Parameters) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "Parameters{" +
                "id=" + id +
                ", archived=" + archived +
                ", orderTree=" + orderTree +
                ", data=" + data +
                ", label=" + label +
                ", isMandatory=" + isMandatory +
                ", type=" + type +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", tasksId=" + tasksId +
                ", description=" + description +
                ", validations=" + validations +
                ", targetEntityType=" + targetEntityType +
                ", checklistsId=" + checklistsId +
                ", isAutoInitialized=" + isAutoInitialized +
                ", autoInitialize=" + autoInitialize +
                ", rules=" + rules +
                ", hidden=" + hidden +
                ", verificationType=" + verificationType +
                ", metadata=" + metadata +
                '}';
    }
}
