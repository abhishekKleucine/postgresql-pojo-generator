package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: email_audits
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: email_audits
 * - Primary Keys: id
 * 
 * Check Constraints:
 * - 2200_221538_10_not_null: created_on IS NOT NULL
 * - 2200_221538_1_not_null: id IS NOT NULL
 * - 2200_221538_2_not_null: from_address IS NOT NULL
 */
public class EmailAudits implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: from_address
     * Type: text(2147483647) NOT NULL
     */
    private String fromAddress;

    /**
     * Database column: to_addresses
     * Type: _text(2147483647)
     */
    private String toAddresses;

    /**
     * Database column: body
     * Type: text(2147483647)
     */
    private String body;

    /**
     * Database column: subject
     * Type: text(2147483647)
     */
    private String subject;

    /**
     * Database column: cc
     * Type: _text(2147483647)
     */
    private String cc;

    /**
     * Database column: bcc
     * Type: _text(2147483647)
     */
    private String bcc;

    /**
     * Database column: retry_attempts
     * Type: int2(5)
     */
    private String retryAttempts;

    /**
     * Database column: max_attempts
     * Type: int2(5)
     */
    private String maxAttempts;

    /**
     * Database column: created_on
     * Type: int8(19) NOT NULL
     */
    private Long createdOn;

    /**
     * Database column: message_id
     * Type: text(2147483647)
     */
    private String messageId;

    /**
     * Default constructor
     */
    public EmailAudits() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param fromAddress from_address
     * @param toAddresses to_addresses
     * @param body body
     * @param subject subject
     * @param cc cc
     * @param bcc bcc
     * @param retryAttempts retry_attempts
     * @param maxAttempts max_attempts
     * @param createdOn created_on
     * @param messageId message_id
     */
    public EmailAudits(Long id, String fromAddress, String toAddresses, String body, String subject, String cc, String bcc, String retryAttempts, String maxAttempts, Long createdOn, String messageId) {
        this.id = id;
        this.fromAddress = fromAddress;
        this.toAddresses = toAddresses;
        this.body = body;
        this.subject = subject;
        this.cc = cc;
        this.bcc = bcc;
        this.retryAttempts = retryAttempts;
        this.maxAttempts = maxAttempts;
        this.createdOn = createdOn;
        this.messageId = messageId;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of from_address
     * @return String value of from_address
     */
    public String getFromAddress() {
        return this.fromAddress;
    }

    /**
     * Sets the value of from_address
     * @param fromAddress new value for from_address
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setFromAddress(String fromAddress) {
        if (fromAddress == null) {
            throw new IllegalArgumentException("from_address cannot be null (NOT NULL constraint)");
        }
        this.fromAddress = fromAddress;
    }

    /**
     * Gets the value of to_addresses
     * @return String value of to_addresses
     */
    public String getToAddresses() {
        return this.toAddresses;
    }

    /**
     * Sets the value of to_addresses
     * @param toAddresses new value for to_addresses
     */
    public void setToAddresses(String toAddresses) {
        this.toAddresses = toAddresses;
    }

    /**
     * Gets the value of body
     * @return String value of body
     */
    public String getBody() {
        return this.body;
    }

    /**
     * Sets the value of body
     * @param body new value for body
     */
    public void setBody(String body) {
        this.body = body;
    }

    /**
     * Gets the value of subject
     * @return String value of subject
     */
    public String getSubject() {
        return this.subject;
    }

    /**
     * Sets the value of subject
     * @param subject new value for subject
     */
    public void setSubject(String subject) {
        this.subject = subject;
    }

    /**
     * Gets the value of cc
     * @return String value of cc
     */
    public String getCc() {
        return this.cc;
    }

    /**
     * Sets the value of cc
     * @param cc new value for cc
     */
    public void setCc(String cc) {
        this.cc = cc;
    }

    /**
     * Gets the value of bcc
     * @return String value of bcc
     */
    public String getBcc() {
        return this.bcc;
    }

    /**
     * Sets the value of bcc
     * @param bcc new value for bcc
     */
    public void setBcc(String bcc) {
        this.bcc = bcc;
    }

    /**
     * Gets the value of retry_attempts
     * @return String value of retry_attempts
     */
    public String getRetryAttempts() {
        return this.retryAttempts;
    }

    /**
     * Sets the value of retry_attempts
     * @param retryAttempts new value for retry_attempts
     */
    public void setRetryAttempts(String retryAttempts) {
        this.retryAttempts = retryAttempts;
    }

    /**
     * Gets the value of max_attempts
     * @return String value of max_attempts
     */
    public String getMaxAttempts() {
        return this.maxAttempts;
    }

    /**
     * Sets the value of max_attempts
     * @param maxAttempts new value for max_attempts
     */
    public void setMaxAttempts(String maxAttempts) {
        this.maxAttempts = maxAttempts;
    }

    /**
     * Gets the value of created_on
     * @return Long value of created_on
     */
    public Long getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Sets the value of created_on
     * @param createdOn new value for created_on
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedOn(Long createdOn) {
        if (createdOn == null) {
            throw new IllegalArgumentException("created_on cannot be null (NOT NULL constraint)");
        }
        this.createdOn = createdOn;
    }

    /**
     * Gets the value of message_id
     * @return String value of message_id
     */
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Sets the value of message_id
     * @param messageId new value for message_id
     */
    public void setMessageId(String messageId) {
        this.messageId = messageId;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.fromAddress == null) {
            violations.add("from_address cannot be null");
        }
        if (this.createdOn == null) {
            violations.add("created_on cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        EmailAudits other = (EmailAudits) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "EmailAudits{" +
                "id=" + id +
                ", fromAddress=" + fromAddress +
                ", toAddresses=" + toAddresses +
                ", body=" + body +
                ", subject=" + subject +
                ", cc=" + cc +
                ", bcc=" + bcc +
                ", retryAttempts=" + retryAttempts +
                ", maxAttempts=" + maxAttempts +
                ", createdOn=" + createdOn +
                ", messageId=" + messageId +
                '}';
    }
}
