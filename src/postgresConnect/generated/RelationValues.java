package postgresConnect.generated;

import java.io.Serializable;
import java.util.Objects;

/**
 * Advanced POJO class for table: relation_values
 * Generated by AdvancedPojoBatchGenerator
 * Includes: Primary Keys, Foreign Keys, Indexes, Check Constraints, Unique Constraints, Default Values
 * 
 * Table Information:
 * - Table Name: relation_values
 * - Primary Keys: id
 * 
 * Indexes:
 * - pkp32qjbpeex1d3zpvhx66 (UNIQUE): id
 * 
 * Check Constraints:
 * - 2200_221779_1_not_null: id IS NOT NULL
 * - 2200_221779_4_not_null: object_id IS NOT NULL
 * - 2200_221779_11_not_null: modified_at IS NOT NULL
 * - 2200_221779_7_not_null: object_display_name IS NOT NULL
 * - 2200_221779_5_not_null: object_external_id IS NOT NULL
 * - 2200_221779_8_not_null: object_type_external_id IS NOT NULL
 * - 2200_221779_9_not_null: object_type_display_name IS NOT NULL
 * - 2200_221779_6_not_null: collection IS NOT NULL
 * - 2200_221779_13_not_null: modified_by IS NOT NULL
 * - 2200_221779_10_not_null: created_at IS NOT NULL
 * - 2200_221779_12_not_null: created_by IS NOT NULL
 * - 2200_221779_2_not_null: jobs_id IS NOT NULL
 * - 2200_221779_3_not_null: relations_id IS NOT NULL
 * 
 * Foreign Keys:
 * - jobs_id → jobs.id
 * - relations_id → relations.id
 */
public class RelationValues implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8(19) NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: jobs_id
     * Type: int8(19) NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: relations_id
     * Type: int8(19) NOT NULL
     * Foreign Key → relations.id
     */
    private Long relationsId;

    /**
     * Database column: object_id
     * Type: varchar(50) NOT NULL
     */
    private String objectId;

    /**
     * Database column: object_external_id
     * Type: varchar(255) NOT NULL
     */
    private String objectExternalId;

    /**
     * Database column: collection
     * Type: varchar(255) NOT NULL
     */
    private String collection;

    /**
     * Database column: object_display_name
     * Type: varchar(255) NOT NULL
     */
    private String objectDisplayName;

    /**
     * Database column: object_type_external_id
     * Type: varchar(255) NOT NULL
     */
    private String objectTypeExternalId;

    /**
     * Database column: object_type_display_name
     * Type: varchar(255) NOT NULL
     */
    private String objectTypeDisplayName;

    /**
     * Database column: created_at
     * Type: int8(19) NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8(19) NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8(19) NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8(19) NOT NULL
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public RelationValues() {
        // Initialize with default values where applicable
    }

    /**
     * Constructor with parameters
     * @param id id
     * @param jobsId jobs_id
     * @param relationsId relations_id
     * @param objectId object_id
     * @param objectExternalId object_external_id
     * @param collection collection
     * @param objectDisplayName object_display_name
     * @param objectTypeExternalId object_type_external_id
     * @param objectTypeDisplayName object_type_display_name
     * @param createdAt created_at
     * @param modifiedAt modified_at
     * @param createdBy created_by
     * @param modifiedBy modified_by
     */
    public RelationValues(Long id, Long jobsId, Long relationsId, String objectId, String objectExternalId, String collection, String objectDisplayName, String objectTypeExternalId, String objectTypeDisplayName, Long createdAt, Long modifiedAt, Long createdBy, Long modifiedBy) {
        this.id = id;
        this.jobsId = jobsId;
        this.relationsId = relationsId;
        this.objectId = objectId;
        this.objectExternalId = objectExternalId;
        this.collection = collection;
        this.objectDisplayName = objectDisplayName;
        this.objectTypeExternalId = objectTypeExternalId;
        this.objectTypeDisplayName = objectTypeDisplayName;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.createdBy = createdBy;
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets the value of id
     * @return Long value of id
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets the value of id
     * @param id new value for id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null (NOT NULL constraint)");
        }
        this.id = id;
    }

    /**
     * Gets the value of jobs_id
     * @return Long value of jobs_id
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets the value of jobs_id
     * @param jobsId new value for jobs_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null (NOT NULL constraint)");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets the value of relations_id
     * @return Long value of relations_id
     */
    public Long getRelationsId() {
        return this.relationsId;
    }

    /**
     * Sets the value of relations_id
     * @param relationsId new value for relations_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setRelationsId(Long relationsId) {
        if (relationsId == null) {
            throw new IllegalArgumentException("relations_id cannot be null (NOT NULL constraint)");
        }
        this.relationsId = relationsId;
    }

    /**
     * Gets the value of object_id
     * @return String value of object_id
     */
    public String getObjectId() {
        return this.objectId;
    }

    /**
     * Sets the value of object_id
     * @param objectId new value for object_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setObjectId(String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("object_id cannot be null (NOT NULL constraint)");
        }
        this.objectId = objectId;
    }

    /**
     * Gets the value of object_external_id
     * @return String value of object_external_id
     */
    public String getObjectExternalId() {
        return this.objectExternalId;
    }

    /**
     * Sets the value of object_external_id
     * @param objectExternalId new value for object_external_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setObjectExternalId(String objectExternalId) {
        if (objectExternalId == null) {
            throw new IllegalArgumentException("object_external_id cannot be null (NOT NULL constraint)");
        }
        this.objectExternalId = objectExternalId;
    }

    /**
     * Gets the value of collection
     * @return String value of collection
     */
    public String getCollection() {
        return this.collection;
    }

    /**
     * Sets the value of collection
     * @param collection new value for collection
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCollection(String collection) {
        if (collection == null) {
            throw new IllegalArgumentException("collection cannot be null (NOT NULL constraint)");
        }
        this.collection = collection;
    }

    /**
     * Gets the value of object_display_name
     * @return String value of object_display_name
     */
    public String getObjectDisplayName() {
        return this.objectDisplayName;
    }

    /**
     * Sets the value of object_display_name
     * @param objectDisplayName new value for object_display_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setObjectDisplayName(String objectDisplayName) {
        if (objectDisplayName == null) {
            throw new IllegalArgumentException("object_display_name cannot be null (NOT NULL constraint)");
        }
        this.objectDisplayName = objectDisplayName;
    }

    /**
     * Gets the value of object_type_external_id
     * @return String value of object_type_external_id
     */
    public String getObjectTypeExternalId() {
        return this.objectTypeExternalId;
    }

    /**
     * Sets the value of object_type_external_id
     * @param objectTypeExternalId new value for object_type_external_id
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setObjectTypeExternalId(String objectTypeExternalId) {
        if (objectTypeExternalId == null) {
            throw new IllegalArgumentException("object_type_external_id cannot be null (NOT NULL constraint)");
        }
        this.objectTypeExternalId = objectTypeExternalId;
    }

    /**
     * Gets the value of object_type_display_name
     * @return String value of object_type_display_name
     */
    public String getObjectTypeDisplayName() {
        return this.objectTypeDisplayName;
    }

    /**
     * Sets the value of object_type_display_name
     * @param objectTypeDisplayName new value for object_type_display_name
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setObjectTypeDisplayName(String objectTypeDisplayName) {
        if (objectTypeDisplayName == null) {
            throw new IllegalArgumentException("object_type_display_name cannot be null (NOT NULL constraint)");
        }
        this.objectTypeDisplayName = objectTypeDisplayName;
    }

    /**
     * Gets the value of created_at
     * @return Long value of created_at
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets the value of created_at
     * @param createdAt new value for created_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null (NOT NULL constraint)");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets the value of modified_at
     * @return Long value of modified_at
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets the value of modified_at
     * @param modifiedAt new value for modified_at
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null (NOT NULL constraint)");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets the value of created_by
     * @return Long value of created_by
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets the value of created_by
     * @param createdBy new value for created_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null (NOT NULL constraint)");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets the value of modified_by
     * @return Long value of modified_by
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets the value of modified_by
     * @param modifiedBy new value for modified_by
     * @throws IllegalArgumentException if value is null (NOT NULL constraint)
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null (NOT NULL constraint)");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Validates all constraints for this object
     * @return List of constraint violations (empty if valid)
     */
    public java.util.List<String> validateConstraints() {
        java.util.List<String> violations = new java.util.ArrayList<>();
        if (this.id == null) {
            violations.add("id cannot be null");
        }
        if (this.jobsId == null) {
            violations.add("jobs_id cannot be null");
        }
        if (this.relationsId == null) {
            violations.add("relations_id cannot be null");
        }
        if (this.objectId == null) {
            violations.add("object_id cannot be null");
        }
        if (this.objectExternalId == null) {
            violations.add("object_external_id cannot be null");
        }
        if (this.collection == null) {
            violations.add("collection cannot be null");
        }
        if (this.objectDisplayName == null) {
            violations.add("object_display_name cannot be null");
        }
        if (this.objectTypeExternalId == null) {
            violations.add("object_type_external_id cannot be null");
        }
        if (this.objectTypeDisplayName == null) {
            violations.add("object_type_display_name cannot be null");
        }
        if (this.createdAt == null) {
            violations.add("created_at cannot be null");
        }
        if (this.modifiedAt == null) {
            violations.add("modified_at cannot be null");
        }
        if (this.createdBy == null) {
            violations.add("created_by cannot be null");
        }
        if (this.modifiedBy == null) {
            violations.add("modified_by cannot be null");
        }
        return violations;
    }

    /**
     * Compares this object with another for equality
     * @param obj the object to compare with
     * @return true if objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        RelationValues other = (RelationValues) obj;
        return Objects.equals(this.id, other.id);
    }

    /**
     * Generates hash code for this object
     * @return hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    /**
     * Returns string representation of this object
     * @return string representation
     */
    @Override
    public String toString() {
        return "RelationValues{" +
                "id=" + id +
                ", jobsId=" + jobsId +
                ", relationsId=" + relationsId +
                ", objectId=" + objectId +
                ", objectExternalId=" + objectExternalId +
                ", collection=" + collection +
                ", objectDisplayName=" + objectDisplayName +
                ", objectTypeExternalId=" + objectTypeExternalId +
                ", objectTypeDisplayName=" + objectTypeDisplayName +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
