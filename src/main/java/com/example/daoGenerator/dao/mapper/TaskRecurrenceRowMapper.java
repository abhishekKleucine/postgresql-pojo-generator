package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.TaskRecurrence;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Enhanced row mapper for TaskRecurrence entity
 * Generated by Enhanced JDBC DAO Generator
 */
public class TaskRecurrenceRowMapper implements RowMapper<TaskRecurrence> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public TaskRecurrence mapRow(ResultSet rs, int rowNum) throws SQLException {
        TaskRecurrence entity = new TaskRecurrence();

        String negativeDueDateToleranceDurationJson = rs.getString("negative_due_date_tolerance_duration");
        if (negativeDueDateToleranceDurationJson != null) {
            entity.setNegativeDueDateToleranceDuration(parseJsonNode(negativeDueDateToleranceDurationJson));
        }
        entity.setPositiveStartDateToleranceInterval(rs.getInt("positive_start_date_tolerance_interval"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        String positiveStartDateToleranceDurationJson = rs.getString("positive_start_date_tolerance_duration");
        if (positiveStartDateToleranceDurationJson != null) {
            entity.setPositiveStartDateToleranceDuration(parseJsonNode(positiveStartDateToleranceDurationJson));
        }
        entity.setNegativeDueDateToleranceInterval(rs.getInt("negative_due_date_tolerance_interval"));
        String negativeStartDateToleranceDurationJson = rs.getString("negative_start_date_tolerance_duration");
        if (negativeStartDateToleranceDurationJson != null) {
            entity.setNegativeStartDateToleranceDuration(parseJsonNode(negativeStartDateToleranceDurationJson));
        }
        String startDateDurationJson = rs.getString("start_date_duration");
        if (startDateDurationJson != null) {
            entity.setStartDateDuration(parseJsonNode(startDateDurationJson));
        }
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setPositiveDueDateToleranceInterval(rs.getInt("positive_due_date_tolerance_interval"));
        entity.setStartDateInterval(rs.getInt("start_date_interval"));
        entity.setCreatedBy(rs.getLong("created_by"));
        String dueDateDurationJson = rs.getString("due_date_duration");
        if (dueDateDurationJson != null) {
            entity.setDueDateDuration(parseJsonNode(dueDateDurationJson));
        }
        String positiveDueDateToleranceDurationJson = rs.getString("positive_due_date_tolerance_duration");
        if (positiveDueDateToleranceDurationJson != null) {
            entity.setPositiveDueDateToleranceDuration(parseJsonNode(positiveDueDateToleranceDurationJson));
        }
        entity.setDueDateInterval(rs.getInt("due_date_interval"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setId(rs.getLong("id"));
        entity.setNegativeStartDateToleranceInterval(rs.getInt("negative_start_date_tolerance_interval"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
