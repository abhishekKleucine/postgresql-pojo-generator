package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.Automations;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Row mapper for Automations entity
 * Generated by JDBC DAO Generator
 */
public class AutomationsRowMapper implements RowMapper<Automations> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public Automations mapRow(ResultSet rs, int rowNum) throws SQLException {
        Automations entity = new Automations();

        entity.setActionType(rs.getString("action_type"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setArchived(rs.getBoolean("archived"));
        entity.setTargetEntityType(rs.getString("target_entity_type"));
        entity.setCreatedBy(rs.getLong("created_by"));
        String triggerDetailsJson = rs.getString("trigger_details");
        if (triggerDetailsJson != null) {
            entity.setTriggerDetails(parseJsonNode(triggerDetailsJson));
        }
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setId(rs.getLong("id"));
        entity.setTriggerType(rs.getString("trigger_type"));
        String actionDetailsJson = rs.getString("action_details");
        if (actionDetailsJson != null) {
            entity.setActionDetails(parseJsonNode(actionDetailsJson));
        }
        entity.setType(rs.getString("type"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
