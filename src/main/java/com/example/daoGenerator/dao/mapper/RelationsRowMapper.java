package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.Relations;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Enhanced row mapper for Relations entity
 * Generated by Enhanced JDBC DAO Generator
 */
public class RelationsRowMapper implements RowMapper<Relations> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public Relations mapRow(ResultSet rs, int rowNum) throws SQLException {
        Relations entity = new Relations();

        String variablesJson = rs.getString("variables");
        if (variablesJson != null) {
            entity.setVariables(parseJsonNode(variablesJson));
        }
        entity.setObjectTypeId(rs.getString("object_type_id"));
        entity.setOrderTree(rs.getInt("order_tree"));
        entity.setDisplayName(rs.getString("display_name"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setExternalId(rs.getString("external_id"));
        entity.setChecklistsId(rs.getLong("checklists_id"));
        entity.setCollection(rs.getString("collection"));
        entity.setUrlPath(rs.getString("url_path"));
        entity.setCardinality(rs.getString("cardinality"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setCreatedBy(rs.getLong("created_by"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setId(rs.getLong("id"));
        String validationsJson = rs.getString("validations");
        if (validationsJson != null) {
            entity.setValidations(parseJsonNode(validationsJson));
        }
        entity.setIsMandatory(rs.getBoolean("is_mandatory"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
