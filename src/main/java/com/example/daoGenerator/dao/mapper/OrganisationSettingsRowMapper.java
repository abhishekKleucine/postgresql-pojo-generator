package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.OrganisationSettings;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Row mapper for OrganisationSettings entity
 * Generated by JDBC DAO Generator
 */
public class OrganisationSettingsRowMapper implements RowMapper<OrganisationSettings> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public OrganisationSettings mapRow(ResultSet rs, int rowNum) throws SQLException {
        OrganisationSettings entity = new OrganisationSettings();

        entity.setAutoUnlockAfter(rs.getInt("auto_unlock_after"));
        entity.setOrganisationsId(rs.getLong("organisations_id"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setRegistrationTokenExpiration(rs.getInt("registration_token_expiration"));
        String extrasJson = rs.getString("extras");
        if (extrasJson != null) {
            entity.setExtras(parseJsonNode(extrasJson));
        }
        entity.setLogoUrl(rs.getString("logo_url"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setMaxFailedChallengeQuestionAttempts(rs.getInt("max_failed_challenge_question_attempts"));
        entity.setSessionIdleTimeout(rs.getInt("session_idle_timeout"));
        entity.setMaxFailedAdditionalVerificationAttempts(rs.getInt("max_failed_additional_verification_attempts"));
        entity.setCreatedBy(rs.getLong("created_by"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setMaxFailedLoginAttempts(rs.getInt("max_failed_login_attempts"));
        entity.setId(rs.getLong("id"));
        entity.setPasswordResetTokenExpiration(rs.getInt("password_reset_token_expiration"));
        String featureFlagsJson = rs.getString("feature_flags");
        if (featureFlagsJson != null) {
            entity.setFeatureFlags(parseJsonNode(featureFlagsJson));
        }

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
