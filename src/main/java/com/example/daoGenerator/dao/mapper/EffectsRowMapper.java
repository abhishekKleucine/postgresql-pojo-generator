package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.Effects;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Enhanced row mapper for Effects entity
 * Generated by Enhanced JDBC DAO Generator
 */
public class EffectsRowMapper implements RowMapper<Effects> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public Effects mapRow(ResultSet rs, int rowNum) throws SQLException {
        Effects entity = new Effects();

        String apiPayloadJson = rs.getString("api_payload");
        if (apiPayloadJson != null) {
            entity.setApiPayload(parseJsonNode(apiPayloadJson));
        }
        entity.setOrderTree(rs.getInt("order_tree"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        String queryJson = rs.getString("query");
        if (queryJson != null) {
            entity.setQuery(parseJsonNode(queryJson));
        }
        entity.setDescription(rs.getString("description"));
        entity.setActionsId(rs.getLong("actions_id"));
        entity.setType(rs.getString("type"));
        entity.setApiMethod(rs.getString("api_method"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setArchived(rs.getBoolean("archived"));
        String apiEndpointJson = rs.getString("api_endpoint");
        if (apiEndpointJson != null) {
            entity.setApiEndpoint(parseJsonNode(apiEndpointJson));
        }
        String apiHeadersJson = rs.getString("api_headers");
        if (apiHeadersJson != null) {
            entity.setApiHeaders(parseJsonNode(apiHeadersJson));
        }
        entity.setCreatedBy(rs.getLong("created_by"));
        entity.setName(rs.getString("name"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setJavascriptEnabled(rs.getBoolean("javascript_enabled"));
        entity.setId(rs.getLong("id"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
