package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.Exceptions;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Row mapper for Exceptions entity
 * Generated by JDBC DAO Generator
 */
public class ExceptionsRowMapper implements RowMapper<Exceptions> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public Exceptions mapRow(ResultSet rs, int rowNum) throws SQLException {
        Exceptions entity = new Exceptions();

        entity.setReviewersReason(rs.getString("reviewers_reason"));
        entity.setReason(rs.getString("reason"));
        entity.setFacilitiesId(rs.getLong("facilities_id"));
        entity.setCode(rs.getString("code"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setInitiatorsReason(rs.getString("initiators_reason"));
        entity.setPreviousState(rs.getString("previous_state"));
        entity.setParameterValuesId(rs.getLong("parameter_values_id"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setCreatedBy(rs.getLong("created_by"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setId(rs.getLong("id"));
        entity.setTaskExecutionsId(rs.getLong("task_executions_id"));
        String choicesJson = rs.getString("choices");
        if (choicesJson != null) {
            entity.setChoices(parseJsonNode(choicesJson));
        }
        entity.setRulesId(rs.getString("rules_id"));
        entity.setValue(rs.getString("value"));
        entity.setJobsId(rs.getLong("jobs_id"));
        entity.setStatus(rs.getString("status"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
