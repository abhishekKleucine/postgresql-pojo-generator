package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.Corrections;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Enhanced row mapper for Corrections entity
 * Generated by Enhanced JDBC DAO Generator
 */
public class CorrectionsRowMapper implements RowMapper<Corrections> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public Corrections mapRow(ResultSet rs, int rowNum) throws SQLException {
        Corrections entity = new Corrections();

        entity.setReviewersReason(rs.getString("reviewers_reason"));
        entity.setNewValue(rs.getString("new_value"));
        entity.setFacilitiesId(rs.getLong("facilities_id"));
        entity.setCode(rs.getString("code"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setCorrectorsReason(rs.getString("correctors_reason"));
        entity.setInitiatorsReason(rs.getString("initiators_reason"));
        entity.setPreviousState(rs.getString("previous_state"));
        entity.setParameterValuesId(rs.getLong("parameter_values_id"));
        entity.setCreatedAt(rs.getLong("created_at"));
        String newChoicesJson = rs.getString("new_choices");
        if (newChoicesJson != null) {
            entity.setNewChoices(parseJsonNode(newChoicesJson));
        }
        entity.setCreatedBy(rs.getLong("created_by"));
        String oldChoicesJson = rs.getString("old_choices");
        if (oldChoicesJson != null) {
            entity.setOldChoices(parseJsonNode(oldChoicesJson));
        }
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setId(rs.getLong("id"));
        entity.setOldValue(rs.getString("old_value"));
        entity.setTaskExecutionsId(rs.getLong("task_executions_id"));
        entity.setJobsId(rs.getLong("jobs_id"));
        entity.setStatus(rs.getString("status"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
