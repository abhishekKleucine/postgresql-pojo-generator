package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.Parameters;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Enhanced row mapper for Parameters entity
 * Generated by Enhanced JDBC DAO Generator
 */
public class ParametersRowMapper implements RowMapper<Parameters> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public Parameters mapRow(ResultSet rs, int rowNum) throws SQLException {
        Parameters entity = new Parameters();

        String metadataJson = rs.getString("metadata");
        if (metadataJson != null) {
            entity.setMetadata(parseJsonNode(metadataJson));
        }
        String dataJson = rs.getString("data");
        if (dataJson != null) {
            entity.setData(parseJsonNode(dataJson));
        }
        entity.setHidden(rs.getBoolean("hidden"));
        entity.setOrderTree(rs.getInt("order_tree"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setDescription(rs.getString("description"));
        entity.setChecklistsId(rs.getLong("checklists_id"));
        String rulesJson = rs.getString("rules");
        if (rulesJson != null) {
            entity.setRules(parseJsonNode(rulesJson));
        }
        entity.setLabel(rs.getString("label"));
        entity.setType(rs.getString("type"));
        String autoInitializeJson = rs.getString("auto_initialize");
        if (autoInitializeJson != null) {
            entity.setAutoInitialize(parseJsonNode(autoInitializeJson));
        }
        entity.setArchived(rs.getBoolean("archived"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setCreatedBy(rs.getLong("created_by"));
        entity.setTargetEntityType(rs.getString("target_entity_type"));
        entity.setTasksId(rs.getLong("tasks_id"));
        entity.setIsAutoInitialized(rs.getBoolean("is_auto_initialized"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setVerificationType(rs.getString("verification_type"));
        entity.setId(rs.getLong("id"));
        String validationsJson = rs.getString("validations");
        if (validationsJson != null) {
            entity.setValidations(parseJsonNode(validationsJson));
        }
        entity.setIsMandatory(rs.getBoolean("is_mandatory"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
