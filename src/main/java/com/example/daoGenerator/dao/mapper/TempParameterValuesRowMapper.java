package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.TempParameterValues;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Row mapper for TempParameterValues entity
 * Generated by JDBC DAO Generator
 */
public class TempParameterValuesRowMapper implements RowMapper<TempParameterValues> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public TempParameterValues mapRow(ResultSet rs, int rowNum) throws SQLException {
        TempParameterValues entity = new TempParameterValues();

        entity.setReason(rs.getString("reason"));
        entity.setHidden(rs.getBoolean("hidden"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setVerified(rs.getBoolean("verified"));
        entity.setParametersId(rs.getLong("parameters_id"));
        entity.setClientEpoch(rs.getLong("client_epoch"));
        entity.setVersion(rs.getLong("version"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setCreatedBy(rs.getLong("created_by"));
        entity.setHasVariations(rs.getBoolean("has_variations"));
        String impactedByJson = rs.getString("impacted_by");
        if (impactedByJson != null) {
            entity.setImpactedBy(parseJsonNode(impactedByJson));
        }
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setId(rs.getLong("id"));
        entity.setState(rs.getString("state"));
        entity.setTaskExecutionsId(rs.getLong("task_executions_id"));
        String choicesJson = rs.getString("choices");
        if (choicesJson != null) {
            entity.setChoices(parseJsonNode(choicesJson));
        }
        entity.setValue(rs.getString("value"));
        entity.setJobsId(rs.getLong("jobs_id"));
        entity.setParameterValueApprovalId(rs.getLong("parameter_value_approval_id"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
