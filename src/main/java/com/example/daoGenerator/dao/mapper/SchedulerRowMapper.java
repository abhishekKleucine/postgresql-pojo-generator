package com.example.daoGenerator.dao.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import org.springframework.jdbc.core.RowMapper;
import com.example.pojogenerator.pojos.Scheduler;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Enhanced row mapper for Scheduler entity
 * Generated by Enhanced JDBC DAO Generator
 */
public class SchedulerRowMapper implements RowMapper<Scheduler> {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public Scheduler mapRow(ResultSet rs, int rowNum) throws SQLException {
        Scheduler entity = new Scheduler();

        entity.setExpectedStartDate(rs.getLong("expected_start_date"));
        entity.setFacilitiesId(rs.getLong("facilities_id"));
        entity.setCode(rs.getString("code"));
        String dataJson = rs.getString("data");
        if (dataJson != null) {
            entity.setData(parseJsonNode(dataJson));
        }
        entity.setUseCasesId(rs.getLong("use_cases_id"));
        entity.setModifiedAt(rs.getLong("modified_at"));
        entity.setDescription(rs.getString("description"));
        entity.setChecklistsId(rs.getLong("checklists_id"));
        entity.setIsRepeated(rs.getBoolean("is_repeated"));
        entity.setRecurrenceRule(rs.getString("recurrence_rule"));
        entity.setEnabled(rs.getBoolean("enabled"));
        entity.setArchived(rs.getBoolean("archived"));
        entity.setCreatedAt(rs.getLong("created_at"));
        entity.setChecklistsName(rs.getString("checklists_name"));
        entity.setCreatedBy(rs.getLong("created_by"));
        String dueDateDurationJson = rs.getString("due_date_duration");
        if (dueDateDurationJson != null) {
            entity.setDueDateDuration(parseJsonNode(dueDateDurationJson));
        }
        entity.setDeprecatedAt(rs.getLong("deprecated_at"));
        entity.setName(rs.getString("name"));
        entity.setIsCustomRecurrence(rs.getBoolean("is_custom_recurrence"));
        entity.setDueDateInterval(rs.getInt("due_date_interval"));
        entity.setModifiedBy(rs.getLong("modified_by"));
        entity.setId(rs.getLong("id"));
        entity.setState(rs.getString("state"));
        entity.setVersionsId(rs.getLong("versions_id"));

        return entity;
    }

    private JsonNode parseJsonNode(String json) {
        if (json == null || json.trim().isEmpty()) {
            return null;
        }
        try {
            return objectMapper.readTree(json);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse JSON: " + json, e);
        }
    }
}
