package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.DatabasechangelogDao;
import com.example.pojogenerator.pojos.Databasechangelog;
import com.example.daoGenerator.dao.mapper.DatabasechangelogRowMapper;
import com.example.daoGenerator.dao.sql.DatabasechangelogSql;

/**
 * JDBC implementation of DatabasechangelogDao
 * Generated by JDBC DAO Generator
 */
@Repository
public class JdbcDatabasechangelogDao implements DatabasechangelogDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final DatabasechangelogRowMapper rowMapper;

    public JdbcDatabasechangelogDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new DatabasechangelogRowMapper();
    }

    @Override
    public Optional<Databasechangelog> findById(Long id) {
        try {
            Databasechangelog result = jdbcTemplate.queryForObject(
                DatabasechangelogSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<Databasechangelog> findAll() {
        return jdbcTemplate.query(DatabasechangelogSql.FIND_ALL, rowMapper);
    }

    @Override
    public Databasechangelog save(Databasechangelog entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private Databasechangelog insert(Databasechangelog entity) {
        // Set audit fields
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        // Execute INSERT with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            DatabasechangelogSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private Databasechangelog update(Databasechangelog entity) {
        // Update audit fields
        entity.setModifiedAt(System.currentTimeMillis());

        // Execute UPDATE with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(
            DatabasechangelogSql.UPDATE,
            params
        );

        if (rowsAffected == 0) {
            throw new RuntimeException("Entity with id " + entity.getId() + " not found for update");
        }
        return entity;
    }

    private MapSqlParameterSource createParameterMap(Databasechangelog entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("comments", entity.getComments());
        params.addValue("dateexecuted", entity.getDateexecuted());
        params.addValue("author", entity.getAuthor());
        params.addValue("orderexecuted", entity.getOrderexecuted());
        params.addValue("description", entity.getDescription());
        params.addValue("contexts", entity.getContexts());
        params.addValue("exectype", entity.getExectype());
        params.addValue("liquibase", entity.getLiquibase());
        params.addValue("labels", entity.getLabels());
        params.addValue("filename", entity.getFilename());
        params.addValue("md5sum", entity.getMd5sum());
        params.addValue("deploymentId", entity.getDeploymentId());
        params.addValue("id", entity.getId());
        params.addValue("tag", entity.getTag());

        return params;
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(DatabasechangelogSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            DatabasechangelogSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(DatabasechangelogSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

}
