package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.QrtzJobDetailsDao;
import com.example.pojogenerator.pojos.QrtzJobDetails;
import com.example.daoGenerator.dao.mapper.QrtzJobDetailsRowMapper;
import com.example.daoGenerator.dao.sql.QrtzJobDetailsSql;

/**
 * Enhanced JDBC implementation of QrtzJobDetailsDao
 * Key Type: COMPOSITE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcQrtzJobDetailsDao implements QrtzJobDetailsDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final QrtzJobDetailsRowMapper rowMapper;

    public JdbcQrtzJobDetailsDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new QrtzJobDetailsRowMapper();
    }

    @Override
    public Optional<QrtzJobDetails> findBySchedNameAndJobNameAndJobGroup(String schedName, String jobName, String jobGroup) {
        try {
            QrtzJobDetails result = jdbcTemplate.queryForObject(
                QrtzJobDetailsSql.FIND_BY_SCHED_NAME_AND_JOB_NAME_AND_JOB_GROUP,
                Map.of("schedName", schedName, "jobName", jobName, "jobGroup", jobGroup),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteBySchedNameAndJobNameAndJobGroup(String schedName, String jobName, String jobGroup) {
        jdbcTemplate.update(QrtzJobDetailsSql.DELETE_BY_SCHED_NAME_AND_JOB_NAME_AND_JOB_GROUP, Map.of("schedName", schedName, "jobName", jobName, "jobGroup", jobGroup));
    }

    @Override
    public boolean existsBySchedNameAndJobNameAndJobGroup(String schedName, String jobName, String jobGroup) {
        Integer count = jdbcTemplate.queryForObject(
            QrtzJobDetailsSql.EXISTS_BY_SCHED_NAME_AND_JOB_NAME_AND_JOB_GROUP,
            Map.of("schedName", schedName, "jobName", jobName, "jobGroup", jobGroup),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<QrtzJobDetails> findAll() {
        return jdbcTemplate.query(QrtzJobDetailsSql.FIND_ALL, rowMapper);
    }

    @Override
    public QrtzJobDetails save(QrtzJobDetails entity) {
        if (existsBySchedNameAndJobNameAndJobGroup(entity.getSchedName(), entity.getJobName(), entity.getJobGroup())) {
            return update(entity);
        } else {
            return insert(entity);
        }
    }

    private QrtzJobDetails insert(QrtzJobDetails entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(QrtzJobDetailsSql.INSERT, params);
        return entity;
    }

    private QrtzJobDetails update(QrtzJobDetails entity) {
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(QrtzJobDetailsSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(QrtzJobDetailsSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    private MapSqlParameterSource createParameterMap(QrtzJobDetails entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("jobName", entity.getJobName());
        params.addValue("jobData", entity.getJobData());
        params.addValue("jobClassName", entity.getJobClassName());
        params.addValue("requestsRecovery", entity.getRequestsRecovery());
        params.addValue("description", entity.getDescription());
        params.addValue("isDurable", entity.getIsDurable());
        params.addValue("schedName", entity.getSchedName());
        params.addValue("jobGroup", entity.getJobGroup());
        params.addValue("isNonconcurrent", entity.getIsNonconcurrent());
        params.addValue("isUpdateData", entity.getIsUpdateData());

        return params;
    }

}
