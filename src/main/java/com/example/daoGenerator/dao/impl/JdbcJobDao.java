package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.JobDao;
import com.example.pojogenerator.pojos.Job;
import com.example.daoGenerator.dao.mapper.JobRowMapper;
import com.example.daoGenerator.dao.sql.JobSql;

/**
 * Enhanced JDBC implementation of JobDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcJobDao implements JobDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final JobRowMapper rowMapper;

    public JdbcJobDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new JobRowMapper();
    }

    @Override
    public Optional<Job> findById(Long id) {
        try {
            Job result = jdbcTemplate.queryForObject(
                JobSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(JobSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            JobSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<Job> findAll() {
        return jdbcTemplate.query(JobSql.FIND_ALL, rowMapper);
    }

    @Override
    public Job save(Job entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private Job insert(Job entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            JobSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private Job update(Job entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(JobSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(JobSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<Job> findByUseCasesId(Long useCasesId) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_USE_CASES_ID,
            Map.of("useCasesId", useCasesId),
            rowMapper
        );
    }

    @Override
    public List<Job> findByChecklistsId(Long checklistsId) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_CHECKLISTS_ID,
            Map.of("checklistsId", checklistsId),
            rowMapper
        );
    }

    @Override
    public List<Job> findByModifiedBy(Long modifiedBy) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_MODIFIED_BY,
            Map.of("modifiedBy", modifiedBy),
            rowMapper
        );
    }

    @Override
    public List<Job> findByOrganisationsId(Long organisationsId) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_ORGANISATIONS_ID,
            Map.of("organisationsId", organisationsId),
            rowMapper
        );
    }

    @Override
    public List<Job> findByFacilitiesId(Long facilitiesId) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_FACILITIES_ID,
            Map.of("facilitiesId", facilitiesId),
            rowMapper
        );
    }

    @Override
    public List<Job> findByEndedBy(Long endedBy) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_ENDED_BY,
            Map.of("endedBy", endedBy),
            rowMapper
        );
    }

    @Override
    public List<Job> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

    @Override
    public List<Job> findByStartedBy(Long startedBy) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_STARTED_BY,
            Map.of("startedBy", startedBy),
            rowMapper
        );
    }

    @Override
    public List<Job> findBySchedulersId(Long schedulersId) {
        return jdbcTemplate.query(
            JobSql.FIND_BY_SCHEDULERS_ID,
            Map.of("schedulersId", schedulersId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(Job entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("schedulersId", entity.getSchedulersId());
        params.addValue("expectedStartDate", entity.getExpectedStartDate());
        params.addValue("facilitiesId", entity.getFacilitiesId());
        params.addValue("code", entity.getCode());
        params.addValue("organisationsId", entity.getOrganisationsId());
        params.addValue("startedBy", entity.getStartedBy());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("useCasesId", entity.getUseCasesId());
        params.addValue("checklistAncestorId", entity.getChecklistAncestorId());
        params.addValue("startedAt", entity.getStartedAt());
        params.addValue("checklistsId", entity.getChecklistsId());
        params.addValue("endedBy", entity.getEndedBy());
        params.addValue("isScheduled", entity.getIsScheduled());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("expectedEndDate", entity.getExpectedEndDate());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("endedAt", entity.getEndedAt());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());
        params.addValue("state", entity.getState());

        return params;
    }

}
