package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.ParameterRuleMappingDao;
import com.example.pojogenerator.pojos.ParameterRuleMapping;
import com.example.daoGenerator.dao.mapper.ParameterRuleMappingRowMapper;
import com.example.daoGenerator.dao.sql.ParameterRuleMappingSql;

/**
 * Enhanced JDBC implementation of ParameterRuleMappingDao
 * Key Type: COMPOSITE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcParameterRuleMappingDao implements ParameterRuleMappingDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ParameterRuleMappingRowMapper rowMapper;

    public JdbcParameterRuleMappingDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new ParameterRuleMappingRowMapper();
    }

    @Override
    public Optional<ParameterRuleMapping> findByTriggeringParametersIdAndParameterRulesIdAndImpactedParametersId(Long triggeringParametersId, Long parameterRulesId, Long impactedParametersId) {
        try {
            ParameterRuleMapping result = jdbcTemplate.queryForObject(
                ParameterRuleMappingSql.FIND_BY_TRIGGERING_PARAMETERS_ID_AND_PARAMETER_RULES_ID_AND_IMPACTED_PARAMETERS_ID,
                Map.of("triggeringParametersId", triggeringParametersId, "parameterRulesId", parameterRulesId, "impactedParametersId", impactedParametersId),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteByTriggeringParametersIdAndParameterRulesIdAndImpactedParametersId(Long triggeringParametersId, Long parameterRulesId, Long impactedParametersId) {
        jdbcTemplate.update(ParameterRuleMappingSql.DELETE_BY_TRIGGERING_PARAMETERS_ID_AND_PARAMETER_RULES_ID_AND_IMPACTED_PARAMETERS_ID, Map.of("triggeringParametersId", triggeringParametersId, "parameterRulesId", parameterRulesId, "impactedParametersId", impactedParametersId));
    }

    @Override
    public boolean existsByTriggeringParametersIdAndParameterRulesIdAndImpactedParametersId(Long triggeringParametersId, Long parameterRulesId, Long impactedParametersId) {
        Integer count = jdbcTemplate.queryForObject(
            ParameterRuleMappingSql.EXISTS_BY_TRIGGERING_PARAMETERS_ID_AND_PARAMETER_RULES_ID_AND_IMPACTED_PARAMETERS_ID,
            Map.of("triggeringParametersId", triggeringParametersId, "parameterRulesId", parameterRulesId, "impactedParametersId", impactedParametersId),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<ParameterRuleMapping> findAll() {
        return jdbcTemplate.query(ParameterRuleMappingSql.FIND_ALL, rowMapper);
    }

    @Override
    public ParameterRuleMapping save(ParameterRuleMapping entity) {
        if (existsByTriggeringParametersIdAndParameterRulesIdAndImpactedParametersId(entity.getTriggeringParametersId(), entity.getParameterRulesId(), entity.getImpactedParametersId())) {
            return update(entity);
        } else {
            return insert(entity);
        }
    }

    private ParameterRuleMapping insert(ParameterRuleMapping entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(ParameterRuleMappingSql.INSERT, params);
        return entity;
    }

    private ParameterRuleMapping update(ParameterRuleMapping entity) {
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(ParameterRuleMappingSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(ParameterRuleMappingSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<ParameterRuleMapping> findByTriggeringParametersId(Long triggeringParametersId) {
        return jdbcTemplate.query(
            ParameterRuleMappingSql.FIND_BY_TRIGGERING_PARAMETERS_ID,
            Map.of("triggeringParametersId", triggeringParametersId),
            rowMapper
        );
    }

    @Override
    public List<ParameterRuleMapping> findByParameterRulesId(Long parameterRulesId) {
        return jdbcTemplate.query(
            ParameterRuleMappingSql.FIND_BY_PARAMETER_RULES_ID,
            Map.of("parameterRulesId", parameterRulesId),
            rowMapper
        );
    }

    @Override
    public List<ParameterRuleMapping> findByImpactedParametersId(Long impactedParametersId) {
        return jdbcTemplate.query(
            ParameterRuleMappingSql.FIND_BY_IMPACTED_PARAMETERS_ID,
            Map.of("impactedParametersId", impactedParametersId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(ParameterRuleMapping entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("impactedParametersId", entity.getImpactedParametersId());
        params.addValue("triggeringParametersId", entity.getTriggeringParametersId());
        params.addValue("parameterRulesId", entity.getParameterRulesId());

        return params;
    }

}
