package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.UserGroupMemberDao;
import com.example.pojogenerator.pojos.UserGroupMember;
import com.example.daoGenerator.dao.mapper.UserGroupMemberRowMapper;
import com.example.daoGenerator.dao.sql.UserGroupMemberSql;

/**
 * Enhanced JDBC implementation of UserGroupMemberDao
 * Key Type: COMPOSITE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcUserGroupMemberDao implements UserGroupMemberDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final UserGroupMemberRowMapper rowMapper;

    public JdbcUserGroupMemberDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new UserGroupMemberRowMapper();
    }

    @Override
    public Optional<UserGroupMember> findByUsersIdAndGroupsId(Long usersId, Long groupsId) {
        try {
            UserGroupMember result = jdbcTemplate.queryForObject(
                UserGroupMemberSql.FIND_BY_USERS_ID_AND_GROUPS_ID,
                Map.of("usersId", usersId, "groupsId", groupsId),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteByUsersIdAndGroupsId(Long usersId, Long groupsId) {
        jdbcTemplate.update(UserGroupMemberSql.DELETE_BY_USERS_ID_AND_GROUPS_ID, Map.of("usersId", usersId, "groupsId", groupsId));
    }

    @Override
    public boolean existsByUsersIdAndGroupsId(Long usersId, Long groupsId) {
        Integer count = jdbcTemplate.queryForObject(
            UserGroupMemberSql.EXISTS_BY_USERS_ID_AND_GROUPS_ID,
            Map.of("usersId", usersId, "groupsId", groupsId),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<UserGroupMember> findAll() {
        return jdbcTemplate.query(UserGroupMemberSql.FIND_ALL, rowMapper);
    }

    @Override
    public UserGroupMember save(UserGroupMember entity) {
        if (existsByUsersIdAndGroupsId(entity.getUsersId(), entity.getGroupsId())) {
            return update(entity);
        } else {
            return insert(entity);
        }
    }

    private UserGroupMember insert(UserGroupMember entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(UserGroupMemberSql.INSERT, params);
        return entity;
    }

    private UserGroupMember update(UserGroupMember entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(UserGroupMemberSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(UserGroupMemberSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<UserGroupMember> findByModifiedBy(Long modifiedBy) {
        return jdbcTemplate.query(
            UserGroupMemberSql.FIND_BY_MODIFIED_BY,
            Map.of("modifiedBy", modifiedBy),
            rowMapper
        );
    }

    @Override
    public List<UserGroupMember> findByUsersId(Long usersId) {
        return jdbcTemplate.query(
            UserGroupMemberSql.FIND_BY_USERS_ID,
            Map.of("usersId", usersId),
            rowMapper
        );
    }

    @Override
    public List<UserGroupMember> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            UserGroupMemberSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

    @Override
    public List<UserGroupMember> findByGroupsId(Long groupsId) {
        return jdbcTemplate.query(
            UserGroupMemberSql.FIND_BY_GROUPS_ID,
            Map.of("groupsId", groupsId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(UserGroupMember entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("groupsId", entity.getGroupsId());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("usersId", entity.getUsersId());
        params.addValue("modifiedBy", entity.getModifiedBy());

        return params;
    }

}
