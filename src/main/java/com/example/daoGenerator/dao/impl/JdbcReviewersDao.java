package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.ReviewersDao;
import com.example.pojogenerator.pojos.Reviewers;
import com.example.daoGenerator.dao.mapper.ReviewersRowMapper;
import com.example.daoGenerator.dao.sql.ReviewersSql;

/**
 * Enhanced JDBC implementation of ReviewersDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcReviewersDao implements ReviewersDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ReviewersRowMapper rowMapper;

    public JdbcReviewersDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new ReviewersRowMapper();
    }

    @Override
    public Optional<Reviewers> findById(Long id) {
        try {
            Reviewers result = jdbcTemplate.queryForObject(
                ReviewersSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(ReviewersSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            ReviewersSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<Reviewers> findAll() {
        return jdbcTemplate.query(ReviewersSql.FIND_ALL, rowMapper);
    }

    @Override
    public Reviewers save(Reviewers entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private Reviewers insert(Reviewers entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            ReviewersSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private Reviewers update(Reviewers entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(ReviewersSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(ReviewersSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<Reviewers> findByUserGroupsId(Long userGroupsId) {
        return jdbcTemplate.query(
            ReviewersSql.FIND_BY_USER_GROUPS_ID,
            Map.of("userGroupsId", userGroupsId),
            rowMapper
        );
    }

    @Override
    public List<Reviewers> findByCorrectionsId(Long correctionsId) {
        return jdbcTemplate.query(
            ReviewersSql.FIND_BY_CORRECTIONS_ID,
            Map.of("correctionsId", correctionsId),
            rowMapper
        );
    }

    @Override
    public List<Reviewers> findByUsersId(Long usersId) {
        return jdbcTemplate.query(
            ReviewersSql.FIND_BY_USERS_ID,
            Map.of("usersId", usersId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(Reviewers entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("correctionsId", entity.getCorrectionsId());
        params.addValue("actionPerformed", entity.getActionPerformed());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("userGroupsId", entity.getUserGroupsId());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("usersId", entity.getUsersId());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());

        return params;
    }

}
