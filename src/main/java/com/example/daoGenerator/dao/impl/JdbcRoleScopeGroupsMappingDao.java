package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.RoleScopeGroupsMappingDao;
import com.example.pojogenerator.pojos.RoleScopeGroupsMapping;
import com.example.daoGenerator.dao.mapper.RoleScopeGroupsMappingRowMapper;
import com.example.daoGenerator.dao.sql.RoleScopeGroupsMappingSql;

/**
 * JDBC implementation of RoleScopeGroupsMappingDao
 * Generated by JDBC DAO Generator
 */
@Repository
public class JdbcRoleScopeGroupsMappingDao implements RoleScopeGroupsMappingDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final RoleScopeGroupsMappingRowMapper rowMapper;

    public JdbcRoleScopeGroupsMappingDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new RoleScopeGroupsMappingRowMapper();
    }

    @Override
    public Optional<RoleScopeGroupsMapping> findById(Long id) {
        try {
            RoleScopeGroupsMapping result = jdbcTemplate.queryForObject(
                RoleScopeGroupsMappingSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<RoleScopeGroupsMapping> findAll() {
        return jdbcTemplate.query(RoleScopeGroupsMappingSql.FIND_ALL, rowMapper);
    }

    @Override
    public RoleScopeGroupsMapping save(RoleScopeGroupsMapping entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private RoleScopeGroupsMapping insert(RoleScopeGroupsMapping entity) {
        // Set audit fields
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        // Execute INSERT with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            RoleScopeGroupsMappingSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private RoleScopeGroupsMapping update(RoleScopeGroupsMapping entity) {
        // Update audit fields
        entity.setModifiedAt(System.currentTimeMillis());

        // Execute UPDATE with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(
            RoleScopeGroupsMappingSql.UPDATE,
            params
        );

        if (rowsAffected == 0) {
            throw new RuntimeException("Entity with id " + entity.getId() + " not found for update");
        }
        return entity;
    }

    private MapSqlParameterSource createParameterMap(RoleScopeGroupsMapping entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("scopeGroupsId", entity.getScopeGroupsId());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("rolesId", entity.getRolesId());

        return params;
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(RoleScopeGroupsMappingSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            RoleScopeGroupsMappingSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(RoleScopeGroupsMappingSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<RoleScopeGroupsMapping> findByRolesId(Long rolesId) {
        return jdbcTemplate.query(
            RoleScopeGroupsMappingSql.FIND_BY_ROLES_ID,
            Map.of("rolesId", rolesId),
            rowMapper
        );
    }

    @Override
    public List<RoleScopeGroupsMapping> findByScopeGroupsId(Long scopeGroupsId) {
        return jdbcTemplate.query(
            RoleScopeGroupsMappingSql.FIND_BY_SCOPE_GROUPS_ID,
            Map.of("scopeGroupsId", scopeGroupsId),
            rowMapper
        );
    }

    @Override
    public List<RoleScopeGroupsMapping> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            RoleScopeGroupsMappingSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

}
