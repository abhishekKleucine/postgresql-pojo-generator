package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.QrtzCalendarDao;
import com.example.pojogenerator.pojos.QrtzCalendar;
import com.example.daoGenerator.dao.mapper.QrtzCalendarRowMapper;
import com.example.daoGenerator.dao.sql.QrtzCalendarSql;

/**
 * Enhanced JDBC implementation of QrtzCalendarDao
 * Key Type: COMPOSITE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcQrtzCalendarDao implements QrtzCalendarDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final QrtzCalendarRowMapper rowMapper;

    public JdbcQrtzCalendarDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new QrtzCalendarRowMapper();
    }

    @Override
    public Optional<QrtzCalendar> findBySchedNameAndCalendarName(String schedName, String calendarName) {
        try {
            QrtzCalendar result = jdbcTemplate.queryForObject(
                QrtzCalendarSql.FIND_BY_SCHED_NAME_AND_CALENDAR_NAME,
                Map.of("schedName", schedName, "calendarName", calendarName),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteBySchedNameAndCalendarName(String schedName, String calendarName) {
        jdbcTemplate.update(QrtzCalendarSql.DELETE_BY_SCHED_NAME_AND_CALENDAR_NAME, Map.of("schedName", schedName, "calendarName", calendarName));
    }

    @Override
    public boolean existsBySchedNameAndCalendarName(String schedName, String calendarName) {
        Integer count = jdbcTemplate.queryForObject(
            QrtzCalendarSql.EXISTS_BY_SCHED_NAME_AND_CALENDAR_NAME,
            Map.of("schedName", schedName, "calendarName", calendarName),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<QrtzCalendar> findAll() {
        return jdbcTemplate.query(QrtzCalendarSql.FIND_ALL, rowMapper);
    }

    @Override
    public QrtzCalendar save(QrtzCalendar entity) {
        if (existsBySchedNameAndCalendarName(entity.getSchedName(), entity.getCalendarName())) {
            return update(entity);
        } else {
            return insert(entity);
        }
    }

    private QrtzCalendar insert(QrtzCalendar entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(QrtzCalendarSql.INSERT, params);
        return entity;
    }

    private QrtzCalendar update(QrtzCalendar entity) {
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(QrtzCalendarSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(QrtzCalendarSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    private MapSqlParameterSource createParameterMap(QrtzCalendar entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("calendar", entity.getCalendar());
        params.addValue("calendarName", entity.getCalendarName());
        params.addValue("schedName", entity.getSchedName());

        return params;
    }

}
