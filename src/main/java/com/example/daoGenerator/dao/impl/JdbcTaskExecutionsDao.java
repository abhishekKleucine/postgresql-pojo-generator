package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.TaskExecutionsDao;
import com.example.pojogenerator.pojos.TaskExecutions;
import com.example.daoGenerator.dao.mapper.TaskExecutionsRowMapper;
import com.example.daoGenerator.dao.sql.TaskExecutionsSql;

/**
 * JDBC implementation of TaskExecutionsDao
 * Generated by JDBC DAO Generator
 */
@Repository
public class JdbcTaskExecutionsDao implements TaskExecutionsDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final TaskExecutionsRowMapper rowMapper;

    public JdbcTaskExecutionsDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new TaskExecutionsRowMapper();
    }

    @Override
    public Optional<TaskExecutions> findById(Long id) {
        try {
            TaskExecutions result = jdbcTemplate.queryForObject(
                TaskExecutionsSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<TaskExecutions> findAll() {
        return jdbcTemplate.query(TaskExecutionsSql.FIND_ALL, rowMapper);
    }

    @Override
    public TaskExecutions save(TaskExecutions entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private TaskExecutions insert(TaskExecutions entity) {
        // Set audit fields
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        // Execute INSERT with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            TaskExecutionsSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private TaskExecutions update(TaskExecutions entity) {
        // Update audit fields
        entity.setModifiedAt(System.currentTimeMillis());

        // Execute UPDATE with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(
            TaskExecutionsSql.UPDATE,
            params
        );

        if (rowsAffected == 0) {
            throw new RuntimeException("Entity with id " + entity.getId() + " not found for update");
        }
        return entity;
    }

    private MapSqlParameterSource createParameterMap(TaskExecutions entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("correctionEnabled", entity.getCorrectionEnabled());
        params.addValue("schedulePrematureStartReason", entity.getSchedulePrematureStartReason());
        params.addValue("reason", entity.getReason());
        params.addValue("correctionReason", entity.getCorrectionReason());
        params.addValue("correctedAt", entity.getCorrectedAt());
        params.addValue("scheduleOverdueCompletionReason", entity.getScheduleOverdueCompletionReason());
        params.addValue("recurringExpectedStartedAt", entity.getRecurringExpectedStartedAt());
        params.addValue("schedulingExpectedStartedAt", entity.getSchedulingExpectedStartedAt());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("recurringExpectedDueAt", entity.getRecurringExpectedDueAt());
        params.addValue("startedAt", entity.getStartedAt());
        params.addValue("endedBy", entity.getEndedBy());
        params.addValue("isScheduled", entity.getIsScheduled());
        params.addValue("type", entity.getType());
        params.addValue("duration", entity.getDuration());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("tasksId", entity.getTasksId());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());
        params.addValue("state", entity.getState());
        params.addValue("continueRecurrence", entity.getContinueRecurrence());
        params.addValue("recurringOverdueCompletionReason", entity.getRecurringOverdueCompletionReason());
        params.addValue("correctedBy", entity.getCorrectedBy());
        params.addValue("startedBy", entity.getStartedBy());
        params.addValue("orderTree", entity.getOrderTree());
        params.addValue("recurringPrematureStartReason", entity.getRecurringPrematureStartReason());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("endedAt", entity.getEndedAt());
        params.addValue("recurringOverdueStartReason", entity.getRecurringOverdueStartReason());
        params.addValue("jobsId", entity.getJobsId());
        params.addValue("schedulingExpectedDueAt", entity.getSchedulingExpectedDueAt());

        return params;
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(TaskExecutionsSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            TaskExecutionsSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(TaskExecutionsSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<TaskExecutions> findByTasksId(Long tasksId) {
        return jdbcTemplate.query(
            TaskExecutionsSql.FIND_BY_TASKS_ID,
            Map.of("tasksId", tasksId),
            rowMapper
        );
    }

    @Override
    public List<TaskExecutions> findByModifiedBy(Long modifiedBy) {
        return jdbcTemplate.query(
            TaskExecutionsSql.FIND_BY_MODIFIED_BY,
            Map.of("modifiedBy", modifiedBy),
            rowMapper
        );
    }

    @Override
    public List<TaskExecutions> findByJobsId(Long jobsId) {
        return jdbcTemplate.query(
            TaskExecutionsSql.FIND_BY_JOBS_ID,
            Map.of("jobsId", jobsId),
            rowMapper
        );
    }

    @Override
    public List<TaskExecutions> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            TaskExecutionsSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

    @Override
    public List<TaskExecutions> findByStartedBy(Long startedBy) {
        return jdbcTemplate.query(
            TaskExecutionsSql.FIND_BY_STARTED_BY,
            Map.of("startedBy", startedBy),
            rowMapper
        );
    }

}
