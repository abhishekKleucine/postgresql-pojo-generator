package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.TempParameterValueMediaMappingDao;
import com.example.pojogenerator.pojos.TempParameterValueMediaMapping;
import com.example.daoGenerator.dao.mapper.TempParameterValueMediaMappingRowMapper;
import com.example.daoGenerator.dao.sql.TempParameterValueMediaMappingSql;

/**
 * JDBC implementation of TempParameterValueMediaMappingDao
 * Generated by JDBC DAO Generator
 */
@Repository
public class JdbcTempParameterValueMediaMappingDao implements TempParameterValueMediaMappingDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final TempParameterValueMediaMappingRowMapper rowMapper;

    public JdbcTempParameterValueMediaMappingDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new TempParameterValueMediaMappingRowMapper();
    }

    @Override
    public Optional<TempParameterValueMediaMapping> findById(Long id) {
        try {
            TempParameterValueMediaMapping result = jdbcTemplate.queryForObject(
                TempParameterValueMediaMappingSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<TempParameterValueMediaMapping> findAll() {
        return jdbcTemplate.query(TempParameterValueMediaMappingSql.FIND_ALL, rowMapper);
    }

    @Override
    public TempParameterValueMediaMapping save(TempParameterValueMediaMapping entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private TempParameterValueMediaMapping insert(TempParameterValueMediaMapping entity) {
        // Set audit fields
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        // Execute INSERT with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            TempParameterValueMediaMappingSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private TempParameterValueMediaMapping update(TempParameterValueMediaMapping entity) {
        // Update audit fields
        entity.setModifiedAt(System.currentTimeMillis());

        // Execute UPDATE with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(
            TempParameterValueMediaMappingSql.UPDATE,
            params
        );

        if (rowsAffected == 0) {
            throw new RuntimeException("Entity with id " + entity.getId() + " not found for update");
        }
        return entity;
    }

    private MapSqlParameterSource createParameterMap(TempParameterValueMediaMapping entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("archived", entity.getArchived());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("tempParameterValuesId", entity.getTempParameterValuesId());
        params.addValue("mediasId", entity.getMediasId());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("modifiedBy", entity.getModifiedBy());

        return params;
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(TempParameterValueMediaMappingSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            TempParameterValueMediaMappingSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(TempParameterValueMediaMappingSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<TempParameterValueMediaMapping> findByTempParameterValuesId(Long tempParameterValuesId) {
        return jdbcTemplate.query(
            TempParameterValueMediaMappingSql.FIND_BY_TEMP_PARAMETER_VALUES_ID,
            Map.of("tempParameterValuesId", tempParameterValuesId),
            rowMapper
        );
    }

    @Override
    public List<TempParameterValueMediaMapping> findByModifiedBy(Long modifiedBy) {
        return jdbcTemplate.query(
            TempParameterValueMediaMappingSql.FIND_BY_MODIFIED_BY,
            Map.of("modifiedBy", modifiedBy),
            rowMapper
        );
    }

    @Override
    public List<TempParameterValueMediaMapping> findByMediasId(Long mediasId) {
        return jdbcTemplate.query(
            TempParameterValueMediaMappingSql.FIND_BY_MEDIAS_ID,
            Map.of("mediasId", mediasId),
            rowMapper
        );
    }

    @Override
    public List<TempParameterValueMediaMapping> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            TempParameterValueMediaMappingSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

}
