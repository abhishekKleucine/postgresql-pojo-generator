package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.TaskDependenciesDao;
import com.example.pojogenerator.pojos.TaskDependencies;
import com.example.daoGenerator.dao.mapper.TaskDependenciesRowMapper;
import com.example.daoGenerator.dao.sql.TaskDependenciesSql;

/**
 * Enhanced JDBC implementation of TaskDependenciesDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcTaskDependenciesDao implements TaskDependenciesDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final TaskDependenciesRowMapper rowMapper;

    public JdbcTaskDependenciesDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new TaskDependenciesRowMapper();
    }

    @Override
    public Optional<TaskDependencies> findById(Long id) {
        try {
            TaskDependencies result = jdbcTemplate.queryForObject(
                TaskDependenciesSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(TaskDependenciesSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            TaskDependenciesSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<TaskDependencies> findAll() {
        return jdbcTemplate.query(TaskDependenciesSql.FIND_ALL, rowMapper);
    }

    @Override
    public TaskDependencies save(TaskDependencies entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private TaskDependencies insert(TaskDependencies entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            TaskDependenciesSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private TaskDependencies update(TaskDependencies entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(TaskDependenciesSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(TaskDependenciesSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<TaskDependencies> findByDependentTaskId(Long dependentTaskId) {
        return jdbcTemplate.query(
            TaskDependenciesSql.FIND_BY_DEPENDENT_TASK_ID,
            Map.of("dependentTaskId", dependentTaskId),
            rowMapper
        );
    }

    @Override
    public List<TaskDependencies> findByPrerequisiteTaskId(Long prerequisiteTaskId) {
        return jdbcTemplate.query(
            TaskDependenciesSql.FIND_BY_PREREQUISITE_TASK_ID,
            Map.of("prerequisiteTaskId", prerequisiteTaskId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(TaskDependencies entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("dependentTaskId", entity.getDependentTaskId());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("prerequisiteTaskId", entity.getPrerequisiteTaskId());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());

        return params;
    }

}
