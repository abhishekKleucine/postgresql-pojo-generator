package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.ParameterValueDao;
import com.example.pojogenerator.pojos.ParameterValue;
import com.example.daoGenerator.dao.mapper.ParameterValueRowMapper;
import com.example.daoGenerator.dao.sql.ParameterValueSql;

/**
 * Enhanced JDBC implementation of ParameterValueDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcParameterValueDao implements ParameterValueDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ParameterValueRowMapper rowMapper;

    public JdbcParameterValueDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new ParameterValueRowMapper();
    }

    @Override
    public Optional<ParameterValue> findById(Long id) {
        try {
            ParameterValue result = jdbcTemplate.queryForObject(
                ParameterValueSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(ParameterValueSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            ParameterValueSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<ParameterValue> findAll() {
        return jdbcTemplate.query(ParameterValueSql.FIND_ALL, rowMapper);
    }

    @Override
    public ParameterValue save(ParameterValue entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private ParameterValue insert(ParameterValue entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            ParameterValueSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private ParameterValue update(ParameterValue entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(ParameterValueSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(ParameterValueSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<ParameterValue> findByParametersId(Long parametersId) {
        return jdbcTemplate.query(
            ParameterValueSql.FIND_BY_PARAMETERS_ID,
            Map.of("parametersId", parametersId),
            rowMapper
        );
    }

    @Override
    public List<ParameterValue> findByTaskExecutionsId(Long taskExecutionsId) {
        return jdbcTemplate.query(
            ParameterValueSql.FIND_BY_TASK_EXECUTIONS_ID,
            Map.of("taskExecutionsId", taskExecutionsId),
            rowMapper
        );
    }

    @Override
    public List<ParameterValue> findByParameterValueApprovalId(Long parameterValueApprovalId) {
        return jdbcTemplate.query(
            ParameterValueSql.FIND_BY_PARAMETER_VALUE_APPROVAL_ID,
            Map.of("parameterValueApprovalId", parameterValueApprovalId),
            rowMapper
        );
    }

    @Override
    public List<ParameterValue> findByModifiedBy(Long modifiedBy) {
        return jdbcTemplate.query(
            ParameterValueSql.FIND_BY_MODIFIED_BY,
            Map.of("modifiedBy", modifiedBy),
            rowMapper
        );
    }

    @Override
    public List<ParameterValue> findByJobsId(Long jobsId) {
        return jdbcTemplate.query(
            ParameterValueSql.FIND_BY_JOBS_ID,
            Map.of("jobsId", jobsId),
            rowMapper
        );
    }

    @Override
    public List<ParameterValue> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            ParameterValueSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(ParameterValue entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("reason", entity.getReason());
        params.addValue("hasCorrections", entity.getHasCorrections());
        params.addValue("hidden", entity.getHidden());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("verified", entity.getVerified());
        params.addValue("parametersId", entity.getParametersId());
        params.addValue("clientEpoch", entity.getClientEpoch());
        params.addValue("hasActiveException", entity.getHasActiveException());
        params.addValue("version", entity.getVersion());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("hasVariations", entity.getHasVariations());
        if (entity.getImpactedBy() != null) {
            params.addValue("impactedBy", entity.getImpactedBy().toString());
        } else {
            params.addValue("impactedBy", null);
        }
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());
        params.addValue("state", entity.getState());
        params.addValue("taskExecutionsId", entity.getTaskExecutionsId());
        if (entity.getChoices() != null) {
            params.addValue("choices", entity.getChoices().toString());
        } else {
            params.addValue("choices", null);
        }
        params.addValue("hasExceptions", entity.getHasExceptions());
        params.addValue("value", entity.getValue());
        params.addValue("jobsId", entity.getJobsId());
        params.addValue("parameterValueApprovalId", entity.getParameterValueApprovalId());

        return params;
    }

}
