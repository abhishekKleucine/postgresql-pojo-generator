package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.CodesDao;
import com.example.pojogenerator.pojos.Codes;
import com.example.daoGenerator.dao.mapper.CodesRowMapper;
import com.example.daoGenerator.dao.sql.CodesSql;

/**
 * Enhanced JDBC implementation of CodesDao
 * Key Type: COMPOSITE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcCodesDao implements CodesDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final CodesRowMapper rowMapper;

    public JdbcCodesDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new CodesRowMapper();
    }

    @Override
    public Optional<Codes> findByClauseAndOrganisationsIdAndType(String clause, Long organisationsId, String type) {
        try {
            Codes result = jdbcTemplate.queryForObject(
                CodesSql.FIND_BY_CLAUSE_AND_ORGANISATIONS_ID_AND_TYPE,
                Map.of("clause", clause, "organisationsId", organisationsId, "type", type),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteByClauseAndOrganisationsIdAndType(String clause, Long organisationsId, String type) {
        jdbcTemplate.update(CodesSql.DELETE_BY_CLAUSE_AND_ORGANISATIONS_ID_AND_TYPE, Map.of("clause", clause, "organisationsId", organisationsId, "type", type));
    }

    @Override
    public boolean existsByClauseAndOrganisationsIdAndType(String clause, Long organisationsId, String type) {
        Integer count = jdbcTemplate.queryForObject(
            CodesSql.EXISTS_BY_CLAUSE_AND_ORGANISATIONS_ID_AND_TYPE,
            Map.of("clause", clause, "organisationsId", organisationsId, "type", type),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<Codes> findAll() {
        return jdbcTemplate.query(CodesSql.FIND_ALL, rowMapper);
    }

    @Override
    public Codes save(Codes entity) {
        if (existsByClauseAndOrganisationsIdAndType(entity.getClause(), entity.getOrganisationsId(), entity.getType())) {
            return update(entity);
        } else {
            return insert(entity);
        }
    }

    private Codes insert(Codes entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(CodesSql.INSERT, params);
        return entity;
    }

    private Codes update(Codes entity) {
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(CodesSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(CodesSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<Codes> findByOrganisationsId(Long organisationsId) {
        return jdbcTemplate.query(
            CodesSql.FIND_BY_ORGANISATIONS_ID,
            Map.of("organisationsId", organisationsId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(Codes entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("clause", entity.getClause());
        params.addValue("organisationsId", entity.getOrganisationsId());
        params.addValue("counter", entity.getCounter());
        params.addValue("type", entity.getType());

        return params;
    }

}
