package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.EmailTemplatesDao;
import com.example.pojogenerator.pojos.EmailTemplates;
import com.example.daoGenerator.dao.mapper.EmailTemplatesRowMapper;
import com.example.daoGenerator.dao.sql.EmailTemplatesSql;

/**
 * Enhanced JDBC implementation of EmailTemplatesDao
 * Key Type: NO_PRIMARY_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcEmailTemplatesDao implements EmailTemplatesDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final EmailTemplatesRowMapper rowMapper;

    public JdbcEmailTemplatesDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new EmailTemplatesRowMapper();
    }

    @Override
    public List<EmailTemplates> findAll() {
        return jdbcTemplate.query(EmailTemplatesSql.FIND_ALL, rowMapper);
    }

    @Override
    public EmailTemplates save(EmailTemplates entity) {
        // No primary key - always insert
        return insert(entity);
    }

    private EmailTemplates insert(EmailTemplates entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(EmailTemplatesSql.INSERT, params);
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(EmailTemplatesSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    private MapSqlParameterSource createParameterMap(EmailTemplates entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("archived", entity.getArchived());
        params.addValue("name", entity.getName());
        params.addValue("id", entity.getId());
        params.addValue("content", entity.getContent());

        return params;
    }

}
