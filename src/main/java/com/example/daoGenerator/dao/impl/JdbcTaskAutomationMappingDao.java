package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.TaskAutomationMappingDao;
import com.example.pojogenerator.pojos.TaskAutomationMapping;
import com.example.daoGenerator.dao.mapper.TaskAutomationMappingRowMapper;
import com.example.daoGenerator.dao.sql.TaskAutomationMappingSql;

/**
 * Enhanced JDBC implementation of TaskAutomationMappingDao
 * Key Type: NO_PRIMARY_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcTaskAutomationMappingDao implements TaskAutomationMappingDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final TaskAutomationMappingRowMapper rowMapper;

    public JdbcTaskAutomationMappingDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new TaskAutomationMappingRowMapper();
    }

    @Override
    public Optional<TaskAutomationMapping> findByAutomationsIdAndTasksId(Long automationsId, Long tasksId) {
        try {
            TaskAutomationMapping result = jdbcTemplate.queryForObject(
                TaskAutomationMappingSql.FIND_BY_AUTOMATIONS_ID_AND_TASKS_ID,
                Map.of("automationsId", automationsId, "tasksId", tasksId),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteByAutomationsIdAndTasksId(Long automationsId, Long tasksId) {
        jdbcTemplate.update(TaskAutomationMappingSql.DELETE_BY_AUTOMATIONS_ID_AND_TASKS_ID, Map.of("automationsId", automationsId, "tasksId", tasksId));
    }

    @Override
    public boolean existsByAutomationsIdAndTasksId(Long automationsId, Long tasksId) {
        Integer count = jdbcTemplate.queryForObject(
            TaskAutomationMappingSql.EXISTS_BY_AUTOMATIONS_ID_AND_TASKS_ID,
            Map.of("automationsId", automationsId, "tasksId", tasksId),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<TaskAutomationMapping> findAll() {
        return jdbcTemplate.query(TaskAutomationMappingSql.FIND_ALL, rowMapper);
    }

    @Override
    public TaskAutomationMapping save(TaskAutomationMapping entity) {
        // No primary key - always insert
        return insert(entity);
    }

    private TaskAutomationMapping insert(TaskAutomationMapping entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(TaskAutomationMappingSql.INSERT, params);
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(TaskAutomationMappingSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<TaskAutomationMapping> findByAutomationsId(Long automationsId) {
        return jdbcTemplate.query(
            TaskAutomationMappingSql.FIND_BY_AUTOMATIONS_ID,
            Map.of("automationsId", automationsId),
            rowMapper
        );
    }

    @Override
    public List<TaskAutomationMapping> findByTasksId(Long tasksId) {
        return jdbcTemplate.query(
            TaskAutomationMappingSql.FIND_BY_TASKS_ID,
            Map.of("tasksId", tasksId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(TaskAutomationMapping entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("automationsId", entity.getAutomationsId());
        params.addValue("orderTree", entity.getOrderTree());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("tasksId", entity.getTasksId());
        params.addValue("displayName", entity.getDisplayName());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("modifiedBy", entity.getModifiedBy());

        return params;
    }

}
