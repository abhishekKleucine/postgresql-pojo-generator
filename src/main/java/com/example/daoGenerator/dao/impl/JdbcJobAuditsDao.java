package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.JobAuditsDao;
import com.example.pojogenerator.pojos.JobAudits;
import com.example.daoGenerator.dao.mapper.JobAuditsRowMapper;
import com.example.daoGenerator.dao.sql.JobAuditsSql;

/**
 * Enhanced JDBC implementation of JobAuditsDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcJobAuditsDao implements JobAuditsDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final JobAuditsRowMapper rowMapper;

    public JdbcJobAuditsDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new JobAuditsRowMapper();
    }

    @Override
    public Optional<JobAudits> findById(Long id) {
        try {
            JobAudits result = jdbcTemplate.queryForObject(
                JobAuditsSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(JobAuditsSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            JobAuditsSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<JobAudits> findAll() {
        return jdbcTemplate.query(JobAuditsSql.FIND_ALL, rowMapper);
    }

    @Override
    public JobAudits save(JobAudits entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private JobAudits insert(JobAudits entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            JobAuditsSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private JobAudits update(JobAudits entity) {
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(JobAuditsSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(JobAuditsSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    private MapSqlParameterSource createParameterMap(JobAudits entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("organisationsId", entity.getOrganisationsId());
        params.addValue("tasksId", entity.getTasksId());
        params.addValue("action", entity.getAction());
        params.addValue("details", entity.getDetails());
        params.addValue("id", entity.getId());
        params.addValue("stagesId", entity.getStagesId());
        params.addValue("triggeredAt", entity.getTriggeredAt());
        params.addValue("jobsId", entity.getJobsId());
        if (entity.getParameters() != null) {
            params.addValue("parameters", entity.getParameters().toString());
        } else {
            params.addValue("parameters", null);
        }
        params.addValue("triggeredBy", entity.getTriggeredBy());

        return params;
    }

}
