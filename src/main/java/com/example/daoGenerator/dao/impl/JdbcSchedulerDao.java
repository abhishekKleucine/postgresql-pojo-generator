package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.SchedulerDao;
import com.example.pojogenerator.pojos.Scheduler;
import com.example.daoGenerator.dao.mapper.SchedulerRowMapper;
import com.example.daoGenerator.dao.sql.SchedulerSql;

/**
 * Enhanced JDBC implementation of SchedulerDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcSchedulerDao implements SchedulerDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final SchedulerRowMapper rowMapper;

    public JdbcSchedulerDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new SchedulerRowMapper();
    }

    @Override
    public Optional<Scheduler> findById(Long id) {
        try {
            Scheduler result = jdbcTemplate.queryForObject(
                SchedulerSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(SchedulerSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            SchedulerSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<Scheduler> findAll() {
        return jdbcTemplate.query(SchedulerSql.FIND_ALL, rowMapper);
    }

    @Override
    public Scheduler save(Scheduler entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private Scheduler insert(Scheduler entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            SchedulerSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private Scheduler update(Scheduler entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(SchedulerSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(SchedulerSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<Scheduler> findByUseCasesId(Long useCasesId) {
        return jdbcTemplate.query(
            SchedulerSql.FIND_BY_USE_CASES_ID,
            Map.of("useCasesId", useCasesId),
            rowMapper
        );
    }

    @Override
    public List<Scheduler> findByChecklistsId(Long checklistsId) {
        return jdbcTemplate.query(
            SchedulerSql.FIND_BY_CHECKLISTS_ID,
            Map.of("checklistsId", checklistsId),
            rowMapper
        );
    }

    @Override
    public List<Scheduler> findByFacilitiesId(Long facilitiesId) {
        return jdbcTemplate.query(
            SchedulerSql.FIND_BY_FACILITIES_ID,
            Map.of("facilitiesId", facilitiesId),
            rowMapper
        );
    }

    @Override
    public List<Scheduler> findByVersionsId(Long versionsId) {
        return jdbcTemplate.query(
            SchedulerSql.FIND_BY_VERSIONS_ID,
            Map.of("versionsId", versionsId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(Scheduler entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("expectedStartDate", entity.getExpectedStartDate());
        params.addValue("facilitiesId", entity.getFacilitiesId());
        params.addValue("code", entity.getCode());
        if (entity.getData() != null) {
            params.addValue("data", entity.getData().toString());
        } else {
            params.addValue("data", null);
        }
        params.addValue("useCasesId", entity.getUseCasesId());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("description", entity.getDescription());
        params.addValue("checklistsId", entity.getChecklistsId());
        params.addValue("isRepeated", entity.getIsRepeated());
        params.addValue("recurrenceRule", entity.getRecurrenceRule());
        params.addValue("enabled", entity.getEnabled());
        params.addValue("archived", entity.getArchived());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("checklistsName", entity.getChecklistsName());
        params.addValue("createdBy", entity.getCreatedBy());
        if (entity.getDueDateDuration() != null) {
            params.addValue("dueDateDuration", entity.getDueDateDuration().toString());
        } else {
            params.addValue("dueDateDuration", null);
        }
        params.addValue("deprecatedAt", entity.getDeprecatedAt());
        params.addValue("name", entity.getName());
        params.addValue("isCustomRecurrence", entity.getIsCustomRecurrence());
        params.addValue("dueDateInterval", entity.getDueDateInterval());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());
        params.addValue("state", entity.getState());
        params.addValue("versionsId", entity.getVersionsId());

        return params;
    }

}
