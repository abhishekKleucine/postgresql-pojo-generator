package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.ParametersDao;
import com.example.pojogenerator.pojos.Parameters;
import com.example.daoGenerator.dao.mapper.ParametersRowMapper;
import com.example.daoGenerator.dao.sql.ParametersSql;

/**
 * Enhanced JDBC implementation of ParametersDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcParametersDao implements ParametersDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ParametersRowMapper rowMapper;

    public JdbcParametersDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new ParametersRowMapper();
    }

    @Override
    public Optional<Parameters> findById(Long id) {
        try {
            Parameters result = jdbcTemplate.queryForObject(
                ParametersSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(ParametersSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            ParametersSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<Parameters> findAll() {
        return jdbcTemplate.query(ParametersSql.FIND_ALL, rowMapper);
    }

    @Override
    public Parameters save(Parameters entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private Parameters insert(Parameters entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            ParametersSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private Parameters update(Parameters entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(ParametersSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(ParametersSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<Parameters> findByTasksId(Long tasksId) {
        return jdbcTemplate.query(
            ParametersSql.FIND_BY_TASKS_ID,
            Map.of("tasksId", tasksId),
            rowMapper
        );
    }

    @Override
    public List<Parameters> findByChecklistsId(Long checklistsId) {
        return jdbcTemplate.query(
            ParametersSql.FIND_BY_CHECKLISTS_ID,
            Map.of("checklistsId", checklistsId),
            rowMapper
        );
    }

    @Override
    public List<Parameters> findByModifiedBy(Long modifiedBy) {
        return jdbcTemplate.query(
            ParametersSql.FIND_BY_MODIFIED_BY,
            Map.of("modifiedBy", modifiedBy),
            rowMapper
        );
    }

    @Override
    public List<Parameters> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            ParametersSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(Parameters entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        if (entity.getMetadata() != null) {
            params.addValue("metadata", entity.getMetadata().toString());
        } else {
            params.addValue("metadata", null);
        }
        if (entity.getData() != null) {
            params.addValue("data", entity.getData().toString());
        } else {
            params.addValue("data", null);
        }
        params.addValue("hidden", entity.getHidden());
        params.addValue("orderTree", entity.getOrderTree());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("description", entity.getDescription());
        params.addValue("checklistsId", entity.getChecklistsId());
        if (entity.getRules() != null) {
            params.addValue("rules", entity.getRules().toString());
        } else {
            params.addValue("rules", null);
        }
        params.addValue("label", entity.getLabel());
        params.addValue("type", entity.getType());
        if (entity.getAutoInitialize() != null) {
            params.addValue("autoInitialize", entity.getAutoInitialize().toString());
        } else {
            params.addValue("autoInitialize", null);
        }
        params.addValue("archived", entity.getArchived());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("targetEntityType", entity.getTargetEntityType());
        params.addValue("tasksId", entity.getTasksId());
        params.addValue("isAutoInitialized", entity.getIsAutoInitialized());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("verificationType", entity.getVerificationType());
        params.addValue("id", entity.getId());
        if (entity.getValidations() != null) {
            params.addValue("validations", entity.getValidations().toString());
        } else {
            params.addValue("validations", null);
        }
        params.addValue("isMandatory", entity.getIsMandatory());

        return params;
    }

}
