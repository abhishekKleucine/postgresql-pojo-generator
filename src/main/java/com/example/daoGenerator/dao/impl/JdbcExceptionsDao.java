package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.ExceptionsDao;
import com.example.pojogenerator.pojos.Exceptions;
import com.example.daoGenerator.dao.mapper.ExceptionsRowMapper;
import com.example.daoGenerator.dao.sql.ExceptionsSql;

/**
 * JDBC implementation of ExceptionsDao
 * Generated by JDBC DAO Generator
 */
@Repository
public class JdbcExceptionsDao implements ExceptionsDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ExceptionsRowMapper rowMapper;

    public JdbcExceptionsDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new ExceptionsRowMapper();
    }

    @Override
    public Optional<Exceptions> findById(Long id) {
        try {
            Exceptions result = jdbcTemplate.queryForObject(
                ExceptionsSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public List<Exceptions> findAll() {
        return jdbcTemplate.query(ExceptionsSql.FIND_ALL, rowMapper);
    }

    @Override
    public Exceptions save(Exceptions entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private Exceptions insert(Exceptions entity) {
        // Set audit fields
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        // Execute INSERT with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            ExceptionsSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private Exceptions update(Exceptions entity) {
        // Update audit fields
        entity.setModifiedAt(System.currentTimeMillis());

        // Execute UPDATE with parameter mapping
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(
            ExceptionsSql.UPDATE,
            params
        );

        if (rowsAffected == 0) {
            throw new RuntimeException("Entity with id " + entity.getId() + " not found for update");
        }
        return entity;
    }

    private MapSqlParameterSource createParameterMap(Exceptions entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("reviewersReason", entity.getReviewersReason());
        params.addValue("reason", entity.getReason());
        params.addValue("facilitiesId", entity.getFacilitiesId());
        params.addValue("code", entity.getCode());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("initiatorsReason", entity.getInitiatorsReason());
        params.addValue("previousState", entity.getPreviousState());
        params.addValue("parameterValuesId", entity.getParameterValuesId());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());
        params.addValue("taskExecutionsId", entity.getTaskExecutionsId());
        if (entity.getChoices() != null) {
            params.addValue("choices", entity.getChoices().toString());
        } else {
            params.addValue("choices", null);
        }
        params.addValue("rulesId", entity.getRulesId());
        params.addValue("value", entity.getValue());
        params.addValue("jobsId", entity.getJobsId());
        params.addValue("status", entity.getStatus());

        return params;
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(ExceptionsSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            ExceptionsSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(ExceptionsSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<Exceptions> findByTaskExecutionsId(Long taskExecutionsId) {
        return jdbcTemplate.query(
            ExceptionsSql.FIND_BY_TASK_EXECUTIONS_ID,
            Map.of("taskExecutionsId", taskExecutionsId),
            rowMapper
        );
    }

    @Override
    public List<Exceptions> findByParameterValuesId(Long parameterValuesId) {
        return jdbcTemplate.query(
            ExceptionsSql.FIND_BY_PARAMETER_VALUES_ID,
            Map.of("parameterValuesId", parameterValuesId),
            rowMapper
        );
    }

    @Override
    public List<Exceptions> findByFacilitiesId(Long facilitiesId) {
        return jdbcTemplate.query(
            ExceptionsSql.FIND_BY_FACILITIES_ID,
            Map.of("facilitiesId", facilitiesId),
            rowMapper
        );
    }

    @Override
    public List<Exceptions> findByJobsId(Long jobsId) {
        return jdbcTemplate.query(
            ExceptionsSql.FIND_BY_JOBS_ID,
            Map.of("jobsId", jobsId),
            rowMapper
        );
    }

}
