package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.TokenDao;
import com.example.pojogenerator.pojos.Token;
import com.example.daoGenerator.dao.mapper.TokenRowMapper;
import com.example.daoGenerator.dao.sql.TokenSql;

/**
 * Enhanced JDBC implementation of TokenDao
 * Key Type: CUSTOM_SINGLE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcTokenDao implements TokenDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final TokenRowMapper rowMapper;

    public JdbcTokenDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new TokenRowMapper();
    }

    @Override
    public Optional<Token> findByToken(String token) {
        try {
            Token result = jdbcTemplate.queryForObject(
                TokenSql.FIND_BY_TOKEN,
                Map.of("token", token),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteByToken(String token) {
        jdbcTemplate.update(TokenSql.DELETE_BY_TOKEN, Map.of("token", token));
    }

    @Override
    public boolean existsByToken(String token) {
        Integer count = jdbcTemplate.queryForObject(
            TokenSql.EXISTS_BY_TOKEN,
            Map.of("token", token),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<Token> findAll() {
        return jdbcTemplate.query(TokenSql.FIND_ALL, rowMapper);
    }

    @Override
    public Token save(Token entity) {
        if (entity.getToken() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private Token insert(Token entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(TokenSql.INSERT, params);
        return entity;
    }

    private Token update(Token entity) {
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(TokenSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(TokenSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    private MapSqlParameterSource createParameterMap(Token entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("usersId", entity.getUsersId());
        params.addValue("expiration", entity.getExpiration());
        params.addValue("type", entity.getType());
        params.addValue("token", entity.getToken());

        return params;
    }

}
