package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.TaskScheduleDao;
import com.example.pojogenerator.pojos.TaskSchedule;
import com.example.daoGenerator.dao.mapper.TaskScheduleRowMapper;
import com.example.daoGenerator.dao.sql.TaskScheduleSql;

/**
 * Enhanced JDBC implementation of TaskScheduleDao
 * Key Type: SINGLE_ID
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcTaskScheduleDao implements TaskScheduleDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final TaskScheduleRowMapper rowMapper;

    public JdbcTaskScheduleDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new TaskScheduleRowMapper();
    }

    @Override
    public Optional<TaskSchedule> findById(Long id) {
        try {
            TaskSchedule result = jdbcTemplate.queryForObject(
                TaskScheduleSql.FIND_BY_ID,
                Map.of("id", id),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteById(Long id) {
        jdbcTemplate.update(TaskScheduleSql.DELETE_BY_ID, Map.of("id", id));
    }

    @Override
    public boolean existsById(Long id) {
        Integer count = jdbcTemplate.queryForObject(
            TaskScheduleSql.EXISTS_BY_ID,
            Map.of("id", id),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<TaskSchedule> findAll() {
        return jdbcTemplate.query(TaskScheduleSql.FIND_ALL, rowMapper);
    }

    @Override
    public TaskSchedule save(TaskSchedule entity) {
        if (entity.getId() == null) {
            return insert(entity);
        } else {
            return update(entity);
        }
    }

    private TaskSchedule insert(TaskSchedule entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        Long generatedId = jdbcTemplate.queryForObject(
            TaskScheduleSql.INSERT,
            params,
            Long.class
        );
        entity.setId(generatedId);
        return entity;
    }

    private TaskSchedule update(TaskSchedule entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(TaskScheduleSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(TaskScheduleSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<TaskSchedule> findByReferencedTasksId(Long referencedTasksId) {
        return jdbcTemplate.query(
            TaskScheduleSql.FIND_BY_REFERENCED_TASKS_ID,
            Map.of("referencedTasksId", referencedTasksId),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(TaskSchedule entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("condition", entity.getCondition());
        params.addValue("startDateInterval", entity.getStartDateInterval());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("referencedTasksId", entity.getReferencedTasksId());
        params.addValue("modifiedAt", entity.getModifiedAt());
        if (entity.getDueDateDuration() != null) {
            params.addValue("dueDateDuration", entity.getDueDateDuration().toString());
        } else {
            params.addValue("dueDateDuration", null);
        }
        params.addValue("dueDateInterval", entity.getDueDateInterval());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("id", entity.getId());
        params.addValue("type", entity.getType());
        if (entity.getStartDateDuration() != null) {
            params.addValue("startDateDuration", entity.getStartDateDuration().toString());
        } else {
            params.addValue("startDateDuration", null);
        }

        return params;
    }

}
