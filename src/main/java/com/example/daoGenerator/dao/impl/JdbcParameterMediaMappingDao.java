package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.ParameterMediaMappingDao;
import com.example.pojogenerator.pojos.ParameterMediaMapping;
import com.example.daoGenerator.dao.mapper.ParameterMediaMappingRowMapper;
import com.example.daoGenerator.dao.sql.ParameterMediaMappingSql;

/**
 * Enhanced JDBC implementation of ParameterMediaMappingDao
 * Key Type: COMPOSITE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcParameterMediaMappingDao implements ParameterMediaMappingDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final ParameterMediaMappingRowMapper rowMapper;

    public JdbcParameterMediaMappingDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new ParameterMediaMappingRowMapper();
    }

    @Override
    public Optional<ParameterMediaMapping> findByParametersIdAndMediasId(Long parametersId, Long mediasId) {
        try {
            ParameterMediaMapping result = jdbcTemplate.queryForObject(
                ParameterMediaMappingSql.FIND_BY_PARAMETERS_ID_AND_MEDIAS_ID,
                Map.of("parametersId", parametersId, "mediasId", mediasId),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteByParametersIdAndMediasId(Long parametersId, Long mediasId) {
        jdbcTemplate.update(ParameterMediaMappingSql.DELETE_BY_PARAMETERS_ID_AND_MEDIAS_ID, Map.of("parametersId", parametersId, "mediasId", mediasId));
    }

    @Override
    public boolean existsByParametersIdAndMediasId(Long parametersId, Long mediasId) {
        Integer count = jdbcTemplate.queryForObject(
            ParameterMediaMappingSql.EXISTS_BY_PARAMETERS_ID_AND_MEDIAS_ID,
            Map.of("parametersId", parametersId, "mediasId", mediasId),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<ParameterMediaMapping> findAll() {
        return jdbcTemplate.query(ParameterMediaMappingSql.FIND_ALL, rowMapper);
    }

    @Override
    public ParameterMediaMapping save(ParameterMediaMapping entity) {
        if (existsByParametersIdAndMediasId(entity.getParametersId(), entity.getMediasId())) {
            return update(entity);
        } else {
            return insert(entity);
        }
    }

    private ParameterMediaMapping insert(ParameterMediaMapping entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();
        if (entity.getCreatedAt() == null) {
            entity.setCreatedAt(now);
        }
        entity.setModifiedAt(now);

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(ParameterMediaMappingSql.INSERT, params);
        return entity;
    }

    private ParameterMediaMapping update(ParameterMediaMapping entity) {
        entity.setModifiedAt(System.currentTimeMillis());

        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(ParameterMediaMappingSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(ParameterMediaMappingSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<ParameterMediaMapping> findByParametersId(Long parametersId) {
        return jdbcTemplate.query(
            ParameterMediaMappingSql.FIND_BY_PARAMETERS_ID,
            Map.of("parametersId", parametersId),
            rowMapper
        );
    }

    @Override
    public List<ParameterMediaMapping> findByModifiedBy(Long modifiedBy) {
        return jdbcTemplate.query(
            ParameterMediaMappingSql.FIND_BY_MODIFIED_BY,
            Map.of("modifiedBy", modifiedBy),
            rowMapper
        );
    }

    @Override
    public List<ParameterMediaMapping> findByMediasId(Long mediasId) {
        return jdbcTemplate.query(
            ParameterMediaMappingSql.FIND_BY_MEDIAS_ID,
            Map.of("mediasId", mediasId),
            rowMapper
        );
    }

    @Override
    public List<ParameterMediaMapping> findByCreatedBy(Long createdBy) {
        return jdbcTemplate.query(
            ParameterMediaMappingSql.FIND_BY_CREATED_BY,
            Map.of("createdBy", createdBy),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(ParameterMediaMapping entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("archived", entity.getArchived());
        params.addValue("createdAt", entity.getCreatedAt());
        params.addValue("mediasId", entity.getMediasId());
        params.addValue("createdBy", entity.getCreatedBy());
        params.addValue("modifiedAt", entity.getModifiedAt());
        params.addValue("modifiedBy", entity.getModifiedBy());
        params.addValue("parametersId", entity.getParametersId());

        return params;
    }

}
