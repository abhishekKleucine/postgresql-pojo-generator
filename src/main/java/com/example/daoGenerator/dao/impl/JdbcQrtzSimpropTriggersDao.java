package com.example.daoGenerator.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import com.example.daoGenerator.dao.interfaces.QrtzSimpropTriggersDao;
import com.example.pojogenerator.pojos.QrtzSimpropTriggers;
import com.example.daoGenerator.dao.mapper.QrtzSimpropTriggersRowMapper;
import com.example.daoGenerator.dao.sql.QrtzSimpropTriggersSql;

/**
 * Enhanced JDBC implementation of QrtzSimpropTriggersDao
 * Key Type: COMPOSITE_KEY
 * Generated by Enhanced JDBC DAO Generator
 */
@Repository
public class JdbcQrtzSimpropTriggersDao implements QrtzSimpropTriggersDao {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final QrtzSimpropTriggersRowMapper rowMapper;

    public JdbcQrtzSimpropTriggersDao(NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.rowMapper = new QrtzSimpropTriggersRowMapper();
    }

    @Override
    public Optional<QrtzSimpropTriggers> findByTriggerNameAndSchedNameAndTriggerGroup(String triggerName, String schedName, String triggerGroup) {
        try {
            QrtzSimpropTriggers result = jdbcTemplate.queryForObject(
                QrtzSimpropTriggersSql.FIND_BY_TRIGGER_NAME_AND_SCHED_NAME_AND_TRIGGER_GROUP,
                Map.of("triggerName", triggerName, "schedName", schedName, "triggerGroup", triggerGroup),
                rowMapper
            );
            return Optional.ofNullable(result);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

    @Override
    public void deleteByTriggerNameAndSchedNameAndTriggerGroup(String triggerName, String schedName, String triggerGroup) {
        jdbcTemplate.update(QrtzSimpropTriggersSql.DELETE_BY_TRIGGER_NAME_AND_SCHED_NAME_AND_TRIGGER_GROUP, Map.of("triggerName", triggerName, "schedName", schedName, "triggerGroup", triggerGroup));
    }

    @Override
    public boolean existsByTriggerNameAndSchedNameAndTriggerGroup(String triggerName, String schedName, String triggerGroup) {
        Integer count = jdbcTemplate.queryForObject(
            QrtzSimpropTriggersSql.EXISTS_BY_TRIGGER_NAME_AND_SCHED_NAME_AND_TRIGGER_GROUP,
            Map.of("triggerName", triggerName, "schedName", schedName, "triggerGroup", triggerGroup),
            Integer.class
        );
        return count != null && count > 0;
    }

    @Override
    public List<QrtzSimpropTriggers> findAll() {
        return jdbcTemplate.query(QrtzSimpropTriggersSql.FIND_ALL, rowMapper);
    }

    @Override
    public QrtzSimpropTriggers save(QrtzSimpropTriggers entity) {
        if (existsByTriggerNameAndSchedNameAndTriggerGroup(entity.getTriggerName(), entity.getSchedName(), entity.getTriggerGroup())) {
            return update(entity);
        } else {
            return insert(entity);
        }
    }

    private QrtzSimpropTriggers insert(QrtzSimpropTriggers entity) {
        // Set audit fields if they exist
        long now = System.currentTimeMillis();

        MapSqlParameterSource params = createParameterMap(entity);
        jdbcTemplate.update(QrtzSimpropTriggersSql.INSERT, params);
        return entity;
    }

    private QrtzSimpropTriggers update(QrtzSimpropTriggers entity) {
        MapSqlParameterSource params = createParameterMap(entity);
        int rowsAffected = jdbcTemplate.update(QrtzSimpropTriggersSql.UPDATE, params);
        
        if (rowsAffected == 0) {
            throw new RuntimeException("Entity not found for update");
        }
        return entity;
    }

    @Override
    public long count() {
        Long result = jdbcTemplate.queryForObject(QrtzSimpropTriggersSql.COUNT, Map.of(), Long.class);
        return result != null ? result : 0L;
    }

    @Override
    public List<QrtzSimpropTriggers> findByTriggerName(Long triggerName) {
        return jdbcTemplate.query(
            QrtzSimpropTriggersSql.FIND_BY_TRIGGER_NAME,
            Map.of("triggerName", triggerName),
            rowMapper
        );
    }

    @Override
    public List<QrtzSimpropTriggers> findBySchedName(Long schedName) {
        return jdbcTemplate.query(
            QrtzSimpropTriggersSql.FIND_BY_SCHED_NAME,
            Map.of("schedName", schedName),
            rowMapper
        );
    }

    @Override
    public List<QrtzSimpropTriggers> findByTriggerGroup(Long triggerGroup) {
        return jdbcTemplate.query(
            QrtzSimpropTriggersSql.FIND_BY_TRIGGER_GROUP,
            Map.of("triggerGroup", triggerGroup),
            rowMapper
        );
    }

    private MapSqlParameterSource createParameterMap(QrtzSimpropTriggers entity) {
        MapSqlParameterSource params = new MapSqlParameterSource();

        params.addValue("strProp3", entity.getStrProp3());
        params.addValue("strProp2", entity.getStrProp2());
        params.addValue("strProp1", entity.getStrProp1());
        params.addValue("triggerName", entity.getTriggerName());
        params.addValue("intProp1", entity.getIntProp1());
        params.addValue("triggerGroup", entity.getTriggerGroup());
        params.addValue("boolProp1", entity.getBoolProp1());
        params.addValue("boolProp2", entity.getBoolProp2());
        params.addValue("intProp2", entity.getIntProp2());
        params.addValue("decProp2", entity.getDecProp2());
        params.addValue("schedName", entity.getSchedName());
        params.addValue("decProp1", entity.getDecProp1());
        params.addValue("longProp1", entity.getLongProp1());
        params.addValue("longProp2", entity.getLongProp2());

        return params;
    }

}
