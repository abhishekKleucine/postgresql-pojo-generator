package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: qrtz_job_details
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: qrtz_job_details
 * - Primary Keys: sched_name, job_name, job_group
 * 
 * Indexes:
 * - idx_qrtz_j_req_recovery: sched_name, requests_recovery
 * - idx_qrtz_j_grp: sched_name, job_group
 */
public class QrtzJobDetail implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     */
    private String schedName;

    /**
     * Database column: job_name
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String jobName;

    /**
     * Database column: job_group
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String jobGroup;

    /**
     * Database column: description
     * Type: varchar(250)
     */
    private String description;

    /**
     * Database column: job_class_name
     * Type: varchar(250) NOT NULL
     */
    private String jobClassName;

    /**
     * Database column: is_durable
     * Type: bool NOT NULL
     */
    private Boolean isDurable;

    /**
     * Database column: is_nonconcurrent
     * Type: bool NOT NULL
     */
    private Boolean isNonconcurrent;

    /**
     * Database column: is_update_data
     * Type: bool NOT NULL
     */
    private Boolean isUpdateData;

    /**
     * Database column: requests_recovery
     * Type: bool NOT NULL
     */
    private Boolean requestsRecovery;

    /**
     * Database column: job_data
     * Type: bytea(2147483647)
     */
    private String jobData;

    /**
     * Default constructor
     */
    public QrtzJobDetail() {
    }

    /**
     * Gets sched_name
     * @return String
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets sched_name
     * @param schedName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null");
        }
        if (schedName != null && schedName.length() > 120) {
            throw new IllegalArgumentException("sched_name length cannot exceed 120 characters");
        }
        this.schedName = schedName;
    }

    /**
     * Gets job_name
     * @return String
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Sets job_name
     * @param jobName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobName(String jobName) {
        if (jobName == null) {
            throw new IllegalArgumentException("job_name cannot be null");
        }
        if (jobName != null && jobName.length() > 200) {
            throw new IllegalArgumentException("job_name length cannot exceed 200 characters");
        }
        this.jobName = jobName;
    }

    /**
     * Gets job_group
     * @return String
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Sets job_group
     * @param jobGroup the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobGroup(String jobGroup) {
        if (jobGroup == null) {
            throw new IllegalArgumentException("job_group cannot be null");
        }
        if (jobGroup != null && jobGroup.length() > 200) {
            throw new IllegalArgumentException("job_group length cannot exceed 200 characters");
        }
        this.jobGroup = jobGroup;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 250) {
            throw new IllegalArgumentException("description length cannot exceed 250 characters");
        }
        this.description = description;
    }

    /**
     * Gets job_class_name
     * @return String
     */
    public String getJobClassName() {
        return this.jobClassName;
    }

    /**
     * Sets job_class_name
     * @param jobClassName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobClassName(String jobClassName) {
        if (jobClassName == null) {
            throw new IllegalArgumentException("job_class_name cannot be null");
        }
        if (jobClassName != null && jobClassName.length() > 250) {
            throw new IllegalArgumentException("job_class_name length cannot exceed 250 characters");
        }
        this.jobClassName = jobClassName;
    }

    /**
     * Gets is_durable
     * @return Boolean
     */
    public Boolean getIsDurable() {
        return this.isDurable;
    }

    /**
     * Sets is_durable
     * @param isDurable the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsDurable(Boolean isDurable) {
        if (isDurable == null) {
            throw new IllegalArgumentException("is_durable cannot be null");
        }
        this.isDurable = isDurable;
    }

    /**
     * Gets is_nonconcurrent
     * @return Boolean
     */
    public Boolean getIsNonconcurrent() {
        return this.isNonconcurrent;
    }

    /**
     * Sets is_nonconcurrent
     * @param isNonconcurrent the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsNonconcurrent(Boolean isNonconcurrent) {
        if (isNonconcurrent == null) {
            throw new IllegalArgumentException("is_nonconcurrent cannot be null");
        }
        this.isNonconcurrent = isNonconcurrent;
    }

    /**
     * Gets is_update_data
     * @return Boolean
     */
    public Boolean getIsUpdateData() {
        return this.isUpdateData;
    }

    /**
     * Sets is_update_data
     * @param isUpdateData the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsUpdateData(Boolean isUpdateData) {
        if (isUpdateData == null) {
            throw new IllegalArgumentException("is_update_data cannot be null");
        }
        this.isUpdateData = isUpdateData;
    }

    /**
     * Gets requests_recovery
     * @return Boolean
     */
    public Boolean getRequestsRecovery() {
        return this.requestsRecovery;
    }

    /**
     * Sets requests_recovery
     * @param requestsRecovery the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRequestsRecovery(Boolean requestsRecovery) {
        if (requestsRecovery == null) {
            throw new IllegalArgumentException("requests_recovery cannot be null");
        }
        this.requestsRecovery = requestsRecovery;
    }

    /**
     * Gets job_data
     * @return String
     */
    public String getJobData() {
        return this.jobData;
    }

    /**
     * Sets job_data
     * @param jobData the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobData(String jobData) {
        if (jobData != null && jobData.length() > 2147483647) {
            throw new IllegalArgumentException("job_data length cannot exceed 2147483647 characters");
        }
        this.jobData = jobData;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzJobDetail other = (QrtzJobDetail) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.jobName, other.jobName) && Objects.equals(this.jobGroup, other.jobGroup);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.jobName, this.jobGroup);
    }

    @Override
    public String toString() {
        return "QrtzJobDetail{" +
                "schedName=" + schedName +
                ", jobName=" + jobName +
                ", jobGroup=" + jobGroup +
                ", description=" + description +
                ", jobClassName=" + jobClassName +
                ", isDurable=" + isDurable +
                ", isNonconcurrent=" + isNonconcurrent +
                ", isUpdateData=" + isUpdateData +
                ", requestsRecovery=" + requestsRecovery +
                ", jobData=" + jobData +
                '}';
    }
}
