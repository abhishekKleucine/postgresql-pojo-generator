package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: effects
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: effects
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - actions_id → actions.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class Effects implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: actions_id
     * Type: int8 NOT NULL
     * Foreign Key → actions.id
     */
    private Long actionsId;

    /**
     * Database column: order_tree
     * Type: int4 NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: type
     * Type: effects_type(2147483647) NOT NULL
     */
    private String type;

    /**
     * Database column: query
     * Type: jsonb DEFAULT: '{}'::jsonb
     */
    private JsonNode query;

    /**
     * Database column: api_endpoint
     * Type: jsonb DEFAULT: '{}'::jsonb
     */
    private JsonNode apiEndpoint;

    /**
     * Database column: api_method
     * Type: varchar(20)
     */
    private String apiMethod;

    /**
     * Database column: api_payload
     * Type: jsonb DEFAULT: '{}'::jsonb
     */
    private JsonNode apiPayload;

    /**
     * Database column: api_headers
     * Type: jsonb
     */
    private JsonNode apiHeaders;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: name
     * Type: text(2147483647) NOT NULL
     */
    private String name;

    /**
     * Database column: archived
     * Type: bool DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: javascript_enabled
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean javascriptEnabled;

    /**
     * Default constructor
     */
    public Effects() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets actions_id
     * @return Long
     */
    public Long getActionsId() {
        return this.actionsId;
    }

    /**
     * Sets actions_id
     * @param actionsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setActionsId(Long actionsId) {
        if (actionsId == null) {
            throw new IllegalArgumentException("actions_id cannot be null");
        }
        this.actionsId = actionsId;
    }

    /**
     * Gets order_tree
     * @return Integer
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets order_tree
     * @param orderTree the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (type != null && type.length() > 2147483647) {
            throw new IllegalArgumentException("type length cannot exceed 2147483647 characters");
        }
        this.type = type;
    }

    /**
     * Gets query
     * @return JsonNode
     */
    public JsonNode getQuery() {
        return this.query;
    }

    /**
     * Sets query
     * @param query the value to set
     */
    public void setQuery(JsonNode query) {
        this.query = query;
    }

    /**
     * Gets api_endpoint
     * @return JsonNode
     */
    public JsonNode getApiEndpoint() {
        return this.apiEndpoint;
    }

    /**
     * Sets api_endpoint
     * @param apiEndpoint the value to set
     */
    public void setApiEndpoint(JsonNode apiEndpoint) {
        this.apiEndpoint = apiEndpoint;
    }

    /**
     * Gets api_method
     * @return String
     */
    public String getApiMethod() {
        return this.apiMethod;
    }

    /**
     * Sets api_method
     * @param apiMethod the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setApiMethod(String apiMethod) {
        if (apiMethod != null && apiMethod.length() > 20) {
            throw new IllegalArgumentException("api_method length cannot exceed 20 characters");
        }
        this.apiMethod = apiMethod;
    }

    /**
     * Gets api_payload
     * @return JsonNode
     */
    public JsonNode getApiPayload() {
        return this.apiPayload;
    }

    /**
     * Sets api_payload
     * @param apiPayload the value to set
     */
    public void setApiPayload(JsonNode apiPayload) {
        this.apiPayload = apiPayload;
    }

    /**
     * Gets api_headers
     * @return JsonNode
     */
    public JsonNode getApiHeaders() {
        return this.apiHeaders;
    }

    /**
     * Sets api_headers
     * @param apiHeaders the value to set
     */
    public void setApiHeaders(JsonNode apiHeaders) {
        this.apiHeaders = apiHeaders;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets name
     * @return String
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets name
     * @param name the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null");
        }
        if (name != null && name.length() > 2147483647) {
            throw new IllegalArgumentException("name length cannot exceed 2147483647 characters");
        }
        this.name = name;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 2147483647) {
            throw new IllegalArgumentException("description length cannot exceed 2147483647 characters");
        }
        this.description = description;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets javascript_enabled
     * @return Boolean
     */
    public Boolean getJavascriptEnabled() {
        return this.javascriptEnabled;
    }

    /**
     * Sets javascript_enabled
     * @param javascriptEnabled the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJavascriptEnabled(Boolean javascriptEnabled) {
        if (javascriptEnabled == null) {
            throw new IllegalArgumentException("javascript_enabled cannot be null");
        }
        this.javascriptEnabled = javascriptEnabled;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Effects other = (Effects) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Effects{" +
                "id=" + id +
                ", actionsId=" + actionsId +
                ", orderTree=" + orderTree +
                ", type=" + type +
                ", query=" + query +
                ", apiEndpoint=" + apiEndpoint +
                ", apiMethod=" + apiMethod +
                ", apiPayload=" + apiPayload +
                ", apiHeaders=" + apiHeaders +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", name=" + name +
                ", archived=" + archived +
                ", description=" + description +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", javascriptEnabled=" + javascriptEnabled +
                '}';
    }
}
