package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: task_executor_locks
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: task_executor_locks
 * - Primary Keys: id
 * 
 * Indexes:
 * - unique_lock_type (UNIQUE): tasks_id, referenced_tasks_id, lock_type
 * 
 * Foreign Keys:
 * - tasks_id → tasks.id
 * - referenced_tasks_id → tasks.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class TaskExecutorLocks implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: tasks_id
     * Type: int8 NOT NULL
     * Foreign Key → tasks.id
     */
    private Long tasksId;

    /**
     * Database column: lock_type
     * Type: varchar(50) NOT NULL
     */
    private String lockType;

    /**
     * Database column: referenced_tasks_id
     * Type: int8 NOT NULL
     * Foreign Key → tasks.id
     */
    private Long referencedTasksId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public TaskExecutorLocks() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets tasks_id
     * @return Long
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets tasks_id
     * @param tasksId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTasksId(Long tasksId) {
        if (tasksId == null) {
            throw new IllegalArgumentException("tasks_id cannot be null");
        }
        this.tasksId = tasksId;
    }

    /**
     * Gets lock_type
     * @return String
     */
    public String getLockType() {
        return this.lockType;
    }

    /**
     * Sets lock_type
     * @param lockType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLockType(String lockType) {
        if (lockType == null) {
            throw new IllegalArgumentException("lock_type cannot be null");
        }
        if (lockType != null && lockType.length() > 50) {
            throw new IllegalArgumentException("lock_type length cannot exceed 50 characters");
        }
        this.lockType = lockType;
    }

    /**
     * Gets referenced_tasks_id
     * @return Long
     */
    public Long getReferencedTasksId() {
        return this.referencedTasksId;
    }

    /**
     * Sets referenced_tasks_id
     * @param referencedTasksId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setReferencedTasksId(Long referencedTasksId) {
        if (referencedTasksId == null) {
            throw new IllegalArgumentException("referenced_tasks_id cannot be null");
        }
        this.referencedTasksId = referencedTasksId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskExecutorLocks other = (TaskExecutorLocks) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "TaskExecutorLocks{" +
                "id=" + id +
                ", tasksId=" + tasksId +
                ", lockType=" + lockType +
                ", referencedTasksId=" + referencedTasksId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
