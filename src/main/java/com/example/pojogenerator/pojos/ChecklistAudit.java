package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: checklist_audits
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: checklist_audits
 * - Primary Keys: id
 * 
 * Indexes:
 * - idxd747438b94e0469eb7d70aad: organisations_id
 * - idx215d20d60f004df08ae5c3e5 (UNIQUE): id
 * - idxb8b9efc9305b4c659da3787a: checklists_id
 */
public class ChecklistAudit implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: checklists_id
     * Type: int8 NOT NULL
     */
    private Long checklistsId;

    /**
     * Database column: action
     * Type: varchar(50)
     */
    private String action;

    /**
     * Database column: details
     * Type: text(2147483647)
     */
    private String details;

    /**
     * Database column: triggered_at
     * Type: int8 NOT NULL
     */
    private Long triggeredAt;

    /**
     * Database column: triggered_by
     * Type: int8 NOT NULL
     */
    private Long triggeredBy;

    /**
     * Database column: organisations_id
     * Type: int8 NOT NULL
     */
    private Long organisationsId;

    /**
     * Database column: stages_id
     * Type: int8
     */
    private Long stagesId;

    /**
     * Database column: tasks_id
     * Type: int8
     */
    private Long tasksId;

    /**
     * Database column: triggered_for
     * Type: int8
     */
    private Long triggeredFor;

    /**
     * Default constructor
     */
    public ChecklistAudit() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets checklists_id
     * @return Long
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets checklists_id
     * @param checklistsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets action
     * @return String
     */
    public String getAction() {
        return this.action;
    }

    /**
     * Sets action
     * @param action the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setAction(String action) {
        if (action != null && action.length() > 50) {
            throw new IllegalArgumentException("action length cannot exceed 50 characters");
        }
        this.action = action;
    }

    /**
     * Gets details
     * @return String
     */
    public String getDetails() {
        return this.details;
    }

    /**
     * Sets details
     * @param details the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDetails(String details) {
        if (details != null && details.length() > 2147483647) {
            throw new IllegalArgumentException("details length cannot exceed 2147483647 characters");
        }
        this.details = details;
    }

    /**
     * Gets triggered_at
     * @return Long
     */
    public Long getTriggeredAt() {
        return this.triggeredAt;
    }

    /**
     * Sets triggered_at
     * @param triggeredAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggeredAt(Long triggeredAt) {
        if (triggeredAt == null) {
            throw new IllegalArgumentException("triggered_at cannot be null");
        }
        this.triggeredAt = triggeredAt;
    }

    /**
     * Gets triggered_by
     * @return Long
     */
    public Long getTriggeredBy() {
        return this.triggeredBy;
    }

    /**
     * Sets triggered_by
     * @param triggeredBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggeredBy(Long triggeredBy) {
        if (triggeredBy == null) {
            throw new IllegalArgumentException("triggered_by cannot be null");
        }
        this.triggeredBy = triggeredBy;
    }

    /**
     * Gets organisations_id
     * @return Long
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets organisations_id
     * @param organisationsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets stages_id
     * @return Long
     */
    public Long getStagesId() {
        return this.stagesId;
    }

    /**
     * Sets stages_id
     * @param stagesId the value to set
     */
    public void setStagesId(Long stagesId) {
        this.stagesId = stagesId;
    }

    /**
     * Gets tasks_id
     * @return Long
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets tasks_id
     * @param tasksId the value to set
     */
    public void setTasksId(Long tasksId) {
        this.tasksId = tasksId;
    }

    /**
     * Gets triggered_for
     * @return Long
     */
    public Long getTriggeredFor() {
        return this.triggeredFor;
    }

    /**
     * Sets triggered_for
     * @param triggeredFor the value to set
     */
    public void setTriggeredFor(Long triggeredFor) {
        this.triggeredFor = triggeredFor;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ChecklistAudit other = (ChecklistAudit) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "ChecklistAudit{" +
                "id=" + id +
                ", checklistsId=" + checklistsId +
                ", action=" + action +
                ", details=" + details +
                ", triggeredAt=" + triggeredAt +
                ", triggeredBy=" + triggeredBy +
                ", organisationsId=" + organisationsId +
                ", stagesId=" + stagesId +
                ", tasksId=" + tasksId +
                ", triggeredFor=" + triggeredFor +
                '}';
    }
}
