package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: tasks
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: tasks
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx132468d6e0404caa9ce0e56c: stages_id
 * 
 * Foreign Keys:
 * - stages_id → stages.id
 * - created_by → users.id
 * - modified_by → users.id
 * - task_recurrences_id → task_recurrences.id
 */
public class Tasks implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: varchar(512) NOT NULL
     */
    private String name;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: order_tree
     * Type: int4 NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: has_stop
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean hasStop;

    /**
     * Database column: max_period
     * Type: int8
     */
    private Long maxPeriod;

    /**
     * Database column: min_period
     * Type: int8
     */
    private Long minPeriod;

    /**
     * Database column: timer_operator
     * Type: varchar(50)
     */
    private String timerOperator;

    /**
     * Database column: is_timed
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean isTimed;

    /**
     * Database column: is_mandatory
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean isMandatory;

    /**
     * Database column: stages_id
     * Type: int8 NOT NULL
     * Foreign Key → stages.id
     */
    private Long stagesId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: enable_recurrence
     * Type: bool DEFAULT: false
     */
    private Boolean enableRecurrence;

    /**
     * Database column: task_recurrences_id
     * Type: int8
     * Foreign Key → task_recurrences.id
     */
    private Long taskRecurrencesId;

    /**
     * Database column: enable_scheduling
     * Type: bool DEFAULT: false
     */
    private Boolean enableScheduling;

    /**
     * Database column: task_schedules_id
     * Type: int8
     */
    private Long taskSchedulesId;

    /**
     * Database column: is_solo_task
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean isSoloTask;

    /**
     * Database column: has_executor_lock
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean hasExecutorLock;

    /**
     * Database column: has_bulk_verification
     * Type: bool DEFAULT: false
     */
    private Boolean hasBulkVerification;

    /**
     * Database column: has_interlocks
     * Type: bool DEFAULT: false
     */
    private Boolean hasInterlocks;

    /**
     * Default constructor
     */
    public Tasks() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets name
     * @return String
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets name
     * @param name the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null");
        }
        if (name != null && name.length() > 512) {
            throw new IllegalArgumentException("name length cannot exceed 512 characters");
        }
        this.name = name;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets order_tree
     * @return Integer
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets order_tree
     * @param orderTree the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets has_stop
     * @return Boolean
     */
    public Boolean getHasStop() {
        return this.hasStop;
    }

    /**
     * Sets has_stop
     * @param hasStop the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setHasStop(Boolean hasStop) {
        if (hasStop == null) {
            throw new IllegalArgumentException("has_stop cannot be null");
        }
        this.hasStop = hasStop;
    }

    /**
     * Gets max_period
     * @return Long
     */
    public Long getMaxPeriod() {
        return this.maxPeriod;
    }

    /**
     * Sets max_period
     * @param maxPeriod the value to set
     */
    public void setMaxPeriod(Long maxPeriod) {
        this.maxPeriod = maxPeriod;
    }

    /**
     * Gets min_period
     * @return Long
     */
    public Long getMinPeriod() {
        return this.minPeriod;
    }

    /**
     * Sets min_period
     * @param minPeriod the value to set
     */
    public void setMinPeriod(Long minPeriod) {
        this.minPeriod = minPeriod;
    }

    /**
     * Gets timer_operator
     * @return String
     */
    public String getTimerOperator() {
        return this.timerOperator;
    }

    /**
     * Sets timer_operator
     * @param timerOperator the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTimerOperator(String timerOperator) {
        if (timerOperator != null && timerOperator.length() > 50) {
            throw new IllegalArgumentException("timer_operator length cannot exceed 50 characters");
        }
        this.timerOperator = timerOperator;
    }

    /**
     * Gets is_timed
     * @return Boolean
     */
    public Boolean getIsTimed() {
        return this.isTimed;
    }

    /**
     * Sets is_timed
     * @param isTimed the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsTimed(Boolean isTimed) {
        if (isTimed == null) {
            throw new IllegalArgumentException("is_timed cannot be null");
        }
        this.isTimed = isTimed;
    }

    /**
     * Gets is_mandatory
     * @return Boolean
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets is_mandatory
     * @param isMandatory the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsMandatory(Boolean isMandatory) {
        if (isMandatory == null) {
            throw new IllegalArgumentException("is_mandatory cannot be null");
        }
        this.isMandatory = isMandatory;
    }

    /**
     * Gets stages_id
     * @return Long
     */
    public Long getStagesId() {
        return this.stagesId;
    }

    /**
     * Sets stages_id
     * @param stagesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setStagesId(Long stagesId) {
        if (stagesId == null) {
            throw new IllegalArgumentException("stages_id cannot be null");
        }
        this.stagesId = stagesId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets enable_recurrence
     * @return Boolean
     */
    public Boolean getEnableRecurrence() {
        return this.enableRecurrence;
    }

    /**
     * Sets enable_recurrence
     * @param enableRecurrence the value to set
     */
    public void setEnableRecurrence(Boolean enableRecurrence) {
        this.enableRecurrence = enableRecurrence;
    }

    /**
     * Gets task_recurrences_id
     * @return Long
     */
    public Long getTaskRecurrencesId() {
        return this.taskRecurrencesId;
    }

    /**
     * Sets task_recurrences_id
     * @param taskRecurrencesId the value to set
     */
    public void setTaskRecurrencesId(Long taskRecurrencesId) {
        this.taskRecurrencesId = taskRecurrencesId;
    }

    /**
     * Gets enable_scheduling
     * @return Boolean
     */
    public Boolean getEnableScheduling() {
        return this.enableScheduling;
    }

    /**
     * Sets enable_scheduling
     * @param enableScheduling the value to set
     */
    public void setEnableScheduling(Boolean enableScheduling) {
        this.enableScheduling = enableScheduling;
    }

    /**
     * Gets task_schedules_id
     * @return Long
     */
    public Long getTaskSchedulesId() {
        return this.taskSchedulesId;
    }

    /**
     * Sets task_schedules_id
     * @param taskSchedulesId the value to set
     */
    public void setTaskSchedulesId(Long taskSchedulesId) {
        this.taskSchedulesId = taskSchedulesId;
    }

    /**
     * Gets is_solo_task
     * @return Boolean
     */
    public Boolean getIsSoloTask() {
        return this.isSoloTask;
    }

    /**
     * Sets is_solo_task
     * @param isSoloTask the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsSoloTask(Boolean isSoloTask) {
        if (isSoloTask == null) {
            throw new IllegalArgumentException("is_solo_task cannot be null");
        }
        this.isSoloTask = isSoloTask;
    }

    /**
     * Gets has_executor_lock
     * @return Boolean
     */
    public Boolean getHasExecutorLock() {
        return this.hasExecutorLock;
    }

    /**
     * Sets has_executor_lock
     * @param hasExecutorLock the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setHasExecutorLock(Boolean hasExecutorLock) {
        if (hasExecutorLock == null) {
            throw new IllegalArgumentException("has_executor_lock cannot be null");
        }
        this.hasExecutorLock = hasExecutorLock;
    }

    /**
     * Gets has_bulk_verification
     * @return Boolean
     */
    public Boolean getHasBulkVerification() {
        return this.hasBulkVerification;
    }

    /**
     * Sets has_bulk_verification
     * @param hasBulkVerification the value to set
     */
    public void setHasBulkVerification(Boolean hasBulkVerification) {
        this.hasBulkVerification = hasBulkVerification;
    }

    /**
     * Gets has_interlocks
     * @return Boolean
     */
    public Boolean getHasInterlocks() {
        return this.hasInterlocks;
    }

    /**
     * Sets has_interlocks
     * @param hasInterlocks the value to set
     */
    public void setHasInterlocks(Boolean hasInterlocks) {
        this.hasInterlocks = hasInterlocks;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Tasks other = (Tasks) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Tasks{" +
                "id=" + id +
                ", name=" + name +
                ", archived=" + archived +
                ", orderTree=" + orderTree +
                ", hasStop=" + hasStop +
                ", maxPeriod=" + maxPeriod +
                ", minPeriod=" + minPeriod +
                ", timerOperator=" + timerOperator +
                ", isTimed=" + isTimed +
                ", isMandatory=" + isMandatory +
                ", stagesId=" + stagesId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", enableRecurrence=" + enableRecurrence +
                ", taskRecurrencesId=" + taskRecurrencesId +
                ", enableScheduling=" + enableScheduling +
                ", taskSchedulesId=" + taskSchedulesId +
                ", isSoloTask=" + isSoloTask +
                ", hasExecutorLock=" + hasExecutorLock +
                ", hasBulkVerification=" + hasBulkVerification +
                ", hasInterlocks=" + hasInterlocks +
                '}';
    }
}
