package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: qrtz_cron_triggers
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: qrtz_cron_triggers
 * - Primary Keys: sched_name, trigger_name, trigger_group
 * 
 * Foreign Keys:
 * - sched_name → qrtz_triggers.sched_name
 * - trigger_name → qrtz_triggers.trigger_name
 * - trigger_group → qrtz_triggers.trigger_group
 */
public class QrtzCronTriggers implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_triggers.sched_name
     */
    private String schedName;

    /**
     * Database column: trigger_name
     * Type: varchar(200) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_triggers.trigger_name
     */
    private String triggerName;

    /**
     * Database column: trigger_group
     * Type: varchar(200) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_triggers.trigger_group
     */
    private String triggerGroup;

    /**
     * Database column: cron_expression
     * Type: varchar(120) NOT NULL
     */
    private String cronExpression;

    /**
     * Database column: time_zone_id
     * Type: varchar(80)
     */
    private String timeZoneId;

    /**
     * Default constructor
     */
    public QrtzCronTriggers() {
    }

    /**
     * Gets sched_name
     * @return String
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets sched_name
     * @param schedName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null");
        }
        if (schedName != null && schedName.length() > 120) {
            throw new IllegalArgumentException("sched_name length cannot exceed 120 characters");
        }
        this.schedName = schedName;
    }

    /**
     * Gets trigger_name
     * @return String
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Sets trigger_name
     * @param triggerName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerName(String triggerName) {
        if (triggerName == null) {
            throw new IllegalArgumentException("trigger_name cannot be null");
        }
        if (triggerName != null && triggerName.length() > 200) {
            throw new IllegalArgumentException("trigger_name length cannot exceed 200 characters");
        }
        this.triggerName = triggerName;
    }

    /**
     * Gets trigger_group
     * @return String
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Sets trigger_group
     * @param triggerGroup the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerGroup(String triggerGroup) {
        if (triggerGroup == null) {
            throw new IllegalArgumentException("trigger_group cannot be null");
        }
        if (triggerGroup != null && triggerGroup.length() > 200) {
            throw new IllegalArgumentException("trigger_group length cannot exceed 200 characters");
        }
        this.triggerGroup = triggerGroup;
    }

    /**
     * Gets cron_expression
     * @return String
     */
    public String getCronExpression() {
        return this.cronExpression;
    }

    /**
     * Sets cron_expression
     * @param cronExpression the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCronExpression(String cronExpression) {
        if (cronExpression == null) {
            throw new IllegalArgumentException("cron_expression cannot be null");
        }
        if (cronExpression != null && cronExpression.length() > 120) {
            throw new IllegalArgumentException("cron_expression length cannot exceed 120 characters");
        }
        this.cronExpression = cronExpression;
    }

    /**
     * Gets time_zone_id
     * @return String
     */
    public String getTimeZoneId() {
        return this.timeZoneId;
    }

    /**
     * Sets time_zone_id
     * @param timeZoneId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTimeZoneId(String timeZoneId) {
        if (timeZoneId != null && timeZoneId.length() > 80) {
            throw new IllegalArgumentException("time_zone_id length cannot exceed 80 characters");
        }
        this.timeZoneId = timeZoneId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzCronTriggers other = (QrtzCronTriggers) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.triggerName, other.triggerName) && Objects.equals(this.triggerGroup, other.triggerGroup);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.triggerName, this.triggerGroup);
    }

    @Override
    public String toString() {
        return "QrtzCronTriggers{" +
                "schedName=" + schedName +
                ", triggerName=" + triggerName +
                ", triggerGroup=" + triggerGroup +
                ", cronExpression=" + cronExpression +
                ", timeZoneId=" + timeZoneId +
                '}';
    }
}
