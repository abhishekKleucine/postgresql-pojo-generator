package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: tokens
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: tokens
 * - Primary Keys: token
 * 
 * Indexes:
 * - idxgx5w2mh7k08opon3a4xb1sasg: type, token
 */
public class Token implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: token
     * Type: varchar(32) NOT NULL
     * Primary Key
     */
    private String token;

    /**
     * Database column: expiration
     * Type: int8
     */
    private Long expiration;

    /**
     * Database column: type
     * Type: varchar(32) NOT NULL
     */
    private String type;

    /**
     * Database column: users_id
     * Type: int8
     */
    private Long usersId;

    /**
     * Default constructor
     */
    public Token() {
    }

    /**
     * Gets token
     * @return String
     */
    public String getToken() {
        return this.token;
    }

    /**
     * Sets token
     * @param token the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setToken(String token) {
        if (token == null) {
            throw new IllegalArgumentException("token cannot be null");
        }
        if (token != null && token.length() > 32) {
            throw new IllegalArgumentException("token length cannot exceed 32 characters");
        }
        this.token = token;
    }

    /**
     * Gets expiration
     * @return Long
     */
    public Long getExpiration() {
        return this.expiration;
    }

    /**
     * Sets expiration
     * @param expiration the value to set
     */
    public void setExpiration(Long expiration) {
        this.expiration = expiration;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (type != null && type.length() > 32) {
            throw new IllegalArgumentException("type length cannot exceed 32 characters");
        }
        this.type = type;
    }

    /**
     * Gets users_id
     * @return Long
     */
    public Long getUsersId() {
        return this.usersId;
    }

    /**
     * Sets users_id
     * @param usersId the value to set
     */
    public void setUsersId(Long usersId) {
        this.usersId = usersId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Token other = (Token) obj;
        return Objects.equals(this.token, other.token);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.token);
    }

    @Override
    public String toString() {
        return "Token{" +
                "token=" + token +
                ", expiration=" + expiration +
                ", type=" + type +
                ", usersId=" + usersId +
                '}';
    }
}
