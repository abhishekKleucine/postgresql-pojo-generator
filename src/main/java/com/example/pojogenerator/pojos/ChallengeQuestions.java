package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: challenge_questions
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: challenge_questions
 * - Primary Keys: id
 */
public class ChallengeQuestions implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int4 NOT NULL
     * Primary Key
     */
    private Integer id;

    /**
     * Database column: question
     * Type: varchar(512) NOT NULL
     */
    private String question;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8
     */
    private Long createdBy;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: modified_by
     * Type: int8
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public ChallengeQuestions() {
    }

    /**
     * Gets id
     * @return Integer
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Integer id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets question
     * @return String
     */
    public String getQuestion() {
        return this.question;
    }

    /**
     * Sets question
     * @param question the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setQuestion(String question) {
        if (question == null) {
            throw new IllegalArgumentException("question cannot be null");
        }
        if (question != null && question.length() > 512) {
            throw new IllegalArgumentException("question length cannot exceed 512 characters");
        }
        this.question = question;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ChallengeQuestions other = (ChallengeQuestions) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "ChallengeQuestions{" +
                "id=" + id +
                ", question=" + question +
                ", archived=" + archived +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                ", modifiedAt=" + modifiedAt +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
