package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: facilities
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: facilities
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - organisations_id → organisations.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class Facilities implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: varchar(255)
     */
    private String name;

    /**
     * Database column: organisations_id
     * Type: int8 NOT NULL
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: archived
     * Type: bool DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: time_zone
     * Type: varchar(30) NOT NULL DEFAULT: 'Asia/Kolkata'::character varying
     */
    private String timeZone;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: date_format
     * Type: varchar(50) NOT NULL DEFAULT: 'MMM dd, yyyy'::character varying
     */
    private String dateFormat;

    /**
     * Database column: date_time_format
     * Type: varchar(50) NOT NULL DEFAULT: 'MMM dd, yyyy HH:mm'::character varying
     */
    private String dateTimeFormat;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: time_format
     * Type: varchar(50) NOT NULL DEFAULT: 'HH:mm'::character varying
     */
    private String timeFormat;

    /**
     * Database column: logo_url
     * Type: varchar(255)
     */
    private String logoUrl;

    /**
     * Default constructor
     */
    public Facilities() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets name
     * @return String
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets name
     * @param name the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setName(String name) {
        if (name != null && name.length() > 255) {
            throw new IllegalArgumentException("name length cannot exceed 255 characters");
        }
        this.name = name;
    }

    /**
     * Gets organisations_id
     * @return Long
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets organisations_id
     * @param organisationsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets time_zone
     * @return String
     */
    public String getTimeZone() {
        return this.timeZone;
    }

    /**
     * Sets time_zone
     * @param timeZone the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTimeZone(String timeZone) {
        if (timeZone == null) {
            throw new IllegalArgumentException("time_zone cannot be null");
        }
        if (timeZone != null && timeZone.length() > 30) {
            throw new IllegalArgumentException("time_zone length cannot exceed 30 characters");
        }
        this.timeZone = timeZone;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets date_format
     * @return String
     */
    public String getDateFormat() {
        return this.dateFormat;
    }

    /**
     * Sets date_format
     * @param dateFormat the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDateFormat(String dateFormat) {
        if (dateFormat == null) {
            throw new IllegalArgumentException("date_format cannot be null");
        }
        if (dateFormat != null && dateFormat.length() > 50) {
            throw new IllegalArgumentException("date_format length cannot exceed 50 characters");
        }
        this.dateFormat = dateFormat;
    }

    /**
     * Gets date_time_format
     * @return String
     */
    public String getDateTimeFormat() {
        return this.dateTimeFormat;
    }

    /**
     * Sets date_time_format
     * @param dateTimeFormat the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDateTimeFormat(String dateTimeFormat) {
        if (dateTimeFormat == null) {
            throw new IllegalArgumentException("date_time_format cannot be null");
        }
        if (dateTimeFormat != null && dateTimeFormat.length() > 50) {
            throw new IllegalArgumentException("date_time_format length cannot exceed 50 characters");
        }
        this.dateTimeFormat = dateTimeFormat;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets time_format
     * @return String
     */
    public String getTimeFormat() {
        return this.timeFormat;
    }

    /**
     * Sets time_format
     * @param timeFormat the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTimeFormat(String timeFormat) {
        if (timeFormat == null) {
            throw new IllegalArgumentException("time_format cannot be null");
        }
        if (timeFormat != null && timeFormat.length() > 50) {
            throw new IllegalArgumentException("time_format length cannot exceed 50 characters");
        }
        this.timeFormat = timeFormat;
    }

    /**
     * Gets logo_url
     * @return String
     */
    public String getLogoUrl() {
        return this.logoUrl;
    }

    /**
     * Sets logo_url
     * @param logoUrl the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLogoUrl(String logoUrl) {
        if (logoUrl != null && logoUrl.length() > 255) {
            throw new IllegalArgumentException("logo_url length cannot exceed 255 characters");
        }
        this.logoUrl = logoUrl;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Facilities other = (Facilities) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Facilities{" +
                "id=" + id +
                ", name=" + name +
                ", organisationsId=" + organisationsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", archived=" + archived +
                ", timeZone=" + timeZone +
                ", createdBy=" + createdBy +
                ", dateFormat=" + dateFormat +
                ", dateTimeFormat=" + dateTimeFormat +
                ", modifiedBy=" + modifiedBy +
                ", timeFormat=" + timeFormat +
                ", logoUrl=" + logoUrl +
                '}';
    }
}
