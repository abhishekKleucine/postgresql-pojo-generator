package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: user_facilities_mapping
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: user_facilities_mapping
 * - Primary Keys: facilities_id, users_id
 * 
 * Foreign Keys:
 * - facilities_id → facilities.id
 * - users_id → users.id
 * - created_by → users.id
 */
public class UserFacilitiesMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: facilities_id
     * Type: int8 NOT NULL
     * Primary Key
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: users_id
     * Type: int8 NOT NULL
     * Primary Key
     * Foreign Key → users.id
     */
    private Long usersId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Default constructor
     */
    public UserFacilitiesMapping() {
    }

    /**
     * Gets facilities_id
     * @return Long
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets facilities_id
     * @param facilitiesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets users_id
     * @return Long
     */
    public Long getUsersId() {
        return this.usersId;
    }

    /**
     * Sets users_id
     * @param usersId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setUsersId(Long usersId) {
        if (usersId == null) {
            throw new IllegalArgumentException("users_id cannot be null");
        }
        this.usersId = usersId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        UserFacilitiesMapping other = (UserFacilitiesMapping) obj;
        return Objects.equals(this.facilitiesId, other.facilitiesId) && Objects.equals(this.usersId, other.usersId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.facilitiesId, this.usersId);
    }

    @Override
    public String toString() {
        return "UserFacilitiesMapping{" +
                "facilitiesId=" + facilitiesId +
                ", usersId=" + usersId +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                '}';
    }
}
