package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: task_executions
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: task_executions
 * - Primary Keys: id
 * 
 * Indexes:
 * - idxf43796c5066e43a9801a191d: jobs_id
 * - idx2e8386b34271485087cee3bf: tasks_id
 * 
 * Foreign Keys:
 * - tasks_id → tasks.id
 * - jobs_id → jobs.id
 * - created_by → users.id
 * - modified_by → users.id
 * - started_by → users.id
 */
public class TaskExecution implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: reason
     * Type: text(2147483647)
     */
    private String reason;

    /**
     * Database column: correction_reason
     * Type: text(2147483647)
     */
    private String correctionReason;

    /**
     * Database column: state
     * Type: varchar(50) NOT NULL
     */
    private String state;

    /**
     * Database column: started_at
     * Type: int8
     */
    private Long startedAt;

    /**
     * Database column: ended_at
     * Type: int8
     */
    private Long endedAt;

    /**
     * Database column: tasks_id
     * Type: int8 NOT NULL
     * Foreign Key → tasks.id
     */
    private Long tasksId;

    /**
     * Database column: jobs_id
     * Type: int8 NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: started_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long startedBy;

    /**
     * Database column: correction_enabled
     * Type: bool DEFAULT: false
     */
    private Boolean correctionEnabled;

    /**
     * Database column: corrected_by
     * Type: int8
     */
    private Long correctedBy;

    /**
     * Database column: corrected_at
     * Type: int8
     */
    private Long correctedAt;

    /**
     * Database column: ended_by
     * Type: int8
     */
    private Long endedBy;

    /**
     * Database column: duration
     * Type: int8
     */
    private Long duration;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: order_tree
     * Type: int4 NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: continue_recurrence
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean continueRecurrence;

    /**
     * Database column: recurring_premature_start_reason
     * Type: text(2147483647)
     */
    private String recurringPrematureStartReason;

    /**
     * Database column: recurring_overdue_completion_reason
     * Type: text(2147483647)
     */
    private String recurringOverdueCompletionReason;

    /**
     * Database column: recurring_overdue_start_reason
     * Type: text(2147483647)
     */
    private String recurringOverdueStartReason;

    /**
     * Database column: recurring_expected_started_at
     * Type: int8
     */
    private Long recurringExpectedStartedAt;

    /**
     * Database column: recurring_expected_due_at
     * Type: int8
     */
    private Long recurringExpectedDueAt;

    /**
     * Database column: is_scheduled
     * Type: bool DEFAULT: false
     */
    private Boolean isScheduled;

    /**
     * Database column: scheduling_expected_due_at
     * Type: int8
     */
    private Long schedulingExpectedDueAt;

    /**
     * Database column: scheduling_expected_started_at
     * Type: int8
     */
    private Long schedulingExpectedStartedAt;

    /**
     * Database column: schedule_overdue_completion_reason
     * Type: text(2147483647)
     */
    private String scheduleOverdueCompletionReason;

    /**
     * Database column: schedule_premature_start_reason
     * Type: text(2147483647)
     */
    private String schedulePrematureStartReason;

    /**
     * Default constructor
     */
    public TaskExecution() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets reason
     * @return String
     */
    public String getReason() {
        return this.reason;
    }

    /**
     * Sets reason
     * @param reason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setReason(String reason) {
        if (reason != null && reason.length() > 2147483647) {
            throw new IllegalArgumentException("reason length cannot exceed 2147483647 characters");
        }
        this.reason = reason;
    }

    /**
     * Gets correction_reason
     * @return String
     */
    public String getCorrectionReason() {
        return this.correctionReason;
    }

    /**
     * Sets correction_reason
     * @param correctionReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCorrectionReason(String correctionReason) {
        if (correctionReason != null && correctionReason.length() > 2147483647) {
            throw new IllegalArgumentException("correction_reason length cannot exceed 2147483647 characters");
        }
        this.correctionReason = correctionReason;
    }

    /**
     * Gets state
     * @return String
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets state
     * @param state the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null");
        }
        if (state != null && state.length() > 50) {
            throw new IllegalArgumentException("state length cannot exceed 50 characters");
        }
        this.state = state;
    }

    /**
     * Gets started_at
     * @return Long
     */
    public Long getStartedAt() {
        return this.startedAt;
    }

    /**
     * Sets started_at
     * @param startedAt the value to set
     */
    public void setStartedAt(Long startedAt) {
        this.startedAt = startedAt;
    }

    /**
     * Gets ended_at
     * @return Long
     */
    public Long getEndedAt() {
        return this.endedAt;
    }

    /**
     * Sets ended_at
     * @param endedAt the value to set
     */
    public void setEndedAt(Long endedAt) {
        this.endedAt = endedAt;
    }

    /**
     * Gets tasks_id
     * @return Long
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets tasks_id
     * @param tasksId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTasksId(Long tasksId) {
        if (tasksId == null) {
            throw new IllegalArgumentException("tasks_id cannot be null");
        }
        this.tasksId = tasksId;
    }

    /**
     * Gets jobs_id
     * @return Long
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets jobs_id
     * @param jobsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets started_by
     * @return Long
     */
    public Long getStartedBy() {
        return this.startedBy;
    }

    /**
     * Sets started_by
     * @param startedBy the value to set
     */
    public void setStartedBy(Long startedBy) {
        this.startedBy = startedBy;
    }

    /**
     * Gets correction_enabled
     * @return Boolean
     */
    public Boolean getCorrectionEnabled() {
        return this.correctionEnabled;
    }

    /**
     * Sets correction_enabled
     * @param correctionEnabled the value to set
     */
    public void setCorrectionEnabled(Boolean correctionEnabled) {
        this.correctionEnabled = correctionEnabled;
    }

    /**
     * Gets corrected_by
     * @return Long
     */
    public Long getCorrectedBy() {
        return this.correctedBy;
    }

    /**
     * Sets corrected_by
     * @param correctedBy the value to set
     */
    public void setCorrectedBy(Long correctedBy) {
        this.correctedBy = correctedBy;
    }

    /**
     * Gets corrected_at
     * @return Long
     */
    public Long getCorrectedAt() {
        return this.correctedAt;
    }

    /**
     * Sets corrected_at
     * @param correctedAt the value to set
     */
    public void setCorrectedAt(Long correctedAt) {
        this.correctedAt = correctedAt;
    }

    /**
     * Gets ended_by
     * @return Long
     */
    public Long getEndedBy() {
        return this.endedBy;
    }

    /**
     * Sets ended_by
     * @param endedBy the value to set
     */
    public void setEndedBy(Long endedBy) {
        this.endedBy = endedBy;
    }

    /**
     * Gets duration
     * @return Long
     */
    public Long getDuration() {
        return this.duration;
    }

    /**
     * Sets duration
     * @param duration the value to set
     */
    public void setDuration(Long duration) {
        this.duration = duration;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (type != null && type.length() > 50) {
            throw new IllegalArgumentException("type length cannot exceed 50 characters");
        }
        this.type = type;
    }

    /**
     * Gets order_tree
     * @return Integer
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets order_tree
     * @param orderTree the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets continue_recurrence
     * @return Boolean
     */
    public Boolean getContinueRecurrence() {
        return this.continueRecurrence;
    }

    /**
     * Sets continue_recurrence
     * @param continueRecurrence the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setContinueRecurrence(Boolean continueRecurrence) {
        if (continueRecurrence == null) {
            throw new IllegalArgumentException("continue_recurrence cannot be null");
        }
        this.continueRecurrence = continueRecurrence;
    }

    /**
     * Gets recurring_premature_start_reason
     * @return String
     */
    public String getRecurringPrematureStartReason() {
        return this.recurringPrematureStartReason;
    }

    /**
     * Sets recurring_premature_start_reason
     * @param recurringPrematureStartReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRecurringPrematureStartReason(String recurringPrematureStartReason) {
        if (recurringPrematureStartReason != null && recurringPrematureStartReason.length() > 2147483647) {
            throw new IllegalArgumentException("recurring_premature_start_reason length cannot exceed 2147483647 characters");
        }
        this.recurringPrematureStartReason = recurringPrematureStartReason;
    }

    /**
     * Gets recurring_overdue_completion_reason
     * @return String
     */
    public String getRecurringOverdueCompletionReason() {
        return this.recurringOverdueCompletionReason;
    }

    /**
     * Sets recurring_overdue_completion_reason
     * @param recurringOverdueCompletionReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRecurringOverdueCompletionReason(String recurringOverdueCompletionReason) {
        if (recurringOverdueCompletionReason != null && recurringOverdueCompletionReason.length() > 2147483647) {
            throw new IllegalArgumentException("recurring_overdue_completion_reason length cannot exceed 2147483647 characters");
        }
        this.recurringOverdueCompletionReason = recurringOverdueCompletionReason;
    }

    /**
     * Gets recurring_overdue_start_reason
     * @return String
     */
    public String getRecurringOverdueStartReason() {
        return this.recurringOverdueStartReason;
    }

    /**
     * Sets recurring_overdue_start_reason
     * @param recurringOverdueStartReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRecurringOverdueStartReason(String recurringOverdueStartReason) {
        if (recurringOverdueStartReason != null && recurringOverdueStartReason.length() > 2147483647) {
            throw new IllegalArgumentException("recurring_overdue_start_reason length cannot exceed 2147483647 characters");
        }
        this.recurringOverdueStartReason = recurringOverdueStartReason;
    }

    /**
     * Gets recurring_expected_started_at
     * @return Long
     */
    public Long getRecurringExpectedStartedAt() {
        return this.recurringExpectedStartedAt;
    }

    /**
     * Sets recurring_expected_started_at
     * @param recurringExpectedStartedAt the value to set
     */
    public void setRecurringExpectedStartedAt(Long recurringExpectedStartedAt) {
        this.recurringExpectedStartedAt = recurringExpectedStartedAt;
    }

    /**
     * Gets recurring_expected_due_at
     * @return Long
     */
    public Long getRecurringExpectedDueAt() {
        return this.recurringExpectedDueAt;
    }

    /**
     * Sets recurring_expected_due_at
     * @param recurringExpectedDueAt the value to set
     */
    public void setRecurringExpectedDueAt(Long recurringExpectedDueAt) {
        this.recurringExpectedDueAt = recurringExpectedDueAt;
    }

    /**
     * Gets is_scheduled
     * @return Boolean
     */
    public Boolean getIsScheduled() {
        return this.isScheduled;
    }

    /**
     * Sets is_scheduled
     * @param isScheduled the value to set
     */
    public void setIsScheduled(Boolean isScheduled) {
        this.isScheduled = isScheduled;
    }

    /**
     * Gets scheduling_expected_due_at
     * @return Long
     */
    public Long getSchedulingExpectedDueAt() {
        return this.schedulingExpectedDueAt;
    }

    /**
     * Sets scheduling_expected_due_at
     * @param schedulingExpectedDueAt the value to set
     */
    public void setSchedulingExpectedDueAt(Long schedulingExpectedDueAt) {
        this.schedulingExpectedDueAt = schedulingExpectedDueAt;
    }

    /**
     * Gets scheduling_expected_started_at
     * @return Long
     */
    public Long getSchedulingExpectedStartedAt() {
        return this.schedulingExpectedStartedAt;
    }

    /**
     * Sets scheduling_expected_started_at
     * @param schedulingExpectedStartedAt the value to set
     */
    public void setSchedulingExpectedStartedAt(Long schedulingExpectedStartedAt) {
        this.schedulingExpectedStartedAt = schedulingExpectedStartedAt;
    }

    /**
     * Gets schedule_overdue_completion_reason
     * @return String
     */
    public String getScheduleOverdueCompletionReason() {
        return this.scheduleOverdueCompletionReason;
    }

    /**
     * Sets schedule_overdue_completion_reason
     * @param scheduleOverdueCompletionReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setScheduleOverdueCompletionReason(String scheduleOverdueCompletionReason) {
        if (scheduleOverdueCompletionReason != null && scheduleOverdueCompletionReason.length() > 2147483647) {
            throw new IllegalArgumentException("schedule_overdue_completion_reason length cannot exceed 2147483647 characters");
        }
        this.scheduleOverdueCompletionReason = scheduleOverdueCompletionReason;
    }

    /**
     * Gets schedule_premature_start_reason
     * @return String
     */
    public String getSchedulePrematureStartReason() {
        return this.schedulePrematureStartReason;
    }

    /**
     * Sets schedule_premature_start_reason
     * @param schedulePrematureStartReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setSchedulePrematureStartReason(String schedulePrematureStartReason) {
        if (schedulePrematureStartReason != null && schedulePrematureStartReason.length() > 2147483647) {
            throw new IllegalArgumentException("schedule_premature_start_reason length cannot exceed 2147483647 characters");
        }
        this.schedulePrematureStartReason = schedulePrematureStartReason;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskExecution other = (TaskExecution) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "TaskExecution{" +
                "id=" + id +
                ", reason=" + reason +
                ", correctionReason=" + correctionReason +
                ", state=" + state +
                ", startedAt=" + startedAt +
                ", endedAt=" + endedAt +
                ", tasksId=" + tasksId +
                ", jobsId=" + jobsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", startedBy=" + startedBy +
                ", correctionEnabled=" + correctionEnabled +
                ", correctedBy=" + correctedBy +
                ", correctedAt=" + correctedAt +
                ", endedBy=" + endedBy +
                ", duration=" + duration +
                ", type=" + type +
                ", orderTree=" + orderTree +
                ", continueRecurrence=" + continueRecurrence +
                ", recurringPrematureStartReason=" + recurringPrematureStartReason +
                ", recurringOverdueCompletionReason=" + recurringOverdueCompletionReason +
                ", recurringOverdueStartReason=" + recurringOverdueStartReason +
                ", recurringExpectedStartedAt=" + recurringExpectedStartedAt +
                ", recurringExpectedDueAt=" + recurringExpectedDueAt +
                ", isScheduled=" + isScheduled +
                ", schedulingExpectedDueAt=" + schedulingExpectedDueAt +
                ", schedulingExpectedStartedAt=" + schedulingExpectedStartedAt +
                ", scheduleOverdueCompletionReason=" + scheduleOverdueCompletionReason +
                ", schedulePrematureStartReason=" + schedulePrematureStartReason +
                '}';
    }
}
