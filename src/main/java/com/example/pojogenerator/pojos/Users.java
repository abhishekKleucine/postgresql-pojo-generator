package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: users
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: users
 * - Primary Keys: id
 * 
 * Indexes:
 * - uk6dotkott2kjsp8vw4d0m25fb7 (UNIQUE): email
 * - id1kny5wcthrgio949vswzjsofu9: state, archived
 * - ukps8jn3qjcop4ptb756hvqnad3 (UNIQUE): employee_id, organisations_id, archived
 * - ukr43af9ap4edm43mmtq01oddj6 (UNIQUE): username
 * 
 * Foreign Keys:
 * - organisations_id → organisations.id
 * - created_by → users.id
 * - modified_by → users.id
 * - challenge_questions_id → challenge_questions.id
 */
public class Users implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: organisations_id
     * Type: int8
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: employee_id
     * Type: varchar(255) NOT NULL
     */
    private String employeeId;

    /**
     * Database column: email
     * Type: varchar(255)
     */
    private String email;

    /**
     * Database column: first_name
     * Type: varchar(255) NOT NULL
     */
    private String firstName;

    /**
     * Database column: archived
     * Type: bool NOT NULL
     */
    private Boolean archived;

    /**
     * Database column: last_name
     * Type: varchar(255)
     */
    private String lastName;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: locked_at
     * Type: int8
     */
    private Long lockedAt;

    /**
     * Database column: department
     * Type: varchar(255)
     */
    private String department;

    /**
     * Database column: failed_login_attempts
     * Type: int4 DEFAULT: 0
     */
    private Integer failedLoginAttempts;

    /**
     * Database column: is_system_user
     * Type: bool DEFAULT: false
     */
    private Boolean isSystemUser;

    /**
     * Database column: password
     * Type: text(2147483647)
     */
    private String password;

    /**
     * Database column: password_updated_at
     * Type: int8
     */
    private Long passwordUpdatedAt;

    /**
     * Database column: username
     * Type: varchar(255)
     */
    private String username;

    /**
     * Database column: state
     * Type: varchar(50)
     */
    private String state;

    /**
     * Database column: failed_additional_verification_attempts
     * Type: int4 DEFAULT: 0
     */
    private Integer failedAdditionalVerificationAttempts;

    /**
     * Database column: challenge_questions_id
     * Type: int4
     * Foreign Key → challenge_questions.id
     */
    private Integer challengeQuestionsId;

    /**
     * Database column: challenge_questions_answer
     * Type: varchar(255)
     */
    private String challengeQuestionsAnswer;

    /**
     * Database column: failed_challenge_question_attempts
     * Type: int4 DEFAULT: 0
     */
    private Integer failedChallengeQuestionAttempts;

    /**
     * Database column: type
     * Type: varchar(15) DEFAULT: 'LOCAL'::character varying
     */
    private String type;

    /**
     * Default constructor
     */
    public Users() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets organisations_id
     * @return Long
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets organisations_id
     * @param organisationsId the value to set
     */
    public void setOrganisationsId(Long organisationsId) {
        this.organisationsId = organisationsId;
    }

    /**
     * Gets employee_id
     * @return String
     */
    public String getEmployeeId() {
        return this.employeeId;
    }

    /**
     * Sets employee_id
     * @param employeeId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setEmployeeId(String employeeId) {
        if (employeeId == null) {
            throw new IllegalArgumentException("employee_id cannot be null");
        }
        if (employeeId != null && employeeId.length() > 255) {
            throw new IllegalArgumentException("employee_id length cannot exceed 255 characters");
        }
        this.employeeId = employeeId;
    }

    /**
     * Gets email
     * @return String
     */
    public String getEmail() {
        return this.email;
    }

    /**
     * Sets email
     * @param email the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setEmail(String email) {
        if (email != null && email.length() > 255) {
            throw new IllegalArgumentException("email length cannot exceed 255 characters");
        }
        this.email = email;
    }

    /**
     * Gets first_name
     * @return String
     */
    public String getFirstName() {
        return this.firstName;
    }

    /**
     * Sets first_name
     * @param firstName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFirstName(String firstName) {
        if (firstName == null) {
            throw new IllegalArgumentException("first_name cannot be null");
        }
        if (firstName != null && firstName.length() > 255) {
            throw new IllegalArgumentException("first_name length cannot exceed 255 characters");
        }
        this.firstName = firstName;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets last_name
     * @return String
     */
    public String getLastName() {
        return this.lastName;
    }

    /**
     * Sets last_name
     * @param lastName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLastName(String lastName) {
        if (lastName != null && lastName.length() > 255) {
            throw new IllegalArgumentException("last_name length cannot exceed 255 characters");
        }
        this.lastName = lastName;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets locked_at
     * @return Long
     */
    public Long getLockedAt() {
        return this.lockedAt;
    }

    /**
     * Sets locked_at
     * @param lockedAt the value to set
     */
    public void setLockedAt(Long lockedAt) {
        this.lockedAt = lockedAt;
    }

    /**
     * Gets department
     * @return String
     */
    public String getDepartment() {
        return this.department;
    }

    /**
     * Sets department
     * @param department the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDepartment(String department) {
        if (department != null && department.length() > 255) {
            throw new IllegalArgumentException("department length cannot exceed 255 characters");
        }
        this.department = department;
    }

    /**
     * Gets failed_login_attempts
     * @return Integer
     */
    public Integer getFailedLoginAttempts() {
        return this.failedLoginAttempts;
    }

    /**
     * Sets failed_login_attempts
     * @param failedLoginAttempts the value to set
     */
    public void setFailedLoginAttempts(Integer failedLoginAttempts) {
        this.failedLoginAttempts = failedLoginAttempts;
    }

    /**
     * Gets is_system_user
     * @return Boolean
     */
    public Boolean getIsSystemUser() {
        return this.isSystemUser;
    }

    /**
     * Sets is_system_user
     * @param isSystemUser the value to set
     */
    public void setIsSystemUser(Boolean isSystemUser) {
        this.isSystemUser = isSystemUser;
    }

    /**
     * Gets password
     * @return String
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Sets password
     * @param password the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPassword(String password) {
        if (password != null && password.length() > 2147483647) {
            throw new IllegalArgumentException("password length cannot exceed 2147483647 characters");
        }
        this.password = password;
    }

    /**
     * Gets password_updated_at
     * @return Long
     */
    public Long getPasswordUpdatedAt() {
        return this.passwordUpdatedAt;
    }

    /**
     * Sets password_updated_at
     * @param passwordUpdatedAt the value to set
     */
    public void setPasswordUpdatedAt(Long passwordUpdatedAt) {
        this.passwordUpdatedAt = passwordUpdatedAt;
    }

    /**
     * Gets username
     * @return String
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * Sets username
     * @param username the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setUsername(String username) {
        if (username != null && username.length() > 255) {
            throw new IllegalArgumentException("username length cannot exceed 255 characters");
        }
        this.username = username;
    }

    /**
     * Gets state
     * @return String
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets state
     * @param state the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setState(String state) {
        if (state != null && state.length() > 50) {
            throw new IllegalArgumentException("state length cannot exceed 50 characters");
        }
        this.state = state;
    }

    /**
     * Gets failed_additional_verification_attempts
     * @return Integer
     */
    public Integer getFailedAdditionalVerificationAttempts() {
        return this.failedAdditionalVerificationAttempts;
    }

    /**
     * Sets failed_additional_verification_attempts
     * @param failedAdditionalVerificationAttempts the value to set
     */
    public void setFailedAdditionalVerificationAttempts(Integer failedAdditionalVerificationAttempts) {
        this.failedAdditionalVerificationAttempts = failedAdditionalVerificationAttempts;
    }

    /**
     * Gets challenge_questions_id
     * @return Integer
     */
    public Integer getChallengeQuestionsId() {
        return this.challengeQuestionsId;
    }

    /**
     * Sets challenge_questions_id
     * @param challengeQuestionsId the value to set
     */
    public void setChallengeQuestionsId(Integer challengeQuestionsId) {
        this.challengeQuestionsId = challengeQuestionsId;
    }

    /**
     * Gets challenge_questions_answer
     * @return String
     */
    public String getChallengeQuestionsAnswer() {
        return this.challengeQuestionsAnswer;
    }

    /**
     * Sets challenge_questions_answer
     * @param challengeQuestionsAnswer the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChallengeQuestionsAnswer(String challengeQuestionsAnswer) {
        if (challengeQuestionsAnswer != null && challengeQuestionsAnswer.length() > 255) {
            throw new IllegalArgumentException("challenge_questions_answer length cannot exceed 255 characters");
        }
        this.challengeQuestionsAnswer = challengeQuestionsAnswer;
    }

    /**
     * Gets failed_challenge_question_attempts
     * @return Integer
     */
    public Integer getFailedChallengeQuestionAttempts() {
        return this.failedChallengeQuestionAttempts;
    }

    /**
     * Sets failed_challenge_question_attempts
     * @param failedChallengeQuestionAttempts the value to set
     */
    public void setFailedChallengeQuestionAttempts(Integer failedChallengeQuestionAttempts) {
        this.failedChallengeQuestionAttempts = failedChallengeQuestionAttempts;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type != null && type.length() > 15) {
            throw new IllegalArgumentException("type length cannot exceed 15 characters");
        }
        this.type = type;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Users other = (Users) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Users{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", organisationsId=" + organisationsId +
                ", employeeId=" + employeeId +
                ", email=" + email +
                ", firstName=" + firstName +
                ", archived=" + archived +
                ", lastName=" + lastName +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", lockedAt=" + lockedAt +
                ", department=" + department +
                ", failedLoginAttempts=" + failedLoginAttempts +
                ", isSystemUser=" + isSystemUser +
                ", password=" + password +
                ", passwordUpdatedAt=" + passwordUpdatedAt +
                ", username=" + username +
                ", state=" + state +
                ", failedAdditionalVerificationAttempts=" + failedAdditionalVerificationAttempts +
                ", challengeQuestionsId=" + challengeQuestionsId +
                ", challengeQuestionsAnswer=" + challengeQuestionsAnswer +
                ", failedChallengeQuestionAttempts=" + failedChallengeQuestionAttempts +
                ", type=" + type +
                '}';
    }
}
