package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: versions
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: versions
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 */
public class Version implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8
     */
    private Long modifiedAt;

    /**
     * Database column: deprecated_at
     * Type: int8
     */
    private Long deprecatedAt;

    /**
     * Database column: parent
     * Type: int8
     */
    private Long parent;

    /**
     * Database column: self
     * Type: int8
     */
    private Long self;

    /**
     * Database column: type
     * Type: varchar(50)
     */
    private String type;

    /**
     * Database column: version
     * Type: int4
     */
    private Integer version;

    /**
     * Database column: versioned_at
     * Type: int8
     */
    private Long versionedAt;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: ancestor
     * Type: int8
     */
    private Long ancestor;

    /**
     * Default constructor
     */
    public Version() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     */
    public void setCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     */
    public void setModifiedAt(Long modifiedAt) {
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets deprecated_at
     * @return Long
     */
    public Long getDeprecatedAt() {
        return this.deprecatedAt;
    }

    /**
     * Sets deprecated_at
     * @param deprecatedAt the value to set
     */
    public void setDeprecatedAt(Long deprecatedAt) {
        this.deprecatedAt = deprecatedAt;
    }

    /**
     * Gets parent
     * @return Long
     */
    public Long getParent() {
        return this.parent;
    }

    /**
     * Sets parent
     * @param parent the value to set
     */
    public void setParent(Long parent) {
        this.parent = parent;
    }

    /**
     * Gets self
     * @return Long
     */
    public Long getSelf() {
        return this.self;
    }

    /**
     * Sets self
     * @param self the value to set
     */
    public void setSelf(Long self) {
        this.self = self;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type != null && type.length() > 50) {
            throw new IllegalArgumentException("type length cannot exceed 50 characters");
        }
        this.type = type;
    }

    /**
     * Gets version
     * @return Integer
     */
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Sets version
     * @param version the value to set
     */
    public void setVersion(Integer version) {
        this.version = version;
    }

    /**
     * Gets versioned_at
     * @return Long
     */
    public Long getVersionedAt() {
        return this.versionedAt;
    }

    /**
     * Sets versioned_at
     * @param versionedAt the value to set
     */
    public void setVersionedAt(Long versionedAt) {
        this.versionedAt = versionedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets ancestor
     * @return Long
     */
    public Long getAncestor() {
        return this.ancestor;
    }

    /**
     * Sets ancestor
     * @param ancestor the value to set
     */
    public void setAncestor(Long ancestor) {
        this.ancestor = ancestor;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Version other = (Version) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Version{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", deprecatedAt=" + deprecatedAt +
                ", parent=" + parent +
                ", self=" + self +
                ", type=" + type +
                ", version=" + version +
                ", versionedAt=" + versionedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", ancestor=" + ancestor +
                '}';
    }
}
