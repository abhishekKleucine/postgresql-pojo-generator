package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: password_history
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: password_history
 * - Primary Keys: id
 * 
 * Indexes:
 * - idxb9xt56fyg8luuosihexhda3ke: users_id
 * 
 * Foreign Keys:
 * - users_id → users.id
 */
public class PasswordHistory implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: password
     * Type: text(2147483647)
     */
    private String password;

    /**
     * Database column: users_id
     * Type: int8
     * Foreign Key → users.id
     */
    private Long usersId;

    /**
     * Default constructor
     */
    public PasswordHistory() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets password
     * @return String
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Sets password
     * @param password the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPassword(String password) {
        if (password != null && password.length() > 2147483647) {
            throw new IllegalArgumentException("password length cannot exceed 2147483647 characters");
        }
        this.password = password;
    }

    /**
     * Gets users_id
     * @return Long
     */
    public Long getUsersId() {
        return this.usersId;
    }

    /**
     * Sets users_id
     * @param usersId the value to set
     */
    public void setUsersId(Long usersId) {
        this.usersId = usersId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        PasswordHistory other = (PasswordHistory) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "PasswordHistory{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", password=" + password +
                ", usersId=" + usersId +
                '}';
    }
}
