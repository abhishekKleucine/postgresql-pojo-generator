package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: services
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: services
 * - Primary Keys: id
 * 
 * Indexes:
 * - uk_ilj0qjmo8ypukam8h1c6d0ib9 (UNIQUE): error_code_range
 * - uk_h4rqgjwnqidx6mvj4i22dxwxe (UNIQUE): name
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 */
public class Service implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: varchar(255) NOT NULL
     * Primary Key
     */
    private String id;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: login_path
     * Type: text(2147483647)
     */
    private String loginPath;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: name
     * Type: varchar(45)
     */
    private String name;

    /**
     * Database column: registration_path
     * Type: text(2147483647)
     */
    private String registrationPath;

    /**
     * Database column: reset_password_path
     * Type: text(2147483647)
     */
    private String resetPasswordPath;

    /**
     * Database column: error_code_range
     * Type: varchar(45)
     */
    private String errorCodeRange;

    /**
     * Default constructor
     */
    public Service() {
    }

    /**
     * Gets id
     * @return String
     */
    public String getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(String id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        if (id != null && id.length() > 255) {
            throw new IllegalArgumentException("id length cannot exceed 255 characters");
        }
        this.id = id;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets login_path
     * @return String
     */
    public String getLoginPath() {
        return this.loginPath;
    }

    /**
     * Sets login_path
     * @param loginPath the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLoginPath(String loginPath) {
        if (loginPath != null && loginPath.length() > 2147483647) {
            throw new IllegalArgumentException("login_path length cannot exceed 2147483647 characters");
        }
        this.loginPath = loginPath;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets name
     * @return String
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets name
     * @param name the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setName(String name) {
        if (name != null && name.length() > 45) {
            throw new IllegalArgumentException("name length cannot exceed 45 characters");
        }
        this.name = name;
    }

    /**
     * Gets registration_path
     * @return String
     */
    public String getRegistrationPath() {
        return this.registrationPath;
    }

    /**
     * Sets registration_path
     * @param registrationPath the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRegistrationPath(String registrationPath) {
        if (registrationPath != null && registrationPath.length() > 2147483647) {
            throw new IllegalArgumentException("registration_path length cannot exceed 2147483647 characters");
        }
        this.registrationPath = registrationPath;
    }

    /**
     * Gets reset_password_path
     * @return String
     */
    public String getResetPasswordPath() {
        return this.resetPasswordPath;
    }

    /**
     * Sets reset_password_path
     * @param resetPasswordPath the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setResetPasswordPath(String resetPasswordPath) {
        if (resetPasswordPath != null && resetPasswordPath.length() > 2147483647) {
            throw new IllegalArgumentException("reset_password_path length cannot exceed 2147483647 characters");
        }
        this.resetPasswordPath = resetPasswordPath;
    }

    /**
     * Gets error_code_range
     * @return String
     */
    public String getErrorCodeRange() {
        return this.errorCodeRange;
    }

    /**
     * Sets error_code_range
     * @param errorCodeRange the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setErrorCodeRange(String errorCodeRange) {
        if (errorCodeRange != null && errorCodeRange.length() > 45) {
            throw new IllegalArgumentException("error_code_range length cannot exceed 45 characters");
        }
        this.errorCodeRange = errorCodeRange;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Service other = (Service) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Service{" +
                "id=" + id +
                ", archived=" + archived +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                ", loginPath=" + loginPath +
                ", modifiedAt=" + modifiedAt +
                ", modifiedBy=" + modifiedBy +
                ", name=" + name +
                ", registrationPath=" + registrationPath +
                ", resetPasswordPath=" + resetPasswordPath +
                ", errorCodeRange=" + errorCodeRange +
                '}';
    }
}
