package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: checklists
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: checklists
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - versions_id → versions.id
 * - created_by → users.id
 * - modified_by → users.id
 * - released_by → users.id
 * - organisations_id → organisations.id
 * - use_cases_id → use_cases.id
 */
public class Checklists implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: text(2147483647) NOT NULL
     */
    private String name;

    /**
     * Database column: code
     * Type: varchar(20) NOT NULL
     */
    private String code;

    /**
     * Database column: state
     * Type: varchar(50) NOT NULL
     */
    private String state;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: versions_id
     * Type: int8
     * Foreign Key → versions.id
     */
    private Long versionsId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: review_cycle
     * Type: int4 NOT NULL DEFAULT: 1
     */
    private Integer reviewCycle;

    /**
     * Database column: released_at
     * Type: int8
     */
    private Long releasedAt;

    /**
     * Database column: released_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long releasedBy;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: organisations_id
     * Type: int8 NOT NULL
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: use_cases_id
     * Type: int8
     * Foreign Key → use_cases.id
     */
    private Long useCasesId;

    /**
     * Database column: job_log_columns
     * Type: jsonb DEFAULT: '{}'::jsonb
     */
    private JsonNode jobLogColumns;

    /**
     * Database column: is_global
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean isGlobal;

    /**
     * Database column: color_code
     * Type: varchar(50)
     */
    private String colorCode;

    /**
     * Default constructor
     */
    public Checklists() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets name
     * @return String
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets name
     * @param name the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null");
        }
        if (name != null && name.length() > 2147483647) {
            throw new IllegalArgumentException("name length cannot exceed 2147483647 characters");
        }
        this.name = name;
    }

    /**
     * Gets code
     * @return String
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets code
     * @param code the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("code cannot be null");
        }
        if (code != null && code.length() > 20) {
            throw new IllegalArgumentException("code length cannot exceed 20 characters");
        }
        this.code = code;
    }

    /**
     * Gets state
     * @return String
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets state
     * @param state the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null");
        }
        if (state != null && state.length() > 50) {
            throw new IllegalArgumentException("state length cannot exceed 50 characters");
        }
        this.state = state;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets versions_id
     * @return Long
     */
    public Long getVersionsId() {
        return this.versionsId;
    }

    /**
     * Sets versions_id
     * @param versionsId the value to set
     */
    public void setVersionsId(Long versionsId) {
        this.versionsId = versionsId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets review_cycle
     * @return Integer
     */
    public Integer getReviewCycle() {
        return this.reviewCycle;
    }

    /**
     * Sets review_cycle
     * @param reviewCycle the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setReviewCycle(Integer reviewCycle) {
        if (reviewCycle == null) {
            throw new IllegalArgumentException("review_cycle cannot be null");
        }
        this.reviewCycle = reviewCycle;
    }

    /**
     * Gets released_at
     * @return Long
     */
    public Long getReleasedAt() {
        return this.releasedAt;
    }

    /**
     * Sets released_at
     * @param releasedAt the value to set
     */
    public void setReleasedAt(Long releasedAt) {
        this.releasedAt = releasedAt;
    }

    /**
     * Gets released_by
     * @return Long
     */
    public Long getReleasedBy() {
        return this.releasedBy;
    }

    /**
     * Sets released_by
     * @param releasedBy the value to set
     */
    public void setReleasedBy(Long releasedBy) {
        this.releasedBy = releasedBy;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 2147483647) {
            throw new IllegalArgumentException("description length cannot exceed 2147483647 characters");
        }
        this.description = description;
    }

    /**
     * Gets organisations_id
     * @return Long
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets organisations_id
     * @param organisationsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets use_cases_id
     * @return Long
     */
    public Long getUseCasesId() {
        return this.useCasesId;
    }

    /**
     * Sets use_cases_id
     * @param useCasesId the value to set
     */
    public void setUseCasesId(Long useCasesId) {
        this.useCasesId = useCasesId;
    }

    /**
     * Gets job_log_columns
     * @return JsonNode
     */
    public JsonNode getJobLogColumns() {
        return this.jobLogColumns;
    }

    /**
     * Sets job_log_columns
     * @param jobLogColumns the value to set
     */
    public void setJobLogColumns(JsonNode jobLogColumns) {
        this.jobLogColumns = jobLogColumns;
    }

    /**
     * Gets is_global
     * @return Boolean
     */
    public Boolean getIsGlobal() {
        return this.isGlobal;
    }

    /**
     * Sets is_global
     * @param isGlobal the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsGlobal(Boolean isGlobal) {
        if (isGlobal == null) {
            throw new IllegalArgumentException("is_global cannot be null");
        }
        this.isGlobal = isGlobal;
    }

    /**
     * Gets color_code
     * @return String
     */
    public String getColorCode() {
        return this.colorCode;
    }

    /**
     * Sets color_code
     * @param colorCode the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setColorCode(String colorCode) {
        if (colorCode != null && colorCode.length() > 50) {
            throw new IllegalArgumentException("color_code length cannot exceed 50 characters");
        }
        this.colorCode = colorCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Checklists other = (Checklists) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Checklists{" +
                "id=" + id +
                ", name=" + name +
                ", code=" + code +
                ", state=" + state +
                ", archived=" + archived +
                ", versionsId=" + versionsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", reviewCycle=" + reviewCycle +
                ", releasedAt=" + releasedAt +
                ", releasedBy=" + releasedBy +
                ", description=" + description +
                ", organisationsId=" + organisationsId +
                ", useCasesId=" + useCasesId +
                ", jobLogColumns=" + jobLogColumns +
                ", isGlobal=" + isGlobal +
                ", colorCode=" + colorCode +
                '}';
    }
}
