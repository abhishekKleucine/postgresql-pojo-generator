package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: parameter_values
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: parameter_values
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx21cc0138b45f4fb283a22ce7: task_executions_id
 * - idxt1209prt8n8rnv5n87vou0pv: choices
 * - idx1dd1365bb6e9408ab6e7b1b0: parameters_id
 * - idxt1209prt8n8rnv5n87vou0ace: state
 * - idx3567337e529d4b10bf1df804: jobs_id
 * 
 * Foreign Keys:
 * - jobs_id → jobs.id
 * - parameters_id → parameters.id
 * - created_by → users.id
 * - modified_by → users.id
 * - parameter_value_approval_id → parameter_value_approvals.id
 * - task_executions_id → task_executions.id
 */
public class ParameterValues implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: value
     * Type: text(2147483647)
     */
    private String value;

    /**
     * Database column: reason
     * Type: text(2147483647)
     */
    private String reason;

    /**
     * Database column: state
     * Type: varchar(50)
     */
    private String state;

    /**
     * Database column: choices
     * Type: jsonb
     */
    private JsonNode choices;

    /**
     * Database column: jobs_id
     * Type: int8 NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: parameters_id
     * Type: int8 NOT NULL
     * Foreign Key → parameters.id
     */
    private Long parametersId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: parameter_value_approval_id
     * Type: int8
     * Foreign Key → parameter_value_approvals.id
     */
    private Long parameterValueApprovalId;

    /**
     * Database column: hidden
     * Type: bool DEFAULT: false
     */
    private Boolean hidden;

    /**
     * Database column: impacted_by
     * Type: jsonb
     */
    private JsonNode impactedBy;

    /**
     * Database column: verified
     * Type: bool DEFAULT: false
     */
    private Boolean verified;

    /**
     * Database column: task_executions_id
     * Type: int8
     * Foreign Key → task_executions.id
     */
    private Long taskExecutionsId;

    /**
     * Database column: has_variations
     * Type: bool DEFAULT: false
     */
    private Boolean hasVariations;

    /**
     * Database column: client_epoch
     * Type: int8
     */
    private Long clientEpoch;

    /**
     * Database column: version
     * Type: int8 DEFAULT: 0
     */
    private Long version;

    /**
     * Database column: has_corrections
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean hasCorrections;

    /**
     * Database column: has_exceptions
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean hasExceptions;

    /**
     * Database column: has_active_exception
     * Type: bool DEFAULT: false
     */
    private Boolean hasActiveException;

    /**
     * Default constructor
     */
    public ParameterValues() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets value
     * @return String
     */
    public String getValue() {
        return this.value;
    }

    /**
     * Sets value
     * @param value the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setValue(String value) {
        if (value != null && value.length() > 2147483647) {
            throw new IllegalArgumentException("value length cannot exceed 2147483647 characters");
        }
        this.value = value;
    }

    /**
     * Gets reason
     * @return String
     */
    public String getReason() {
        return this.reason;
    }

    /**
     * Sets reason
     * @param reason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setReason(String reason) {
        if (reason != null && reason.length() > 2147483647) {
            throw new IllegalArgumentException("reason length cannot exceed 2147483647 characters");
        }
        this.reason = reason;
    }

    /**
     * Gets state
     * @return String
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets state
     * @param state the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setState(String state) {
        if (state != null && state.length() > 50) {
            throw new IllegalArgumentException("state length cannot exceed 50 characters");
        }
        this.state = state;
    }

    /**
     * Gets choices
     * @return JsonNode
     */
    public JsonNode getChoices() {
        return this.choices;
    }

    /**
     * Sets choices
     * @param choices the value to set
     */
    public void setChoices(JsonNode choices) {
        this.choices = choices;
    }

    /**
     * Gets jobs_id
     * @return Long
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets jobs_id
     * @param jobsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets parameters_id
     * @return Long
     */
    public Long getParametersId() {
        return this.parametersId;
    }

    /**
     * Sets parameters_id
     * @param parametersId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setParametersId(Long parametersId) {
        if (parametersId == null) {
            throw new IllegalArgumentException("parameters_id cannot be null");
        }
        this.parametersId = parametersId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     */
    public void setModifiedAt(Long modifiedAt) {
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets parameter_value_approval_id
     * @return Long
     */
    public Long getParameterValueApprovalId() {
        return this.parameterValueApprovalId;
    }

    /**
     * Sets parameter_value_approval_id
     * @param parameterValueApprovalId the value to set
     */
    public void setParameterValueApprovalId(Long parameterValueApprovalId) {
        this.parameterValueApprovalId = parameterValueApprovalId;
    }

    /**
     * Gets hidden
     * @return Boolean
     */
    public Boolean getHidden() {
        return this.hidden;
    }

    /**
     * Sets hidden
     * @param hidden the value to set
     */
    public void setHidden(Boolean hidden) {
        this.hidden = hidden;
    }

    /**
     * Gets impacted_by
     * @return JsonNode
     */
    public JsonNode getImpactedBy() {
        return this.impactedBy;
    }

    /**
     * Sets impacted_by
     * @param impactedBy the value to set
     */
    public void setImpactedBy(JsonNode impactedBy) {
        this.impactedBy = impactedBy;
    }

    /**
     * Gets verified
     * @return Boolean
     */
    public Boolean getVerified() {
        return this.verified;
    }

    /**
     * Sets verified
     * @param verified the value to set
     */
    public void setVerified(Boolean verified) {
        this.verified = verified;
    }

    /**
     * Gets task_executions_id
     * @return Long
     */
    public Long getTaskExecutionsId() {
        return this.taskExecutionsId;
    }

    /**
     * Sets task_executions_id
     * @param taskExecutionsId the value to set
     */
    public void setTaskExecutionsId(Long taskExecutionsId) {
        this.taskExecutionsId = taskExecutionsId;
    }

    /**
     * Gets has_variations
     * @return Boolean
     */
    public Boolean getHasVariations() {
        return this.hasVariations;
    }

    /**
     * Sets has_variations
     * @param hasVariations the value to set
     */
    public void setHasVariations(Boolean hasVariations) {
        this.hasVariations = hasVariations;
    }

    /**
     * Gets client_epoch
     * @return Long
     */
    public Long getClientEpoch() {
        return this.clientEpoch;
    }

    /**
     * Sets client_epoch
     * @param clientEpoch the value to set
     */
    public void setClientEpoch(Long clientEpoch) {
        this.clientEpoch = clientEpoch;
    }

    /**
     * Gets version
     * @return Long
     */
    public Long getVersion() {
        return this.version;
    }

    /**
     * Sets version
     * @param version the value to set
     */
    public void setVersion(Long version) {
        this.version = version;
    }

    /**
     * Gets has_corrections
     * @return Boolean
     */
    public Boolean getHasCorrections() {
        return this.hasCorrections;
    }

    /**
     * Sets has_corrections
     * @param hasCorrections the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setHasCorrections(Boolean hasCorrections) {
        if (hasCorrections == null) {
            throw new IllegalArgumentException("has_corrections cannot be null");
        }
        this.hasCorrections = hasCorrections;
    }

    /**
     * Gets has_exceptions
     * @return Boolean
     */
    public Boolean getHasExceptions() {
        return this.hasExceptions;
    }

    /**
     * Sets has_exceptions
     * @param hasExceptions the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setHasExceptions(Boolean hasExceptions) {
        if (hasExceptions == null) {
            throw new IllegalArgumentException("has_exceptions cannot be null");
        }
        this.hasExceptions = hasExceptions;
    }

    /**
     * Gets has_active_exception
     * @return Boolean
     */
    public Boolean getHasActiveException() {
        return this.hasActiveException;
    }

    /**
     * Sets has_active_exception
     * @param hasActiveException the value to set
     */
    public void setHasActiveException(Boolean hasActiveException) {
        this.hasActiveException = hasActiveException;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ParameterValues other = (ParameterValues) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "ParameterValues{" +
                "id=" + id +
                ", value=" + value +
                ", reason=" + reason +
                ", state=" + state +
                ", choices=" + choices +
                ", jobsId=" + jobsId +
                ", parametersId=" + parametersId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", parameterValueApprovalId=" + parameterValueApprovalId +
                ", hidden=" + hidden +
                ", impactedBy=" + impactedBy +
                ", verified=" + verified +
                ", taskExecutionsId=" + taskExecutionsId +
                ", hasVariations=" + hasVariations +
                ", clientEpoch=" + clientEpoch +
                ", version=" + version +
                ", hasCorrections=" + hasCorrections +
                ", hasExceptions=" + hasExceptions +
                ", hasActiveException=" + hasActiveException +
                '}';
    }
}
