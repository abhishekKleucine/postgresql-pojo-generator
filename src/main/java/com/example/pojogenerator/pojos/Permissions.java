package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: permissions
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: permissions
 * - Primary Keys: id
 * 
 * Indexes:
 * - uk4stge73ntans3a1km7sxgtmwb (UNIQUE): name, services_id, archived
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - services_id → services.id
 */
public class Permissions implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: method
     * Type: varchar(15)
     */
    private String method;

    /**
     * Database column: name
     * Type: varchar(255)
     */
    private String name;

    /**
     * Database column: path
     * Type: text(2147483647)
     */
    private String path;

    /**
     * Database column: services_id
     * Type: varchar(255)
     * Foreign Key → services.id
     */
    private String servicesId;

    /**
     * Default constructor
     */
    public Permissions() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 2147483647) {
            throw new IllegalArgumentException("description length cannot exceed 2147483647 characters");
        }
        this.description = description;
    }

    /**
     * Gets method
     * @return String
     */
    public String getMethod() {
        return this.method;
    }

    /**
     * Sets method
     * @param method the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setMethod(String method) {
        if (method != null && method.length() > 15) {
            throw new IllegalArgumentException("method length cannot exceed 15 characters");
        }
        this.method = method;
    }

    /**
     * Gets name
     * @return String
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets name
     * @param name the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setName(String name) {
        if (name != null && name.length() > 255) {
            throw new IllegalArgumentException("name length cannot exceed 255 characters");
        }
        this.name = name;
    }

    /**
     * Gets path
     * @return String
     */
    public String getPath() {
        return this.path;
    }

    /**
     * Sets path
     * @param path the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPath(String path) {
        if (path != null && path.length() > 2147483647) {
            throw new IllegalArgumentException("path length cannot exceed 2147483647 characters");
        }
        this.path = path;
    }

    /**
     * Gets services_id
     * @return String
     */
    public String getServicesId() {
        return this.servicesId;
    }

    /**
     * Sets services_id
     * @param servicesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setServicesId(String servicesId) {
        if (servicesId != null && servicesId.length() > 255) {
            throw new IllegalArgumentException("services_id length cannot exceed 255 characters");
        }
        this.servicesId = servicesId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Permissions other = (Permissions) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Permissions{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                ", modifiedAt=" + modifiedAt +
                ", modifiedBy=" + modifiedBy +
                ", archived=" + archived +
                ", description=" + description +
                ", method=" + method +
                ", name=" + name +
                ", path=" + path +
                ", servicesId=" + servicesId +
                '}';
    }
}
