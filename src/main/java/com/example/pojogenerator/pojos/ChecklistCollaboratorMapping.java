package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: checklist_collaborator_mapping
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: checklist_collaborator_mapping
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - checklists_id → checklists.id
 * - users_id → users.id
 */
public class ChecklistCollaboratorMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8
     */
    private Long modifiedAt;

    /**
     * Database column: order_tree
     * Type: int4 NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: phase
     * Type: int4 NOT NULL
     */
    private Integer phase;

    /**
     * Database column: state
     * Type: varchar(50)
     */
    private String state;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: checklists_id
     * Type: int8 NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: users_id
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long usersId;

    /**
     * Database column: phase_type
     * Type: varchar(50) NOT NULL
     */
    private String phaseType;

    /**
     * Default constructor
     */
    public ChecklistCollaboratorMapping() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     */
    public void setCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     */
    public void setModifiedAt(Long modifiedAt) {
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets order_tree
     * @return Integer
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets order_tree
     * @param orderTree the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets phase
     * @return Integer
     */
    public Integer getPhase() {
        return this.phase;
    }

    /**
     * Sets phase
     * @param phase the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPhase(Integer phase) {
        if (phase == null) {
            throw new IllegalArgumentException("phase cannot be null");
        }
        this.phase = phase;
    }

    /**
     * Gets state
     * @return String
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets state
     * @param state the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setState(String state) {
        if (state != null && state.length() > 50) {
            throw new IllegalArgumentException("state length cannot exceed 50 characters");
        }
        this.state = state;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (type != null && type.length() > 50) {
            throw new IllegalArgumentException("type length cannot exceed 50 characters");
        }
        this.type = type;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets checklists_id
     * @return Long
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets checklists_id
     * @param checklistsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets users_id
     * @return Long
     */
    public Long getUsersId() {
        return this.usersId;
    }

    /**
     * Sets users_id
     * @param usersId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setUsersId(Long usersId) {
        if (usersId == null) {
            throw new IllegalArgumentException("users_id cannot be null");
        }
        this.usersId = usersId;
    }

    /**
     * Gets phase_type
     * @return String
     */
    public String getPhaseType() {
        return this.phaseType;
    }

    /**
     * Sets phase_type
     * @param phaseType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPhaseType(String phaseType) {
        if (phaseType == null) {
            throw new IllegalArgumentException("phase_type cannot be null");
        }
        if (phaseType != null && phaseType.length() > 50) {
            throw new IllegalArgumentException("phase_type length cannot exceed 50 characters");
        }
        this.phaseType = phaseType;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ChecklistCollaboratorMapping other = (ChecklistCollaboratorMapping) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "ChecklistCollaboratorMapping{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", orderTree=" + orderTree +
                ", phase=" + phase +
                ", state=" + state +
                ", type=" + type +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", checklistsId=" + checklistsId +
                ", usersId=" + usersId +
                ", phaseType=" + phaseType +
                '}';
    }
}
