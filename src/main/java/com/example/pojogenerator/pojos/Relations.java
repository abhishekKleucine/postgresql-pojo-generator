package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: relations
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: relations
 * - Primary Keys: id
 * 
 * Indexes:
 * - pkjxq7qi13myhmjajlr9rt (UNIQUE): id
 * 
 * Foreign Keys:
 * - checklists_id → checklists.id
 */
public class Relations implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: order_tree
     * Type: int4 NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: external_id
     * Type: varchar(255) NOT NULL
     */
    private String externalId;

    /**
     * Database column: display_name
     * Type: varchar(255) NOT NULL
     */
    private String displayName;

    /**
     * Database column: validations
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode validations;

    /**
     * Database column: variables
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode variables;

    /**
     * Database column: cardinality
     * Type: varchar(50) NOT NULL
     */
    private String cardinality;

    /**
     * Database column: object_type_id
     * Type: varchar(50) NOT NULL
     */
    private String objectTypeId;

    /**
     * Database column: collection
     * Type: varchar(255) NOT NULL
     */
    private String collection;

    /**
     * Database column: url_path
     * Type: text(2147483647) NOT NULL
     */
    private String urlPath;

    /**
     * Database column: checklists_id
     * Type: int8 NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: is_mandatory
     * Type: bool DEFAULT: false
     */
    private Boolean isMandatory;

    /**
     * Default constructor
     */
    public Relations() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets order_tree
     * @return Integer
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets order_tree
     * @param orderTree the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets external_id
     * @return String
     */
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Sets external_id
     * @param externalId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setExternalId(String externalId) {
        if (externalId == null) {
            throw new IllegalArgumentException("external_id cannot be null");
        }
        if (externalId != null && externalId.length() > 255) {
            throw new IllegalArgumentException("external_id length cannot exceed 255 characters");
        }
        this.externalId = externalId;
    }

    /**
     * Gets display_name
     * @return String
     */
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Sets display_name
     * @param displayName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDisplayName(String displayName) {
        if (displayName == null) {
            throw new IllegalArgumentException("display_name cannot be null");
        }
        if (displayName != null && displayName.length() > 255) {
            throw new IllegalArgumentException("display_name length cannot exceed 255 characters");
        }
        this.displayName = displayName;
    }

    /**
     * Gets validations
     * @return JsonNode
     */
    public JsonNode getValidations() {
        return this.validations;
    }

    /**
     * Sets validations
     * @param validations the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setValidations(JsonNode validations) {
        if (validations == null) {
            throw new IllegalArgumentException("validations cannot be null");
        }
        this.validations = validations;
    }

    /**
     * Gets variables
     * @return JsonNode
     */
    public JsonNode getVariables() {
        return this.variables;
    }

    /**
     * Sets variables
     * @param variables the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setVariables(JsonNode variables) {
        if (variables == null) {
            throw new IllegalArgumentException("variables cannot be null");
        }
        this.variables = variables;
    }

    /**
     * Gets cardinality
     * @return String
     */
    public String getCardinality() {
        return this.cardinality;
    }

    /**
     * Sets cardinality
     * @param cardinality the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCardinality(String cardinality) {
        if (cardinality == null) {
            throw new IllegalArgumentException("cardinality cannot be null");
        }
        if (cardinality != null && cardinality.length() > 50) {
            throw new IllegalArgumentException("cardinality length cannot exceed 50 characters");
        }
        this.cardinality = cardinality;
    }

    /**
     * Gets object_type_id
     * @return String
     */
    public String getObjectTypeId() {
        return this.objectTypeId;
    }

    /**
     * Sets object_type_id
     * @param objectTypeId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setObjectTypeId(String objectTypeId) {
        if (objectTypeId == null) {
            throw new IllegalArgumentException("object_type_id cannot be null");
        }
        if (objectTypeId != null && objectTypeId.length() > 50) {
            throw new IllegalArgumentException("object_type_id length cannot exceed 50 characters");
        }
        this.objectTypeId = objectTypeId;
    }

    /**
     * Gets collection
     * @return String
     */
    public String getCollection() {
        return this.collection;
    }

    /**
     * Sets collection
     * @param collection the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCollection(String collection) {
        if (collection == null) {
            throw new IllegalArgumentException("collection cannot be null");
        }
        if (collection != null && collection.length() > 255) {
            throw new IllegalArgumentException("collection length cannot exceed 255 characters");
        }
        this.collection = collection;
    }

    /**
     * Gets url_path
     * @return String
     */
    public String getUrlPath() {
        return this.urlPath;
    }

    /**
     * Sets url_path
     * @param urlPath the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setUrlPath(String urlPath) {
        if (urlPath == null) {
            throw new IllegalArgumentException("url_path cannot be null");
        }
        if (urlPath != null && urlPath.length() > 2147483647) {
            throw new IllegalArgumentException("url_path length cannot exceed 2147483647 characters");
        }
        this.urlPath = urlPath;
    }

    /**
     * Gets checklists_id
     * @return Long
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets checklists_id
     * @param checklistsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets is_mandatory
     * @return Boolean
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets is_mandatory
     * @param isMandatory the value to set
     */
    public void setIsMandatory(Boolean isMandatory) {
        this.isMandatory = isMandatory;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Relations other = (Relations) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Relations{" +
                "id=" + id +
                ", orderTree=" + orderTree +
                ", externalId=" + externalId +
                ", displayName=" + displayName +
                ", validations=" + validations +
                ", variables=" + variables +
                ", cardinality=" + cardinality +
                ", objectTypeId=" + objectTypeId +
                ", collection=" + collection +
                ", urlPath=" + urlPath +
                ", checklistsId=" + checklistsId +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", isMandatory=" + isMandatory +
                '}';
    }
}
