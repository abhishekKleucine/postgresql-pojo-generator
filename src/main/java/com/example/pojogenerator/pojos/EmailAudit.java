package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: email_audits
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: email_audits
 * - Primary Keys: id
 */
public class EmailAudit implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: from_address
     * Type: text(2147483647) NOT NULL
     */
    private String fromAddress;

    /**
     * Database column: to_addresses
     * Type: _text(2147483647)
     */
    private String toAddresses;

    /**
     * Database column: body
     * Type: text(2147483647)
     */
    private String body;

    /**
     * Database column: subject
     * Type: text(2147483647)
     */
    private String subject;

    /**
     * Database column: cc
     * Type: _text(2147483647)
     */
    private String cc;

    /**
     * Database column: bcc
     * Type: _text(2147483647)
     */
    private String bcc;

    /**
     * Database column: retry_attempts
     * Type: int2(5)
     */
    private String retryAttempts;

    /**
     * Database column: max_attempts
     * Type: int2(5)
     */
    private String maxAttempts;

    /**
     * Database column: created_on
     * Type: int8 NOT NULL
     */
    private Long createdOn;

    /**
     * Database column: message_id
     * Type: text(2147483647)
     */
    private String messageId;

    /**
     * Default constructor
     */
    public EmailAudit() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets from_address
     * @return String
     */
    public String getFromAddress() {
        return this.fromAddress;
    }

    /**
     * Sets from_address
     * @param fromAddress the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFromAddress(String fromAddress) {
        if (fromAddress == null) {
            throw new IllegalArgumentException("from_address cannot be null");
        }
        if (fromAddress != null && fromAddress.length() > 2147483647) {
            throw new IllegalArgumentException("from_address length cannot exceed 2147483647 characters");
        }
        this.fromAddress = fromAddress;
    }

    /**
     * Gets to_addresses
     * @return String
     */
    public String getToAddresses() {
        return this.toAddresses;
    }

    /**
     * Sets to_addresses
     * @param toAddresses the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setToAddresses(String toAddresses) {
        if (toAddresses != null && toAddresses.length() > 2147483647) {
            throw new IllegalArgumentException("to_addresses length cannot exceed 2147483647 characters");
        }
        this.toAddresses = toAddresses;
    }

    /**
     * Gets body
     * @return String
     */
    public String getBody() {
        return this.body;
    }

    /**
     * Sets body
     * @param body the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setBody(String body) {
        if (body != null && body.length() > 2147483647) {
            throw new IllegalArgumentException("body length cannot exceed 2147483647 characters");
        }
        this.body = body;
    }

    /**
     * Gets subject
     * @return String
     */
    public String getSubject() {
        return this.subject;
    }

    /**
     * Sets subject
     * @param subject the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setSubject(String subject) {
        if (subject != null && subject.length() > 2147483647) {
            throw new IllegalArgumentException("subject length cannot exceed 2147483647 characters");
        }
        this.subject = subject;
    }

    /**
     * Gets cc
     * @return String
     */
    public String getCc() {
        return this.cc;
    }

    /**
     * Sets cc
     * @param cc the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCc(String cc) {
        if (cc != null && cc.length() > 2147483647) {
            throw new IllegalArgumentException("cc length cannot exceed 2147483647 characters");
        }
        this.cc = cc;
    }

    /**
     * Gets bcc
     * @return String
     */
    public String getBcc() {
        return this.bcc;
    }

    /**
     * Sets bcc
     * @param bcc the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setBcc(String bcc) {
        if (bcc != null && bcc.length() > 2147483647) {
            throw new IllegalArgumentException("bcc length cannot exceed 2147483647 characters");
        }
        this.bcc = bcc;
    }

    /**
     * Gets retry_attempts
     * @return String
     */
    public String getRetryAttempts() {
        return this.retryAttempts;
    }

    /**
     * Sets retry_attempts
     * @param retryAttempts the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRetryAttempts(String retryAttempts) {
        if (retryAttempts != null && retryAttempts.length() > 5) {
            throw new IllegalArgumentException("retry_attempts length cannot exceed 5 characters");
        }
        this.retryAttempts = retryAttempts;
    }

    /**
     * Gets max_attempts
     * @return String
     */
    public String getMaxAttempts() {
        return this.maxAttempts;
    }

    /**
     * Sets max_attempts
     * @param maxAttempts the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setMaxAttempts(String maxAttempts) {
        if (maxAttempts != null && maxAttempts.length() > 5) {
            throw new IllegalArgumentException("max_attempts length cannot exceed 5 characters");
        }
        this.maxAttempts = maxAttempts;
    }

    /**
     * Gets created_on
     * @return Long
     */
    public Long getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Sets created_on
     * @param createdOn the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedOn(Long createdOn) {
        if (createdOn == null) {
            throw new IllegalArgumentException("created_on cannot be null");
        }
        this.createdOn = createdOn;
    }

    /**
     * Gets message_id
     * @return String
     */
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Sets message_id
     * @param messageId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setMessageId(String messageId) {
        if (messageId != null && messageId.length() > 2147483647) {
            throw new IllegalArgumentException("message_id length cannot exceed 2147483647 characters");
        }
        this.messageId = messageId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        EmailAudit other = (EmailAudit) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "EmailAudit{" +
                "id=" + id +
                ", fromAddress=" + fromAddress +
                ", toAddresses=" + toAddresses +
                ", body=" + body +
                ", subject=" + subject +
                ", cc=" + cc +
                ", bcc=" + bcc +
                ", retryAttempts=" + retryAttempts +
                ", maxAttempts=" + maxAttempts +
                ", createdOn=" + createdOn +
                ", messageId=" + messageId +
                '}';
    }
}
