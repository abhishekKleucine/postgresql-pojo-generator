package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: parameters
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: parameters
 * - Primary Keys: id
 * 
 * Indexes:
 * - idxb90a74e43e5a4d1db3ec5011: tasks_id
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - tasks_id → tasks.id
 * - checklists_id → checklists.id
 */
public class Parameter implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: order_tree
     * Type: int4 NOT NULL
     */
    private Integer orderTree;

    /**
     * Database column: data
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode data;

    /**
     * Database column: label
     * Type: text(2147483647)
     */
    private String label;

    /**
     * Database column: is_mandatory
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean isMandatory;

    /**
     * Database column: type
     * Type: varchar(20) NOT NULL
     */
    private String type;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: tasks_id
     * Type: int8
     * Foreign Key → tasks.id
     */
    private Long tasksId;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: validations
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode validations;

    /**
     * Database column: target_entity_type
     * Type: varchar(50) NOT NULL
     */
    private String targetEntityType;

    /**
     * Database column: checklists_id
     * Type: int8 NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: is_auto_initialized
     * Type: bool DEFAULT: false
     */
    private Boolean isAutoInitialized;

    /**
     * Database column: auto_initialize
     * Type: jsonb
     */
    private JsonNode autoInitialize;

    /**
     * Database column: rules
     * Type: jsonb
     */
    private JsonNode rules;

    /**
     * Database column: hidden
     * Type: bool DEFAULT: false
     */
    private Boolean hidden;

    /**
     * Database column: verification_type
     * Type: varchar(50) NOT NULL DEFAULT: 'NONE'::character varying
     */
    private String verificationType;

    /**
     * Database column: metadata
     * Type: jsonb DEFAULT: '{}'::jsonb
     */
    private JsonNode metadata;

    /**
     * Default constructor
     */
    public Parameter() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets order_tree
     * @return Integer
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets order_tree
     * @param orderTree the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets data
     * @return JsonNode
     */
    public JsonNode getData() {
        return this.data;
    }

    /**
     * Sets data
     * @param data the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setData(JsonNode data) {
        if (data == null) {
            throw new IllegalArgumentException("data cannot be null");
        }
        this.data = data;
    }

    /**
     * Gets label
     * @return String
     */
    public String getLabel() {
        return this.label;
    }

    /**
     * Sets label
     * @param label the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLabel(String label) {
        if (label != null && label.length() > 2147483647) {
            throw new IllegalArgumentException("label length cannot exceed 2147483647 characters");
        }
        this.label = label;
    }

    /**
     * Gets is_mandatory
     * @return Boolean
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets is_mandatory
     * @param isMandatory the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsMandatory(Boolean isMandatory) {
        if (isMandatory == null) {
            throw new IllegalArgumentException("is_mandatory cannot be null");
        }
        this.isMandatory = isMandatory;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (type != null && type.length() > 20) {
            throw new IllegalArgumentException("type length cannot exceed 20 characters");
        }
        this.type = type;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets tasks_id
     * @return Long
     */
    public Long getTasksId() {
        return this.tasksId;
    }

    /**
     * Sets tasks_id
     * @param tasksId the value to set
     */
    public void setTasksId(Long tasksId) {
        this.tasksId = tasksId;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 2147483647) {
            throw new IllegalArgumentException("description length cannot exceed 2147483647 characters");
        }
        this.description = description;
    }

    /**
     * Gets validations
     * @return JsonNode
     */
    public JsonNode getValidations() {
        return this.validations;
    }

    /**
     * Sets validations
     * @param validations the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setValidations(JsonNode validations) {
        if (validations == null) {
            throw new IllegalArgumentException("validations cannot be null");
        }
        this.validations = validations;
    }

    /**
     * Gets target_entity_type
     * @return String
     */
    public String getTargetEntityType() {
        return this.targetEntityType;
    }

    /**
     * Sets target_entity_type
     * @param targetEntityType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTargetEntityType(String targetEntityType) {
        if (targetEntityType == null) {
            throw new IllegalArgumentException("target_entity_type cannot be null");
        }
        if (targetEntityType != null && targetEntityType.length() > 50) {
            throw new IllegalArgumentException("target_entity_type length cannot exceed 50 characters");
        }
        this.targetEntityType = targetEntityType;
    }

    /**
     * Gets checklists_id
     * @return Long
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets checklists_id
     * @param checklistsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets is_auto_initialized
     * @return Boolean
     */
    public Boolean getIsAutoInitialized() {
        return this.isAutoInitialized;
    }

    /**
     * Sets is_auto_initialized
     * @param isAutoInitialized the value to set
     */
    public void setIsAutoInitialized(Boolean isAutoInitialized) {
        this.isAutoInitialized = isAutoInitialized;
    }

    /**
     * Gets auto_initialize
     * @return JsonNode
     */
    public JsonNode getAutoInitialize() {
        return this.autoInitialize;
    }

    /**
     * Sets auto_initialize
     * @param autoInitialize the value to set
     */
    public void setAutoInitialize(JsonNode autoInitialize) {
        this.autoInitialize = autoInitialize;
    }

    /**
     * Gets rules
     * @return JsonNode
     */
    public JsonNode getRules() {
        return this.rules;
    }

    /**
     * Sets rules
     * @param rules the value to set
     */
    public void setRules(JsonNode rules) {
        this.rules = rules;
    }

    /**
     * Gets hidden
     * @return Boolean
     */
    public Boolean getHidden() {
        return this.hidden;
    }

    /**
     * Sets hidden
     * @param hidden the value to set
     */
    public void setHidden(Boolean hidden) {
        this.hidden = hidden;
    }

    /**
     * Gets verification_type
     * @return String
     */
    public String getVerificationType() {
        return this.verificationType;
    }

    /**
     * Sets verification_type
     * @param verificationType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setVerificationType(String verificationType) {
        if (verificationType == null) {
            throw new IllegalArgumentException("verification_type cannot be null");
        }
        if (verificationType != null && verificationType.length() > 50) {
            throw new IllegalArgumentException("verification_type length cannot exceed 50 characters");
        }
        this.verificationType = verificationType;
    }

    /**
     * Gets metadata
     * @return JsonNode
     */
    public JsonNode getMetadata() {
        return this.metadata;
    }

    /**
     * Sets metadata
     * @param metadata the value to set
     */
    public void setMetadata(JsonNode metadata) {
        this.metadata = metadata;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Parameter other = (Parameter) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Parameter{" +
                "id=" + id +
                ", archived=" + archived +
                ", orderTree=" + orderTree +
                ", data=" + data +
                ", label=" + label +
                ", isMandatory=" + isMandatory +
                ", type=" + type +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", tasksId=" + tasksId +
                ", description=" + description +
                ", validations=" + validations +
                ", targetEntityType=" + targetEntityType +
                ", checklistsId=" + checklistsId +
                ", isAutoInitialized=" + isAutoInitialized +
                ", autoInitialize=" + autoInitialize +
                ", rules=" + rules +
                ", hidden=" + hidden +
                ", verificationType=" + verificationType +
                ", metadata=" + metadata +
                '}';
    }
}
