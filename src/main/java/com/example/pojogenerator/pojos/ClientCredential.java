package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: client_credentials
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: client_credentials
 * - Primary Keys: id
 */
public class ClientCredential implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: varchar(255) NOT NULL
     * Primary Key
     */
    private String id;

    /**
     * Database column: client_secret
     * Type: varchar(255) NOT NULL
     */
    private String clientSecret;

    /**
     * Database column: client_name
     * Type: varchar(50) NOT NULL
     */
    private String clientName;

    /**
     * Database column: client_description
     * Type: varchar(255)
     */
    private String clientDescription;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Default constructor
     */
    public ClientCredential() {
    }

    /**
     * Gets id
     * @return String
     */
    public String getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(String id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        if (id != null && id.length() > 255) {
            throw new IllegalArgumentException("id length cannot exceed 255 characters");
        }
        this.id = id;
    }

    /**
     * Gets client_secret
     * @return String
     */
    public String getClientSecret() {
        return this.clientSecret;
    }

    /**
     * Sets client_secret
     * @param clientSecret the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setClientSecret(String clientSecret) {
        if (clientSecret == null) {
            throw new IllegalArgumentException("client_secret cannot be null");
        }
        if (clientSecret != null && clientSecret.length() > 255) {
            throw new IllegalArgumentException("client_secret length cannot exceed 255 characters");
        }
        this.clientSecret = clientSecret;
    }

    /**
     * Gets client_name
     * @return String
     */
    public String getClientName() {
        return this.clientName;
    }

    /**
     * Sets client_name
     * @param clientName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setClientName(String clientName) {
        if (clientName == null) {
            throw new IllegalArgumentException("client_name cannot be null");
        }
        if (clientName != null && clientName.length() > 50) {
            throw new IllegalArgumentException("client_name length cannot exceed 50 characters");
        }
        this.clientName = clientName;
    }

    /**
     * Gets client_description
     * @return String
     */
    public String getClientDescription() {
        return this.clientDescription;
    }

    /**
     * Sets client_description
     * @param clientDescription the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setClientDescription(String clientDescription) {
        if (clientDescription != null && clientDescription.length() > 255) {
            throw new IllegalArgumentException("client_description length cannot exceed 255 characters");
        }
        this.clientDescription = clientDescription;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ClientCredential other = (ClientCredential) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "ClientCredential{" +
                "id=" + id +
                ", clientSecret=" + clientSecret +
                ", clientName=" + clientName +
                ", clientDescription=" + clientDescription +
                ", archived=" + archived +
                '}';
    }
}
