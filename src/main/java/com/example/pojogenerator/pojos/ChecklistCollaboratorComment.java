package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: checklist_collaborator_comments
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: checklist_collaborator_comments
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - created_by → users.id
 * - modified_by → users.id
 * - checklists_id → checklists.id
 * - checklist_collaborator_mappings_id → checklist_collaborator_mapping.id
 */
public class ChecklistCollaboratorComment implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8
     */
    private Long modifiedAt;

    /**
     * Database column: comments
     * Type: text(2147483647) NOT NULL
     */
    private String comments;

    /**
     * Database column: review_state
     * Type: varchar(50)
     */
    private String reviewState;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: checklists_id
     * Type: int8 NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: checklist_collaborator_mappings_id
     * Type: int8 NOT NULL
     * Foreign Key → checklist_collaborator_mapping.id
     */
    private Long checklistCollaboratorMappingsId;

    /**
     * Default constructor
     */
    public ChecklistCollaboratorComment() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     */
    public void setCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     */
    public void setModifiedAt(Long modifiedAt) {
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets comments
     * @return String
     */
    public String getComments() {
        return this.comments;
    }

    /**
     * Sets comments
     * @param comments the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setComments(String comments) {
        if (comments == null) {
            throw new IllegalArgumentException("comments cannot be null");
        }
        if (comments != null && comments.length() > 2147483647) {
            throw new IllegalArgumentException("comments length cannot exceed 2147483647 characters");
        }
        this.comments = comments;
    }

    /**
     * Gets review_state
     * @return String
     */
    public String getReviewState() {
        return this.reviewState;
    }

    /**
     * Sets review_state
     * @param reviewState the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setReviewState(String reviewState) {
        if (reviewState != null && reviewState.length() > 50) {
            throw new IllegalArgumentException("review_state length cannot exceed 50 characters");
        }
        this.reviewState = reviewState;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets checklists_id
     * @return Long
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets checklists_id
     * @param checklistsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets checklist_collaborator_mappings_id
     * @return Long
     */
    public Long getChecklistCollaboratorMappingsId() {
        return this.checklistCollaboratorMappingsId;
    }

    /**
     * Sets checklist_collaborator_mappings_id
     * @param checklistCollaboratorMappingsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistCollaboratorMappingsId(Long checklistCollaboratorMappingsId) {
        if (checklistCollaboratorMappingsId == null) {
            throw new IllegalArgumentException("checklist_collaborator_mappings_id cannot be null");
        }
        this.checklistCollaboratorMappingsId = checklistCollaboratorMappingsId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ChecklistCollaboratorComment other = (ChecklistCollaboratorComment) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "ChecklistCollaboratorComment{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", comments=" + comments +
                ", reviewState=" + reviewState +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", checklistsId=" + checklistsId +
                ", checklistCollaboratorMappingsId=" + checklistCollaboratorMappingsId +
                '}';
    }
}
