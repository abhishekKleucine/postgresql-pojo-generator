package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: qrtz_fired_triggers
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: qrtz_fired_triggers
 * - Primary Keys: sched_name, entry_id
 * 
 * Indexes:
 * - idx_qrtz_ft_tg: sched_name, trigger_group
 * - idx_qrtz_ft_jg: sched_name, job_group
 * - idx_qrtz_ft_inst_job_req_rcvry: sched_name, instance_name, requests_recovery
 * - idx_qrtz_ft_j_g: sched_name, job_name, job_group
 * - idx_qrtz_ft_trig_inst_name: sched_name, instance_name
 * - idx_qrtz_ft_t_g: sched_name, trigger_name, trigger_group
 */
public class QrtzFiredTrigger implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     */
    private String schedName;

    /**
     * Database column: entry_id
     * Type: varchar(95) NOT NULL
     * Primary Key
     */
    private String entryId;

    /**
     * Database column: trigger_name
     * Type: varchar(200) NOT NULL
     */
    private String triggerName;

    /**
     * Database column: trigger_group
     * Type: varchar(200) NOT NULL
     */
    private String triggerGroup;

    /**
     * Database column: instance_name
     * Type: varchar(200) NOT NULL
     */
    private String instanceName;

    /**
     * Database column: fired_time
     * Type: int8 NOT NULL
     */
    private Long firedTime;

    /**
     * Database column: sched_time
     * Type: int8 NOT NULL
     */
    private Long schedTime;

    /**
     * Database column: priority
     * Type: int4 NOT NULL
     */
    private Integer priority;

    /**
     * Database column: state
     * Type: varchar(16) NOT NULL
     */
    private String state;

    /**
     * Database column: job_name
     * Type: varchar(200)
     */
    private String jobName;

    /**
     * Database column: job_group
     * Type: varchar(200)
     */
    private String jobGroup;

    /**
     * Database column: is_nonconcurrent
     * Type: bool
     */
    private Boolean isNonconcurrent;

    /**
     * Database column: requests_recovery
     * Type: bool
     */
    private Boolean requestsRecovery;

    /**
     * Default constructor
     */
    public QrtzFiredTrigger() {
    }

    /**
     * Gets sched_name
     * @return String
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets sched_name
     * @param schedName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null");
        }
        if (schedName != null && schedName.length() > 120) {
            throw new IllegalArgumentException("sched_name length cannot exceed 120 characters");
        }
        this.schedName = schedName;
    }

    /**
     * Gets entry_id
     * @return String
     */
    public String getEntryId() {
        return this.entryId;
    }

    /**
     * Sets entry_id
     * @param entryId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setEntryId(String entryId) {
        if (entryId == null) {
            throw new IllegalArgumentException("entry_id cannot be null");
        }
        if (entryId != null && entryId.length() > 95) {
            throw new IllegalArgumentException("entry_id length cannot exceed 95 characters");
        }
        this.entryId = entryId;
    }

    /**
     * Gets trigger_name
     * @return String
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Sets trigger_name
     * @param triggerName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerName(String triggerName) {
        if (triggerName == null) {
            throw new IllegalArgumentException("trigger_name cannot be null");
        }
        if (triggerName != null && triggerName.length() > 200) {
            throw new IllegalArgumentException("trigger_name length cannot exceed 200 characters");
        }
        this.triggerName = triggerName;
    }

    /**
     * Gets trigger_group
     * @return String
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Sets trigger_group
     * @param triggerGroup the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerGroup(String triggerGroup) {
        if (triggerGroup == null) {
            throw new IllegalArgumentException("trigger_group cannot be null");
        }
        if (triggerGroup != null && triggerGroup.length() > 200) {
            throw new IllegalArgumentException("trigger_group length cannot exceed 200 characters");
        }
        this.triggerGroup = triggerGroup;
    }

    /**
     * Gets instance_name
     * @return String
     */
    public String getInstanceName() {
        return this.instanceName;
    }

    /**
     * Sets instance_name
     * @param instanceName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setInstanceName(String instanceName) {
        if (instanceName == null) {
            throw new IllegalArgumentException("instance_name cannot be null");
        }
        if (instanceName != null && instanceName.length() > 200) {
            throw new IllegalArgumentException("instance_name length cannot exceed 200 characters");
        }
        this.instanceName = instanceName;
    }

    /**
     * Gets fired_time
     * @return Long
     */
    public Long getFiredTime() {
        return this.firedTime;
    }

    /**
     * Sets fired_time
     * @param firedTime the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFiredTime(Long firedTime) {
        if (firedTime == null) {
            throw new IllegalArgumentException("fired_time cannot be null");
        }
        this.firedTime = firedTime;
    }

    /**
     * Gets sched_time
     * @return Long
     */
    public Long getSchedTime() {
        return this.schedTime;
    }

    /**
     * Sets sched_time
     * @param schedTime the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setSchedTime(Long schedTime) {
        if (schedTime == null) {
            throw new IllegalArgumentException("sched_time cannot be null");
        }
        this.schedTime = schedTime;
    }

    /**
     * Gets priority
     * @return Integer
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Sets priority
     * @param priority the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPriority(Integer priority) {
        if (priority == null) {
            throw new IllegalArgumentException("priority cannot be null");
        }
        this.priority = priority;
    }

    /**
     * Gets state
     * @return String
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets state
     * @param state the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null");
        }
        if (state != null && state.length() > 16) {
            throw new IllegalArgumentException("state length cannot exceed 16 characters");
        }
        this.state = state;
    }

    /**
     * Gets job_name
     * @return String
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Sets job_name
     * @param jobName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobName(String jobName) {
        if (jobName != null && jobName.length() > 200) {
            throw new IllegalArgumentException("job_name length cannot exceed 200 characters");
        }
        this.jobName = jobName;
    }

    /**
     * Gets job_group
     * @return String
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Sets job_group
     * @param jobGroup the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobGroup(String jobGroup) {
        if (jobGroup != null && jobGroup.length() > 200) {
            throw new IllegalArgumentException("job_group length cannot exceed 200 characters");
        }
        this.jobGroup = jobGroup;
    }

    /**
     * Gets is_nonconcurrent
     * @return Boolean
     */
    public Boolean getIsNonconcurrent() {
        return this.isNonconcurrent;
    }

    /**
     * Sets is_nonconcurrent
     * @param isNonconcurrent the value to set
     */
    public void setIsNonconcurrent(Boolean isNonconcurrent) {
        this.isNonconcurrent = isNonconcurrent;
    }

    /**
     * Gets requests_recovery
     * @return Boolean
     */
    public Boolean getRequestsRecovery() {
        return this.requestsRecovery;
    }

    /**
     * Sets requests_recovery
     * @param requestsRecovery the value to set
     */
    public void setRequestsRecovery(Boolean requestsRecovery) {
        this.requestsRecovery = requestsRecovery;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzFiredTrigger other = (QrtzFiredTrigger) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.entryId, other.entryId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.entryId);
    }

    @Override
    public String toString() {
        return "QrtzFiredTrigger{" +
                "schedName=" + schedName +
                ", entryId=" + entryId +
                ", triggerName=" + triggerName +
                ", triggerGroup=" + triggerGroup +
                ", instanceName=" + instanceName +
                ", firedTime=" + firedTime +
                ", schedTime=" + schedTime +
                ", priority=" + priority +
                ", state=" + state +
                ", jobName=" + jobName +
                ", jobGroup=" + jobGroup +
                ", isNonconcurrent=" + isNonconcurrent +
                ", requestsRecovery=" + requestsRecovery +
                '}';
    }
}
