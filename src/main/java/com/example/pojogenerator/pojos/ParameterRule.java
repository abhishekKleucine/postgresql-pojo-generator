package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: parameter_rules
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: parameter_rules
 * - Primary Keys: id
 */
public class ParameterRule implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: bigserial NOT NULL AUTO_INCREMENT DEFAULT: nextval('parameter_rules_id_seq'::regclass)
     * Primary Key
     */
    private Long id;

    /**
     * Database column: rules_id
     * Type: varchar(255) NOT NULL
     */
    private String rulesId;

    /**
     * Database column: operator
     * Type: varchar(255) NOT NULL
     */
    private String operator;

    /**
     * Database column: input
     * Type: _text(2147483647) NOT NULL
     */
    private String input;

    /**
     * Database column: visibility
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean visibility;

    /**
     * Default constructor
     */
    public ParameterRule() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets rules_id
     * @return String
     */
    public String getRulesId() {
        return this.rulesId;
    }

    /**
     * Sets rules_id
     * @param rulesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRulesId(String rulesId) {
        if (rulesId == null) {
            throw new IllegalArgumentException("rules_id cannot be null");
        }
        if (rulesId != null && rulesId.length() > 255) {
            throw new IllegalArgumentException("rules_id length cannot exceed 255 characters");
        }
        this.rulesId = rulesId;
    }

    /**
     * Gets operator
     * @return String
     */
    public String getOperator() {
        return this.operator;
    }

    /**
     * Sets operator
     * @param operator the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOperator(String operator) {
        if (operator == null) {
            throw new IllegalArgumentException("operator cannot be null");
        }
        if (operator != null && operator.length() > 255) {
            throw new IllegalArgumentException("operator length cannot exceed 255 characters");
        }
        this.operator = operator;
    }

    /**
     * Gets input
     * @return String
     */
    public String getInput() {
        return this.input;
    }

    /**
     * Sets input
     * @param input the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setInput(String input) {
        if (input == null) {
            throw new IllegalArgumentException("input cannot be null");
        }
        if (input != null && input.length() > 2147483647) {
            throw new IllegalArgumentException("input length cannot exceed 2147483647 characters");
        }
        this.input = input;
    }

    /**
     * Gets visibility
     * @return Boolean
     */
    public Boolean getVisibility() {
        return this.visibility;
    }

    /**
     * Sets visibility
     * @param visibility the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setVisibility(Boolean visibility) {
        if (visibility == null) {
            throw new IllegalArgumentException("visibility cannot be null");
        }
        this.visibility = visibility;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ParameterRule other = (ParameterRule) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "ParameterRule{" +
                "id=" + id +
                ", rulesId=" + rulesId +
                ", operator=" + operator +
                ", input=" + input +
                ", visibility=" + visibility +
                '}';
    }
}
