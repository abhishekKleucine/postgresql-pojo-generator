package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: user_group_audits
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: user_group_audits
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - user_groups_id → user_groups.id
 * - organisations_id → organisations.id
 * - facilities_id → facilities.id
 * - triggered_by → users.id
 */
public class UserGroupAudits implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: user_groups_id
     * Type: int8 NOT NULL
     * Foreign Key → user_groups.id
     */
    private Long userGroupsId;

    /**
     * Database column: organisations_id
     * Type: int8 NOT NULL
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: facilities_id
     * Type: int8 NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: triggered_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long triggeredBy;

    /**
     * Database column: triggered_at
     * Type: int8 NOT NULL
     */
    private Long triggeredAt;

    /**
     * Database column: details
     * Type: text(2147483647)
     */
    private String details;

    /**
     * Default constructor
     */
    public UserGroupAudits() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets user_groups_id
     * @return Long
     */
    public Long getUserGroupsId() {
        return this.userGroupsId;
    }

    /**
     * Sets user_groups_id
     * @param userGroupsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setUserGroupsId(Long userGroupsId) {
        if (userGroupsId == null) {
            throw new IllegalArgumentException("user_groups_id cannot be null");
        }
        this.userGroupsId = userGroupsId;
    }

    /**
     * Gets organisations_id
     * @return Long
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets organisations_id
     * @param organisationsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets facilities_id
     * @return Long
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets facilities_id
     * @param facilitiesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets triggered_by
     * @return Long
     */
    public Long getTriggeredBy() {
        return this.triggeredBy;
    }

    /**
     * Sets triggered_by
     * @param triggeredBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggeredBy(Long triggeredBy) {
        if (triggeredBy == null) {
            throw new IllegalArgumentException("triggered_by cannot be null");
        }
        this.triggeredBy = triggeredBy;
    }

    /**
     * Gets triggered_at
     * @return Long
     */
    public Long getTriggeredAt() {
        return this.triggeredAt;
    }

    /**
     * Sets triggered_at
     * @param triggeredAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggeredAt(Long triggeredAt) {
        if (triggeredAt == null) {
            throw new IllegalArgumentException("triggered_at cannot be null");
        }
        this.triggeredAt = triggeredAt;
    }

    /**
     * Gets details
     * @return String
     */
    public String getDetails() {
        return this.details;
    }

    /**
     * Sets details
     * @param details the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDetails(String details) {
        if (details != null && details.length() > 2147483647) {
            throw new IllegalArgumentException("details length cannot exceed 2147483647 characters");
        }
        this.details = details;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        UserGroupAudits other = (UserGroupAudits) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "UserGroupAudits{" +
                "id=" + id +
                ", userGroupsId=" + userGroupsId +
                ", organisationsId=" + organisationsId +
                ", facilitiesId=" + facilitiesId +
                ", triggeredBy=" + triggeredBy +
                ", triggeredAt=" + triggeredAt +
                ", details=" + details +
                '}';
    }
}
