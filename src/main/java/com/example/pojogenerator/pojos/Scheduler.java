package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: schedulers
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: schedulers
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - facilities_id → facilities.id
 * - versions_id → versions.id
 * - use_cases_id → use_cases.id
 * - checklists_id → checklists.id
 */
public class Scheduler implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: name
     * Type: varchar(255) NOT NULL
     */
    private String name;

    /**
     * Database column: description
     * Type: text(2147483647)
     */
    private String description;

    /**
     * Database column: state
     * Type: varchar(50) NOT NULL
     */
    private String state;

    /**
     * Database column: code
     * Type: varchar(20) NOT NULL
     */
    private String code;

    /**
     * Database column: facilities_id
     * Type: int8 NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: versions_id
     * Type: int8 NOT NULL
     * Foreign Key → versions.id
     */
    private Long versionsId;

    /**
     * Database column: use_cases_id
     * Type: int8 NOT NULL
     * Foreign Key → use_cases.id
     */
    private Long useCasesId;

    /**
     * Database column: checklists_id
     * Type: int8 NOT NULL
     * Foreign Key → checklists.id
     */
    private Long checklistsId;

    /**
     * Database column: checklists_name
     * Type: varchar(255) NOT NULL
     */
    private String checklistsName;

    /**
     * Database column: expected_start_date
     * Type: int8 NOT NULL
     */
    private Long expectedStartDate;

    /**
     * Database column: is_repeated
     * Type: bool DEFAULT: false
     */
    private Boolean isRepeated;

    /**
     * Database column: recurrence_rule
     * Type: text(2147483647)
     */
    private String recurrenceRule;

    /**
     * Database column: due_date_interval
     * Type: int4
     */
    private Integer dueDateInterval;

    /**
     * Database column: due_date_duration
     * Type: jsonb
     */
    private JsonNode dueDateDuration;

    /**
     * Database column: data
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode data;

    /**
     * Database column: is_custom_recurrence
     * Type: bool DEFAULT: false
     */
    private Boolean isCustomRecurrence;

    /**
     * Database column: enabled
     * Type: bool DEFAULT: true
     */
    private Boolean enabled;

    /**
     * Database column: archived
     * Type: bool DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: deprecated_at
     * Type: int8
     */
    private Long deprecatedAt;

    /**
     * Default constructor
     */
    public Scheduler() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets name
     * @return String
     */
    public String getName() {
        return this.name;
    }

    /**
     * Sets name
     * @param name the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setName(String name) {
        if (name == null) {
            throw new IllegalArgumentException("name cannot be null");
        }
        if (name != null && name.length() > 255) {
            throw new IllegalArgumentException("name length cannot exceed 255 characters");
        }
        this.name = name;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 2147483647) {
            throw new IllegalArgumentException("description length cannot exceed 2147483647 characters");
        }
        this.description = description;
    }

    /**
     * Gets state
     * @return String
     */
    public String getState() {
        return this.state;
    }

    /**
     * Sets state
     * @param state the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setState(String state) {
        if (state == null) {
            throw new IllegalArgumentException("state cannot be null");
        }
        if (state != null && state.length() > 50) {
            throw new IllegalArgumentException("state length cannot exceed 50 characters");
        }
        this.state = state;
    }

    /**
     * Gets code
     * @return String
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets code
     * @param code the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("code cannot be null");
        }
        if (code != null && code.length() > 20) {
            throw new IllegalArgumentException("code length cannot exceed 20 characters");
        }
        this.code = code;
    }

    /**
     * Gets facilities_id
     * @return Long
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets facilities_id
     * @param facilitiesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets versions_id
     * @return Long
     */
    public Long getVersionsId() {
        return this.versionsId;
    }

    /**
     * Sets versions_id
     * @param versionsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setVersionsId(Long versionsId) {
        if (versionsId == null) {
            throw new IllegalArgumentException("versions_id cannot be null");
        }
        this.versionsId = versionsId;
    }

    /**
     * Gets use_cases_id
     * @return Long
     */
    public Long getUseCasesId() {
        return this.useCasesId;
    }

    /**
     * Sets use_cases_id
     * @param useCasesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setUseCasesId(Long useCasesId) {
        if (useCasesId == null) {
            throw new IllegalArgumentException("use_cases_id cannot be null");
        }
        this.useCasesId = useCasesId;
    }

    /**
     * Gets checklists_id
     * @return Long
     */
    public Long getChecklistsId() {
        return this.checklistsId;
    }

    /**
     * Sets checklists_id
     * @param checklistsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistsId(Long checklistsId) {
        if (checklistsId == null) {
            throw new IllegalArgumentException("checklists_id cannot be null");
        }
        this.checklistsId = checklistsId;
    }

    /**
     * Gets checklists_name
     * @return String
     */
    public String getChecklistsName() {
        return this.checklistsName;
    }

    /**
     * Sets checklists_name
     * @param checklistsName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setChecklistsName(String checklistsName) {
        if (checklistsName == null) {
            throw new IllegalArgumentException("checklists_name cannot be null");
        }
        if (checklistsName != null && checklistsName.length() > 255) {
            throw new IllegalArgumentException("checklists_name length cannot exceed 255 characters");
        }
        this.checklistsName = checklistsName;
    }

    /**
     * Gets expected_start_date
     * @return Long
     */
    public Long getExpectedStartDate() {
        return this.expectedStartDate;
    }

    /**
     * Sets expected_start_date
     * @param expectedStartDate the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setExpectedStartDate(Long expectedStartDate) {
        if (expectedStartDate == null) {
            throw new IllegalArgumentException("expected_start_date cannot be null");
        }
        this.expectedStartDate = expectedStartDate;
    }

    /**
     * Gets is_repeated
     * @return Boolean
     */
    public Boolean getIsRepeated() {
        return this.isRepeated;
    }

    /**
     * Sets is_repeated
     * @param isRepeated the value to set
     */
    public void setIsRepeated(Boolean isRepeated) {
        this.isRepeated = isRepeated;
    }

    /**
     * Gets recurrence_rule
     * @return String
     */
    public String getRecurrenceRule() {
        return this.recurrenceRule;
    }

    /**
     * Sets recurrence_rule
     * @param recurrenceRule the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRecurrenceRule(String recurrenceRule) {
        if (recurrenceRule != null && recurrenceRule.length() > 2147483647) {
            throw new IllegalArgumentException("recurrence_rule length cannot exceed 2147483647 characters");
        }
        this.recurrenceRule = recurrenceRule;
    }

    /**
     * Gets due_date_interval
     * @return Integer
     */
    public Integer getDueDateInterval() {
        return this.dueDateInterval;
    }

    /**
     * Sets due_date_interval
     * @param dueDateInterval the value to set
     */
    public void setDueDateInterval(Integer dueDateInterval) {
        this.dueDateInterval = dueDateInterval;
    }

    /**
     * Gets due_date_duration
     * @return JsonNode
     */
    public JsonNode getDueDateDuration() {
        return this.dueDateDuration;
    }

    /**
     * Sets due_date_duration
     * @param dueDateDuration the value to set
     */
    public void setDueDateDuration(JsonNode dueDateDuration) {
        this.dueDateDuration = dueDateDuration;
    }

    /**
     * Gets data
     * @return JsonNode
     */
    public JsonNode getData() {
        return this.data;
    }

    /**
     * Sets data
     * @param data the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setData(JsonNode data) {
        if (data == null) {
            throw new IllegalArgumentException("data cannot be null");
        }
        this.data = data;
    }

    /**
     * Gets is_custom_recurrence
     * @return Boolean
     */
    public Boolean getIsCustomRecurrence() {
        return this.isCustomRecurrence;
    }

    /**
     * Sets is_custom_recurrence
     * @param isCustomRecurrence the value to set
     */
    public void setIsCustomRecurrence(Boolean isCustomRecurrence) {
        this.isCustomRecurrence = isCustomRecurrence;
    }

    /**
     * Gets enabled
     * @return Boolean
     */
    public Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Sets enabled
     * @param enabled the value to set
     */
    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets deprecated_at
     * @return Long
     */
    public Long getDeprecatedAt() {
        return this.deprecatedAt;
    }

    /**
     * Sets deprecated_at
     * @param deprecatedAt the value to set
     */
    public void setDeprecatedAt(Long deprecatedAt) {
        this.deprecatedAt = deprecatedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Scheduler other = (Scheduler) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Scheduler{" +
                "id=" + id +
                ", name=" + name +
                ", description=" + description +
                ", state=" + state +
                ", code=" + code +
                ", facilitiesId=" + facilitiesId +
                ", versionsId=" + versionsId +
                ", useCasesId=" + useCasesId +
                ", checklistsId=" + checklistsId +
                ", checklistsName=" + checklistsName +
                ", expectedStartDate=" + expectedStartDate +
                ", isRepeated=" + isRepeated +
                ", recurrenceRule=" + recurrenceRule +
                ", dueDateInterval=" + dueDateInterval +
                ", dueDateDuration=" + dueDateDuration +
                ", data=" + data +
                ", isCustomRecurrence=" + isCustomRecurrence +
                ", enabled=" + enabled +
                ", archived=" + archived +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", deprecatedAt=" + deprecatedAt +
                '}';
    }
}
