package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: job_annotations
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: job_annotations
 * - Primary Keys: id
 */
public class JobAnnotations implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: remarks
     * Type: text(2147483647)
     */
    private String remarks;

    /**
     * Database column: jobs_id
     * Type: int8 NOT NULL
     */
    private Long jobsId;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: code
     * Type: varchar(20)
     */
    private String code;

    /**
     * Default constructor
     */
    public JobAnnotations() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets remarks
     * @return String
     */
    public String getRemarks() {
        return this.remarks;
    }

    /**
     * Sets remarks
     * @param remarks the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRemarks(String remarks) {
        if (remarks != null && remarks.length() > 2147483647) {
            throw new IllegalArgumentException("remarks length cannot exceed 2147483647 characters");
        }
        this.remarks = remarks;
    }

    /**
     * Gets jobs_id
     * @return Long
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets jobs_id
     * @param jobsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets code
     * @return String
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets code
     * @param code the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCode(String code) {
        if (code != null && code.length() > 20) {
            throw new IllegalArgumentException("code length cannot exceed 20 characters");
        }
        this.code = code;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        JobAnnotations other = (JobAnnotations) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "JobAnnotations{" +
                "id=" + id +
                ", remarks=" + remarks +
                ", jobsId=" + jobsId +
                ", createdAt=" + createdAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                ", code=" + code +
                '}';
    }
}
