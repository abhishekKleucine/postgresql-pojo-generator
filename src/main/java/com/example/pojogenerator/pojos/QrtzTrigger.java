package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: qrtz_triggers
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: qrtz_triggers
 * - Primary Keys: sched_name, trigger_name, trigger_group
 * 
 * Indexes:
 * - idx_qrtz_t_n_state: sched_name, trigger_name, trigger_group, trigger_state
 * - idx_qrtz_t_g: sched_name, trigger_group
 * - idx_qrtz_t_nft_st_misfire: sched_name, misfire_instr, next_fire_time, trigger_state
 * - idx_qrtz_t_nft_st: sched_name, trigger_state, next_fire_time
 * - idx_qrtz_t_next_fire_time: sched_name, next_fire_time
 * - idx_qrtz_t_c: sched_name, calendar_name
 * - idx_qrtz_t_n_g_state: sched_name, trigger_group, trigger_state
 * - idx_qrtz_t_nft_misfire: sched_name, misfire_instr, next_fire_time
 * - idx_qrtz_t_nft_st_misfire_grp: sched_name, misfire_instr, next_fire_time, trigger_group, trigger_state
 * - idx_qrtz_t_jg: sched_name, job_group
 * - idx_qrtz_t_state: sched_name, trigger_state
 * - idx_qrtz_t_j: sched_name, job_name, job_group
 * 
 * Foreign Keys:
 * - sched_name → qrtz_job_details.sched_name
 * - job_name → qrtz_job_details.job_name
 * - job_group → qrtz_job_details.job_group
 */
public class QrtzTrigger implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: sched_name
     * Type: varchar(120) NOT NULL
     * Primary Key
     * Foreign Key → qrtz_job_details.sched_name
     */
    private String schedName;

    /**
     * Database column: trigger_name
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String triggerName;

    /**
     * Database column: trigger_group
     * Type: varchar(200) NOT NULL
     * Primary Key
     */
    private String triggerGroup;

    /**
     * Database column: job_name
     * Type: varchar(200) NOT NULL
     * Foreign Key → qrtz_job_details.job_name
     */
    private String jobName;

    /**
     * Database column: job_group
     * Type: varchar(200) NOT NULL
     * Foreign Key → qrtz_job_details.job_group
     */
    private String jobGroup;

    /**
     * Database column: description
     * Type: varchar(250)
     */
    private String description;

    /**
     * Database column: next_fire_time
     * Type: int8
     */
    private Long nextFireTime;

    /**
     * Database column: prev_fire_time
     * Type: int8
     */
    private Long prevFireTime;

    /**
     * Database column: priority
     * Type: int4
     */
    private Integer priority;

    /**
     * Database column: trigger_state
     * Type: varchar(16) NOT NULL
     */
    private String triggerState;

    /**
     * Database column: trigger_type
     * Type: varchar(8) NOT NULL
     */
    private String triggerType;

    /**
     * Database column: start_time
     * Type: int8 NOT NULL
     */
    private Long startTime;

    /**
     * Database column: end_time
     * Type: int8
     */
    private Long endTime;

    /**
     * Database column: calendar_name
     * Type: varchar(200)
     */
    private String calendarName;

    /**
     * Database column: misfire_instr
     * Type: int2(5)
     */
    private String misfireInstr;

    /**
     * Database column: job_data
     * Type: bytea(2147483647)
     */
    private String jobData;

    /**
     * Default constructor
     */
    public QrtzTrigger() {
    }

    /**
     * Gets sched_name
     * @return String
     */
    public String getSchedName() {
        return this.schedName;
    }

    /**
     * Sets sched_name
     * @param schedName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setSchedName(String schedName) {
        if (schedName == null) {
            throw new IllegalArgumentException("sched_name cannot be null");
        }
        if (schedName != null && schedName.length() > 120) {
            throw new IllegalArgumentException("sched_name length cannot exceed 120 characters");
        }
        this.schedName = schedName;
    }

    /**
     * Gets trigger_name
     * @return String
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Sets trigger_name
     * @param triggerName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerName(String triggerName) {
        if (triggerName == null) {
            throw new IllegalArgumentException("trigger_name cannot be null");
        }
        if (triggerName != null && triggerName.length() > 200) {
            throw new IllegalArgumentException("trigger_name length cannot exceed 200 characters");
        }
        this.triggerName = triggerName;
    }

    /**
     * Gets trigger_group
     * @return String
     */
    public String getTriggerGroup() {
        return this.triggerGroup;
    }

    /**
     * Sets trigger_group
     * @param triggerGroup the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerGroup(String triggerGroup) {
        if (triggerGroup == null) {
            throw new IllegalArgumentException("trigger_group cannot be null");
        }
        if (triggerGroup != null && triggerGroup.length() > 200) {
            throw new IllegalArgumentException("trigger_group length cannot exceed 200 characters");
        }
        this.triggerGroup = triggerGroup;
    }

    /**
     * Gets job_name
     * @return String
     */
    public String getJobName() {
        return this.jobName;
    }

    /**
     * Sets job_name
     * @param jobName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobName(String jobName) {
        if (jobName == null) {
            throw new IllegalArgumentException("job_name cannot be null");
        }
        if (jobName != null && jobName.length() > 200) {
            throw new IllegalArgumentException("job_name length cannot exceed 200 characters");
        }
        this.jobName = jobName;
    }

    /**
     * Gets job_group
     * @return String
     */
    public String getJobGroup() {
        return this.jobGroup;
    }

    /**
     * Sets job_group
     * @param jobGroup the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobGroup(String jobGroup) {
        if (jobGroup == null) {
            throw new IllegalArgumentException("job_group cannot be null");
        }
        if (jobGroup != null && jobGroup.length() > 200) {
            throw new IllegalArgumentException("job_group length cannot exceed 200 characters");
        }
        this.jobGroup = jobGroup;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 250) {
            throw new IllegalArgumentException("description length cannot exceed 250 characters");
        }
        this.description = description;
    }

    /**
     * Gets next_fire_time
     * @return Long
     */
    public Long getNextFireTime() {
        return this.nextFireTime;
    }

    /**
     * Sets next_fire_time
     * @param nextFireTime the value to set
     */
    public void setNextFireTime(Long nextFireTime) {
        this.nextFireTime = nextFireTime;
    }

    /**
     * Gets prev_fire_time
     * @return Long
     */
    public Long getPrevFireTime() {
        return this.prevFireTime;
    }

    /**
     * Sets prev_fire_time
     * @param prevFireTime the value to set
     */
    public void setPrevFireTime(Long prevFireTime) {
        this.prevFireTime = prevFireTime;
    }

    /**
     * Gets priority
     * @return Integer
     */
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Sets priority
     * @param priority the value to set
     */
    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    /**
     * Gets trigger_state
     * @return String
     */
    public String getTriggerState() {
        return this.triggerState;
    }

    /**
     * Sets trigger_state
     * @param triggerState the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerState(String triggerState) {
        if (triggerState == null) {
            throw new IllegalArgumentException("trigger_state cannot be null");
        }
        if (triggerState != null && triggerState.length() > 16) {
            throw new IllegalArgumentException("trigger_state length cannot exceed 16 characters");
        }
        this.triggerState = triggerState;
    }

    /**
     * Gets trigger_type
     * @return String
     */
    public String getTriggerType() {
        return this.triggerType;
    }

    /**
     * Sets trigger_type
     * @param triggerType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerType(String triggerType) {
        if (triggerType == null) {
            throw new IllegalArgumentException("trigger_type cannot be null");
        }
        if (triggerType != null && triggerType.length() > 8) {
            throw new IllegalArgumentException("trigger_type length cannot exceed 8 characters");
        }
        this.triggerType = triggerType;
    }

    /**
     * Gets start_time
     * @return Long
     */
    public Long getStartTime() {
        return this.startTime;
    }

    /**
     * Sets start_time
     * @param startTime the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setStartTime(Long startTime) {
        if (startTime == null) {
            throw new IllegalArgumentException("start_time cannot be null");
        }
        this.startTime = startTime;
    }

    /**
     * Gets end_time
     * @return Long
     */
    public Long getEndTime() {
        return this.endTime;
    }

    /**
     * Sets end_time
     * @param endTime the value to set
     */
    public void setEndTime(Long endTime) {
        this.endTime = endTime;
    }

    /**
     * Gets calendar_name
     * @return String
     */
    public String getCalendarName() {
        return this.calendarName;
    }

    /**
     * Sets calendar_name
     * @param calendarName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCalendarName(String calendarName) {
        if (calendarName != null && calendarName.length() > 200) {
            throw new IllegalArgumentException("calendar_name length cannot exceed 200 characters");
        }
        this.calendarName = calendarName;
    }

    /**
     * Gets misfire_instr
     * @return String
     */
    public String getMisfireInstr() {
        return this.misfireInstr;
    }

    /**
     * Sets misfire_instr
     * @param misfireInstr the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setMisfireInstr(String misfireInstr) {
        if (misfireInstr != null && misfireInstr.length() > 5) {
            throw new IllegalArgumentException("misfire_instr length cannot exceed 5 characters");
        }
        this.misfireInstr = misfireInstr;
    }

    /**
     * Gets job_data
     * @return String
     */
    public String getJobData() {
        return this.jobData;
    }

    /**
     * Sets job_data
     * @param jobData the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobData(String jobData) {
        if (jobData != null && jobData.length() > 2147483647) {
            throw new IllegalArgumentException("job_data length cannot exceed 2147483647 characters");
        }
        this.jobData = jobData;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        QrtzTrigger other = (QrtzTrigger) obj;
        return Objects.equals(this.schedName, other.schedName) && Objects.equals(this.triggerName, other.triggerName) && Objects.equals(this.triggerGroup, other.triggerGroup);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.schedName, this.triggerName, this.triggerGroup);
    }

    @Override
    public String toString() {
        return "QrtzTrigger{" +
                "schedName=" + schedName +
                ", triggerName=" + triggerName +
                ", triggerGroup=" + triggerGroup +
                ", jobName=" + jobName +
                ", jobGroup=" + jobGroup +
                ", description=" + description +
                ", nextFireTime=" + nextFireTime +
                ", prevFireTime=" + prevFireTime +
                ", priority=" + priority +
                ", triggerState=" + triggerState +
                ", triggerType=" + triggerType +
                ", startTime=" + startTime +
                ", endTime=" + endTime +
                ", calendarName=" + calendarName +
                ", misfireInstr=" + misfireInstr +
                ", jobData=" + jobData +
                '}';
    }
}
