package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: relation_values
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: relation_values
 * - Primary Keys: id
 * 
 * Indexes:
 * - pkp32qjbpeex1d3zpvhx66 (UNIQUE): id
 * 
 * Foreign Keys:
 * - jobs_id → jobs.id
 * - relations_id → relations.id
 */
public class RelationValue implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: jobs_id
     * Type: int8 NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: relations_id
     * Type: int8 NOT NULL
     * Foreign Key → relations.id
     */
    private Long relationsId;

    /**
     * Database column: object_id
     * Type: varchar(50) NOT NULL
     */
    private String objectId;

    /**
     * Database column: object_external_id
     * Type: varchar(255) NOT NULL
     */
    private String objectExternalId;

    /**
     * Database column: collection
     * Type: varchar(255) NOT NULL
     */
    private String collection;

    /**
     * Database column: object_display_name
     * Type: varchar(255) NOT NULL
     */
    private String objectDisplayName;

    /**
     * Database column: object_type_external_id
     * Type: varchar(255) NOT NULL
     */
    private String objectTypeExternalId;

    /**
     * Database column: object_type_display_name
     * Type: varchar(255) NOT NULL
     */
    private String objectTypeDisplayName;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public RelationValue() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets jobs_id
     * @return Long
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets jobs_id
     * @param jobsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets relations_id
     * @return Long
     */
    public Long getRelationsId() {
        return this.relationsId;
    }

    /**
     * Sets relations_id
     * @param relationsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setRelationsId(Long relationsId) {
        if (relationsId == null) {
            throw new IllegalArgumentException("relations_id cannot be null");
        }
        this.relationsId = relationsId;
    }

    /**
     * Gets object_id
     * @return String
     */
    public String getObjectId() {
        return this.objectId;
    }

    /**
     * Sets object_id
     * @param objectId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setObjectId(String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("object_id cannot be null");
        }
        if (objectId != null && objectId.length() > 50) {
            throw new IllegalArgumentException("object_id length cannot exceed 50 characters");
        }
        this.objectId = objectId;
    }

    /**
     * Gets object_external_id
     * @return String
     */
    public String getObjectExternalId() {
        return this.objectExternalId;
    }

    /**
     * Sets object_external_id
     * @param objectExternalId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setObjectExternalId(String objectExternalId) {
        if (objectExternalId == null) {
            throw new IllegalArgumentException("object_external_id cannot be null");
        }
        if (objectExternalId != null && objectExternalId.length() > 255) {
            throw new IllegalArgumentException("object_external_id length cannot exceed 255 characters");
        }
        this.objectExternalId = objectExternalId;
    }

    /**
     * Gets collection
     * @return String
     */
    public String getCollection() {
        return this.collection;
    }

    /**
     * Sets collection
     * @param collection the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCollection(String collection) {
        if (collection == null) {
            throw new IllegalArgumentException("collection cannot be null");
        }
        if (collection != null && collection.length() > 255) {
            throw new IllegalArgumentException("collection length cannot exceed 255 characters");
        }
        this.collection = collection;
    }

    /**
     * Gets object_display_name
     * @return String
     */
    public String getObjectDisplayName() {
        return this.objectDisplayName;
    }

    /**
     * Sets object_display_name
     * @param objectDisplayName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setObjectDisplayName(String objectDisplayName) {
        if (objectDisplayName == null) {
            throw new IllegalArgumentException("object_display_name cannot be null");
        }
        if (objectDisplayName != null && objectDisplayName.length() > 255) {
            throw new IllegalArgumentException("object_display_name length cannot exceed 255 characters");
        }
        this.objectDisplayName = objectDisplayName;
    }

    /**
     * Gets object_type_external_id
     * @return String
     */
    public String getObjectTypeExternalId() {
        return this.objectTypeExternalId;
    }

    /**
     * Sets object_type_external_id
     * @param objectTypeExternalId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setObjectTypeExternalId(String objectTypeExternalId) {
        if (objectTypeExternalId == null) {
            throw new IllegalArgumentException("object_type_external_id cannot be null");
        }
        if (objectTypeExternalId != null && objectTypeExternalId.length() > 255) {
            throw new IllegalArgumentException("object_type_external_id length cannot exceed 255 characters");
        }
        this.objectTypeExternalId = objectTypeExternalId;
    }

    /**
     * Gets object_type_display_name
     * @return String
     */
    public String getObjectTypeDisplayName() {
        return this.objectTypeDisplayName;
    }

    /**
     * Sets object_type_display_name
     * @param objectTypeDisplayName the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setObjectTypeDisplayName(String objectTypeDisplayName) {
        if (objectTypeDisplayName == null) {
            throw new IllegalArgumentException("object_type_display_name cannot be null");
        }
        if (objectTypeDisplayName != null && objectTypeDisplayName.length() > 255) {
            throw new IllegalArgumentException("object_type_display_name length cannot exceed 255 characters");
        }
        this.objectTypeDisplayName = objectTypeDisplayName;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        RelationValue other = (RelationValue) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "RelationValue{" +
                "id=" + id +
                ", jobsId=" + jobsId +
                ", relationsId=" + relationsId +
                ", objectId=" + objectId +
                ", objectExternalId=" + objectExternalId +
                ", collection=" + collection +
                ", objectDisplayName=" + objectDisplayName +
                ", objectTypeExternalId=" + objectTypeExternalId +
                ", objectTypeDisplayName=" + objectTypeDisplayName +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
