package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: corrections
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: corrections
 * - Primary Keys: id
 * 
 * Indexes:
 * - idx_corrections_parameter_values_id: parameter_values_id
 * - idx_corrections_jobs_id: jobs_id
 * 
 * Foreign Keys:
 * - parameter_values_id → parameter_values.id
 * - task_executions_id → task_executions.id
 * - facilities_id → facilities.id
 * - jobs_id → jobs.id
 */
public class Correction implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: code
     * Type: varchar(20) NOT NULL
     */
    private String code;

    /**
     * Database column: old_value
     * Type: text(2147483647)
     */
    private String oldValue;

    /**
     * Database column: new_value
     * Type: text(2147483647)
     */
    private String newValue;

    /**
     * Database column: old_choices
     * Type: jsonb
     */
    private JsonNode oldChoices;

    /**
     * Database column: new_choices
     * Type: jsonb
     */
    private JsonNode newChoices;

    /**
     * Database column: parameter_values_id
     * Type: int8 NOT NULL
     * Foreign Key → parameter_values.id
     */
    private Long parameterValuesId;

    /**
     * Database column: task_executions_id
     * Type: int8 NOT NULL
     * Foreign Key → task_executions.id
     */
    private Long taskExecutionsId;

    /**
     * Database column: facilities_id
     * Type: int8 NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: jobs_id
     * Type: int8 NOT NULL
     * Foreign Key → jobs.id
     */
    private Long jobsId;

    /**
     * Database column: status
     * Type: varchar(50) NOT NULL
     */
    private String status;

    /**
     * Database column: initiators_reason
     * Type: text(2147483647)
     */
    private String initiatorsReason;

    /**
     * Database column: correctors_reason
     * Type: text(2147483647)
     */
    private String correctorsReason;

    /**
     * Database column: reviewers_reason
     * Type: text(2147483647)
     */
    private String reviewersReason;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: previous_state
     * Type: varchar(50) DEFAULT: NULL::character varying
     */
    private String previousState;

    /**
     * Default constructor
     */
    public Correction() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets code
     * @return String
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Sets code
     * @param code the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCode(String code) {
        if (code == null) {
            throw new IllegalArgumentException("code cannot be null");
        }
        if (code != null && code.length() > 20) {
            throw new IllegalArgumentException("code length cannot exceed 20 characters");
        }
        this.code = code;
    }

    /**
     * Gets old_value
     * @return String
     */
    public String getOldValue() {
        return this.oldValue;
    }

    /**
     * Sets old_value
     * @param oldValue the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOldValue(String oldValue) {
        if (oldValue != null && oldValue.length() > 2147483647) {
            throw new IllegalArgumentException("old_value length cannot exceed 2147483647 characters");
        }
        this.oldValue = oldValue;
    }

    /**
     * Gets new_value
     * @return String
     */
    public String getNewValue() {
        return this.newValue;
    }

    /**
     * Sets new_value
     * @param newValue the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setNewValue(String newValue) {
        if (newValue != null && newValue.length() > 2147483647) {
            throw new IllegalArgumentException("new_value length cannot exceed 2147483647 characters");
        }
        this.newValue = newValue;
    }

    /**
     * Gets old_choices
     * @return JsonNode
     */
    public JsonNode getOldChoices() {
        return this.oldChoices;
    }

    /**
     * Sets old_choices
     * @param oldChoices the value to set
     */
    public void setOldChoices(JsonNode oldChoices) {
        this.oldChoices = oldChoices;
    }

    /**
     * Gets new_choices
     * @return JsonNode
     */
    public JsonNode getNewChoices() {
        return this.newChoices;
    }

    /**
     * Sets new_choices
     * @param newChoices the value to set
     */
    public void setNewChoices(JsonNode newChoices) {
        this.newChoices = newChoices;
    }

    /**
     * Gets parameter_values_id
     * @return Long
     */
    public Long getParameterValuesId() {
        return this.parameterValuesId;
    }

    /**
     * Sets parameter_values_id
     * @param parameterValuesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setParameterValuesId(Long parameterValuesId) {
        if (parameterValuesId == null) {
            throw new IllegalArgumentException("parameter_values_id cannot be null");
        }
        this.parameterValuesId = parameterValuesId;
    }

    /**
     * Gets task_executions_id
     * @return Long
     */
    public Long getTaskExecutionsId() {
        return this.taskExecutionsId;
    }

    /**
     * Sets task_executions_id
     * @param taskExecutionsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTaskExecutionsId(Long taskExecutionsId) {
        if (taskExecutionsId == null) {
            throw new IllegalArgumentException("task_executions_id cannot be null");
        }
        this.taskExecutionsId = taskExecutionsId;
    }

    /**
     * Gets facilities_id
     * @return Long
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets facilities_id
     * @param facilitiesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets jobs_id
     * @return Long
     */
    public Long getJobsId() {
        return this.jobsId;
    }

    /**
     * Sets jobs_id
     * @param jobsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setJobsId(Long jobsId) {
        if (jobsId == null) {
            throw new IllegalArgumentException("jobs_id cannot be null");
        }
        this.jobsId = jobsId;
    }

    /**
     * Gets status
     * @return String
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Sets status
     * @param status the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setStatus(String status) {
        if (status == null) {
            throw new IllegalArgumentException("status cannot be null");
        }
        if (status != null && status.length() > 50) {
            throw new IllegalArgumentException("status length cannot exceed 50 characters");
        }
        this.status = status;
    }

    /**
     * Gets initiators_reason
     * @return String
     */
    public String getInitiatorsReason() {
        return this.initiatorsReason;
    }

    /**
     * Sets initiators_reason
     * @param initiatorsReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setInitiatorsReason(String initiatorsReason) {
        if (initiatorsReason != null && initiatorsReason.length() > 2147483647) {
            throw new IllegalArgumentException("initiators_reason length cannot exceed 2147483647 characters");
        }
        this.initiatorsReason = initiatorsReason;
    }

    /**
     * Gets correctors_reason
     * @return String
     */
    public String getCorrectorsReason() {
        return this.correctorsReason;
    }

    /**
     * Sets correctors_reason
     * @param correctorsReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCorrectorsReason(String correctorsReason) {
        if (correctorsReason != null && correctorsReason.length() > 2147483647) {
            throw new IllegalArgumentException("correctors_reason length cannot exceed 2147483647 characters");
        }
        this.correctorsReason = correctorsReason;
    }

    /**
     * Gets reviewers_reason
     * @return String
     */
    public String getReviewersReason() {
        return this.reviewersReason;
    }

    /**
     * Sets reviewers_reason
     * @param reviewersReason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setReviewersReason(String reviewersReason) {
        if (reviewersReason != null && reviewersReason.length() > 2147483647) {
            throw new IllegalArgumentException("reviewers_reason length cannot exceed 2147483647 characters");
        }
        this.reviewersReason = reviewersReason;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets previous_state
     * @return String
     */
    public String getPreviousState() {
        return this.previousState;
    }

    /**
     * Sets previous_state
     * @param previousState the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPreviousState(String previousState) {
        if (previousState != null && previousState.length() > 50) {
            throw new IllegalArgumentException("previous_state length cannot exceed 50 characters");
        }
        this.previousState = previousState;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Correction other = (Correction) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Correction{" +
                "id=" + id +
                ", code=" + code +
                ", oldValue=" + oldValue +
                ", newValue=" + newValue +
                ", oldChoices=" + oldChoices +
                ", newChoices=" + newChoices +
                ", parameterValuesId=" + parameterValuesId +
                ", taskExecutionsId=" + taskExecutionsId +
                ", facilitiesId=" + facilitiesId +
                ", jobsId=" + jobsId +
                ", status=" + status +
                ", initiatorsReason=" + initiatorsReason +
                ", correctorsReason=" + correctorsReason +
                ", reviewersReason=" + reviewersReason +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                ", previousState=" + previousState +
                '}';
    }
}
