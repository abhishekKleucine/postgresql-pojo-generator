package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: task_execution_timers
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: task_execution_timers
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - task_executions_id → task_executions.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class TaskExecutionTimer implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: comment
     * Type: text(2147483647)
     */
    private String comment;

    /**
     * Database column: paused_at
     * Type: int8 NOT NULL
     */
    private Long pausedAt;

    /**
     * Database column: reason
     * Type: text(2147483647)
     */
    private String reason;

    /**
     * Database column: resumed_at
     * Type: int8
     */
    private Long resumedAt;

    /**
     * Database column: task_executions_id
     * Type: int8 NOT NULL
     * Foreign Key → task_executions.id
     */
    private Long taskExecutionsId;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public TaskExecutionTimer() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets comment
     * @return String
     */
    public String getComment() {
        return this.comment;
    }

    /**
     * Sets comment
     * @param comment the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setComment(String comment) {
        if (comment != null && comment.length() > 2147483647) {
            throw new IllegalArgumentException("comment length cannot exceed 2147483647 characters");
        }
        this.comment = comment;
    }

    /**
     * Gets paused_at
     * @return Long
     */
    public Long getPausedAt() {
        return this.pausedAt;
    }

    /**
     * Sets paused_at
     * @param pausedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPausedAt(Long pausedAt) {
        if (pausedAt == null) {
            throw new IllegalArgumentException("paused_at cannot be null");
        }
        this.pausedAt = pausedAt;
    }

    /**
     * Gets reason
     * @return String
     */
    public String getReason() {
        return this.reason;
    }

    /**
     * Sets reason
     * @param reason the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setReason(String reason) {
        if (reason != null && reason.length() > 2147483647) {
            throw new IllegalArgumentException("reason length cannot exceed 2147483647 characters");
        }
        this.reason = reason;
    }

    /**
     * Gets resumed_at
     * @return Long
     */
    public Long getResumedAt() {
        return this.resumedAt;
    }

    /**
     * Sets resumed_at
     * @param resumedAt the value to set
     */
    public void setResumedAt(Long resumedAt) {
        this.resumedAt = resumedAt;
    }

    /**
     * Gets task_executions_id
     * @return Long
     */
    public Long getTaskExecutionsId() {
        return this.taskExecutionsId;
    }

    /**
     * Sets task_executions_id
     * @param taskExecutionsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTaskExecutionsId(Long taskExecutionsId) {
        if (taskExecutionsId == null) {
            throw new IllegalArgumentException("task_executions_id cannot be null");
        }
        this.taskExecutionsId = taskExecutionsId;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskExecutionTimer other = (TaskExecutionTimer) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "TaskExecutionTimer{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", comment=" + comment +
                ", pausedAt=" + pausedAt +
                ", reason=" + reason +
                ", resumedAt=" + resumedAt +
                ", taskExecutionsId=" + taskExecutionsId +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
