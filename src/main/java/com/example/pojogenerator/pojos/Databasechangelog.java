package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import java.time.*;

/**
 * POJO class for table: databasechangelog
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: databasechangelog
 */
public class Databasechangelog implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: varchar(255) NOT NULL
     */
    private String id;

    /**
     * Database column: author
     * Type: varchar(255) NOT NULL
     */
    private String author;

    /**
     * Database column: filename
     * Type: varchar(255) NOT NULL
     */
    private String filename;

    /**
     * Database column: dateexecuted
     * Type: timestamp NOT NULL
     */
    private java.time.LocalDateTime dateexecuted;

    /**
     * Database column: orderexecuted
     * Type: int4 NOT NULL
     */
    private Integer orderexecuted;

    /**
     * Database column: exectype
     * Type: varchar(10) NOT NULL
     */
    private String exectype;

    /**
     * Database column: md5sum
     * Type: varchar(35)
     */
    private String md5sum;

    /**
     * Database column: description
     * Type: varchar(255)
     */
    private String description;

    /**
     * Database column: comments
     * Type: varchar(255)
     */
    private String comments;

    /**
     * Database column: tag
     * Type: varchar(255)
     */
    private String tag;

    /**
     * Database column: liquibase
     * Type: varchar(20)
     */
    private String liquibase;

    /**
     * Database column: contexts
     * Type: varchar(255)
     */
    private String contexts;

    /**
     * Database column: labels
     * Type: varchar(255)
     */
    private String labels;

    /**
     * Database column: deployment_id
     * Type: varchar(10)
     */
    private String deploymentId;

    /**
     * Default constructor
     */
    public Databasechangelog() {
    }

    /**
     * Gets id
     * @return String
     */
    public String getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(String id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        if (id != null && id.length() > 255) {
            throw new IllegalArgumentException("id length cannot exceed 255 characters");
        }
        this.id = id;
    }

    /**
     * Gets author
     * @return String
     */
    public String getAuthor() {
        return this.author;
    }

    /**
     * Sets author
     * @param author the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setAuthor(String author) {
        if (author == null) {
            throw new IllegalArgumentException("author cannot be null");
        }
        if (author != null && author.length() > 255) {
            throw new IllegalArgumentException("author length cannot exceed 255 characters");
        }
        this.author = author;
    }

    /**
     * Gets filename
     * @return String
     */
    public String getFilename() {
        return this.filename;
    }

    /**
     * Sets filename
     * @param filename the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFilename(String filename) {
        if (filename == null) {
            throw new IllegalArgumentException("filename cannot be null");
        }
        if (filename != null && filename.length() > 255) {
            throw new IllegalArgumentException("filename length cannot exceed 255 characters");
        }
        this.filename = filename;
    }

    /**
     * Gets dateexecuted
     * @return java.time.LocalDateTime
     */
    public java.time.LocalDateTime getDateexecuted() {
        return this.dateexecuted;
    }

    /**
     * Sets dateexecuted
     * @param dateexecuted the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDateexecuted(java.time.LocalDateTime dateexecuted) {
        if (dateexecuted == null) {
            throw new IllegalArgumentException("dateexecuted cannot be null");
        }
        this.dateexecuted = dateexecuted;
    }

    /**
     * Gets orderexecuted
     * @return Integer
     */
    public Integer getOrderexecuted() {
        return this.orderexecuted;
    }

    /**
     * Sets orderexecuted
     * @param orderexecuted the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderexecuted(Integer orderexecuted) {
        if (orderexecuted == null) {
            throw new IllegalArgumentException("orderexecuted cannot be null");
        }
        this.orderexecuted = orderexecuted;
    }

    /**
     * Gets exectype
     * @return String
     */
    public String getExectype() {
        return this.exectype;
    }

    /**
     * Sets exectype
     * @param exectype the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setExectype(String exectype) {
        if (exectype == null) {
            throw new IllegalArgumentException("exectype cannot be null");
        }
        if (exectype != null && exectype.length() > 10) {
            throw new IllegalArgumentException("exectype length cannot exceed 10 characters");
        }
        this.exectype = exectype;
    }

    /**
     * Gets md5sum
     * @return String
     */
    public String getMd5sum() {
        return this.md5sum;
    }

    /**
     * Sets md5sum
     * @param md5sum the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setMd5sum(String md5sum) {
        if (md5sum != null && md5sum.length() > 35) {
            throw new IllegalArgumentException("md5sum length cannot exceed 35 characters");
        }
        this.md5sum = md5sum;
    }

    /**
     * Gets description
     * @return String
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Sets description
     * @param description the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDescription(String description) {
        if (description != null && description.length() > 255) {
            throw new IllegalArgumentException("description length cannot exceed 255 characters");
        }
        this.description = description;
    }

    /**
     * Gets comments
     * @return String
     */
    public String getComments() {
        return this.comments;
    }

    /**
     * Sets comments
     * @param comments the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setComments(String comments) {
        if (comments != null && comments.length() > 255) {
            throw new IllegalArgumentException("comments length cannot exceed 255 characters");
        }
        this.comments = comments;
    }

    /**
     * Gets tag
     * @return String
     */
    public String getTag() {
        return this.tag;
    }

    /**
     * Sets tag
     * @param tag the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTag(String tag) {
        if (tag != null && tag.length() > 255) {
            throw new IllegalArgumentException("tag length cannot exceed 255 characters");
        }
        this.tag = tag;
    }

    /**
     * Gets liquibase
     * @return String
     */
    public String getLiquibase() {
        return this.liquibase;
    }

    /**
     * Sets liquibase
     * @param liquibase the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLiquibase(String liquibase) {
        if (liquibase != null && liquibase.length() > 20) {
            throw new IllegalArgumentException("liquibase length cannot exceed 20 characters");
        }
        this.liquibase = liquibase;
    }

    /**
     * Gets contexts
     * @return String
     */
    public String getContexts() {
        return this.contexts;
    }

    /**
     * Sets contexts
     * @param contexts the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setContexts(String contexts) {
        if (contexts != null && contexts.length() > 255) {
            throw new IllegalArgumentException("contexts length cannot exceed 255 characters");
        }
        this.contexts = contexts;
    }

    /**
     * Gets labels
     * @return String
     */
    public String getLabels() {
        return this.labels;
    }

    /**
     * Sets labels
     * @param labels the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLabels(String labels) {
        if (labels != null && labels.length() > 255) {
            throw new IllegalArgumentException("labels length cannot exceed 255 characters");
        }
        this.labels = labels;
    }

    /**
     * Gets deployment_id
     * @return String
     */
    public String getDeploymentId() {
        return this.deploymentId;
    }

    /**
     * Sets deployment_id
     * @param deploymentId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDeploymentId(String deploymentId) {
        if (deploymentId != null && deploymentId.length() > 10) {
            throw new IllegalArgumentException("deployment_id length cannot exceed 10 characters");
        }
        this.deploymentId = deploymentId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Databasechangelog other = (Databasechangelog) obj;
        return Objects.equals(this.id, other.id) && Objects.equals(this.author, other.author) && Objects.equals(this.filename, other.filename) && Objects.equals(this.dateexecuted, other.dateexecuted) && Objects.equals(this.orderexecuted, other.orderexecuted) && Objects.equals(this.exectype, other.exectype) && Objects.equals(this.md5sum, other.md5sum) && Objects.equals(this.description, other.description) && Objects.equals(this.comments, other.comments) && Objects.equals(this.tag, other.tag) && Objects.equals(this.liquibase, other.liquibase) && Objects.equals(this.contexts, other.contexts) && Objects.equals(this.labels, other.labels) && Objects.equals(this.deploymentId, other.deploymentId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.author, this.filename, this.dateexecuted, this.orderexecuted, this.exectype, this.md5sum, this.description, this.comments, this.tag, this.liquibase, this.contexts, this.labels, this.deploymentId);
    }

    @Override
    public String toString() {
        return "Databasechangelog{" +
                "id=" + id +
                ", author=" + author +
                ", filename=" + filename +
                ", dateexecuted=" + dateexecuted +
                ", orderexecuted=" + orderexecuted +
                ", exectype=" + exectype +
                ", md5sum=" + md5sum +
                ", description=" + description +
                ", comments=" + comments +
                ", tag=" + tag +
                ", liquibase=" + liquibase +
                ", contexts=" + contexts +
                ", labels=" + labels +
                ", deploymentId=" + deploymentId +
                '}';
    }
}
