package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import java.time.*;

/**
 * POJO class for table: licenses
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: licenses
 * - Primary Keys: id
 * 
 * Foreign Keys:
 * - organisations_id → organisations.id
 * - facilities_id → facilities.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class License implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: organisations_id
     * Type: int8 NOT NULL
     * Foreign Key → organisations.id
     */
    private Long organisationsId;

    /**
     * Database column: facilities_id
     * Type: int8 NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: product
     * Type: varchar(150)
     */
    private String product;

    /**
     * Database column: type
     * Type: varchar(150)
     */
    private String type;

    /**
     * Database column: subscription_start_date
     * Type: date
     */
    private java.time.LocalDate subscriptionStartDate;

    /**
     * Database column: subscription_period
     * Type: int4
     */
    private Integer subscriptionPeriod;

    /**
     * Database column: subscription_renewal_date
     * Type: date
     */
    private java.time.LocalDate subscriptionRenewalDate;

    /**
     * Database column: payment_done
     * Type: bool
     */
    private Boolean paymentDone;

    /**
     * Database column: intimate_before
     * Type: int4
     */
    private Integer intimateBefore;

    /**
     * Database column: grace_period
     * Type: int4
     */
    private Integer gracePeriod;

    /**
     * Database column: workflow
     * Type: varchar(150)
     */
    private String workflow;

    /**
     * Database column: archived
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean archived;

    /**
     * Database column: created_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Default constructor
     */
    public License() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets organisations_id
     * @return Long
     */
    public Long getOrganisationsId() {
        return this.organisationsId;
    }

    /**
     * Sets organisations_id
     * @param organisationsId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrganisationsId(Long organisationsId) {
        if (organisationsId == null) {
            throw new IllegalArgumentException("organisations_id cannot be null");
        }
        this.organisationsId = organisationsId;
    }

    /**
     * Gets facilities_id
     * @return Long
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets facilities_id
     * @param facilitiesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets product
     * @return String
     */
    public String getProduct() {
        return this.product;
    }

    /**
     * Sets product
     * @param product the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setProduct(String product) {
        if (product != null && product.length() > 150) {
            throw new IllegalArgumentException("product length cannot exceed 150 characters");
        }
        this.product = product;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type != null && type.length() > 150) {
            throw new IllegalArgumentException("type length cannot exceed 150 characters");
        }
        this.type = type;
    }

    /**
     * Gets subscription_start_date
     * @return java.time.LocalDate
     */
    public java.time.LocalDate getSubscriptionStartDate() {
        return this.subscriptionStartDate;
    }

    /**
     * Sets subscription_start_date
     * @param subscriptionStartDate the value to set
     */
    public void setSubscriptionStartDate(java.time.LocalDate subscriptionStartDate) {
        this.subscriptionStartDate = subscriptionStartDate;
    }

    /**
     * Gets subscription_period
     * @return Integer
     */
    public Integer getSubscriptionPeriod() {
        return this.subscriptionPeriod;
    }

    /**
     * Sets subscription_period
     * @param subscriptionPeriod the value to set
     */
    public void setSubscriptionPeriod(Integer subscriptionPeriod) {
        this.subscriptionPeriod = subscriptionPeriod;
    }

    /**
     * Gets subscription_renewal_date
     * @return java.time.LocalDate
     */
    public java.time.LocalDate getSubscriptionRenewalDate() {
        return this.subscriptionRenewalDate;
    }

    /**
     * Sets subscription_renewal_date
     * @param subscriptionRenewalDate the value to set
     */
    public void setSubscriptionRenewalDate(java.time.LocalDate subscriptionRenewalDate) {
        this.subscriptionRenewalDate = subscriptionRenewalDate;
    }

    /**
     * Gets payment_done
     * @return Boolean
     */
    public Boolean getPaymentDone() {
        return this.paymentDone;
    }

    /**
     * Sets payment_done
     * @param paymentDone the value to set
     */
    public void setPaymentDone(Boolean paymentDone) {
        this.paymentDone = paymentDone;
    }

    /**
     * Gets intimate_before
     * @return Integer
     */
    public Integer getIntimateBefore() {
        return this.intimateBefore;
    }

    /**
     * Sets intimate_before
     * @param intimateBefore the value to set
     */
    public void setIntimateBefore(Integer intimateBefore) {
        this.intimateBefore = intimateBefore;
    }

    /**
     * Gets grace_period
     * @return Integer
     */
    public Integer getGracePeriod() {
        return this.gracePeriod;
    }

    /**
     * Sets grace_period
     * @param gracePeriod the value to set
     */
    public void setGracePeriod(Integer gracePeriod) {
        this.gracePeriod = gracePeriod;
    }

    /**
     * Gets workflow
     * @return String
     */
    public String getWorkflow() {
        return this.workflow;
    }

    /**
     * Sets workflow
     * @param workflow the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setWorkflow(String workflow) {
        if (workflow != null && workflow.length() > 150) {
            throw new IllegalArgumentException("workflow length cannot exceed 150 characters");
        }
        this.workflow = workflow;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setArchived(Boolean archived) {
        if (archived == null) {
            throw new IllegalArgumentException("archived cannot be null");
        }
        this.archived = archived;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     */
    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     */
    public void setModifiedBy(Long modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        License other = (License) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "License{" +
                "id=" + id +
                ", organisationsId=" + organisationsId +
                ", facilitiesId=" + facilitiesId +
                ", product=" + product +
                ", type=" + type +
                ", subscriptionStartDate=" + subscriptionStartDate +
                ", subscriptionPeriod=" + subscriptionPeriod +
                ", subscriptionRenewalDate=" + subscriptionRenewalDate +
                ", paymentDone=" + paymentDone +
                ", intimateBefore=" + intimateBefore +
                ", gracePeriod=" + gracePeriod +
                ", workflow=" + workflow +
                ", archived=" + archived +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                '}';
    }
}
