package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: automations
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: automations
 * - Primary Keys: id
 * 
 * Indexes:
 * - pk_automations (UNIQUE): id
 */
public class Automation implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: action_type
     * Type: varchar(50) NOT NULL
     */
    private String actionType;

    /**
     * Database column: target_entity_type
     * Type: varchar(50) NOT NULL
     */
    private String targetEntityType;

    /**
     * Database column: trigger_type
     * Type: varchar(50) NOT NULL
     */
    private String triggerType;

    /**
     * Database column: action_details
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode actionDetails;

    /**
     * Database column: trigger_details
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode triggerDetails;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     */
    private Long modifiedBy;

    /**
     * Database column: archived
     * Type: bool DEFAULT: false
     */
    private Boolean archived;

    /**
     * Default constructor
     */
    public Automation() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (type != null && type.length() > 50) {
            throw new IllegalArgumentException("type length cannot exceed 50 characters");
        }
        this.type = type;
    }

    /**
     * Gets action_type
     * @return String
     */
    public String getActionType() {
        return this.actionType;
    }

    /**
     * Sets action_type
     * @param actionType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setActionType(String actionType) {
        if (actionType == null) {
            throw new IllegalArgumentException("action_type cannot be null");
        }
        if (actionType != null && actionType.length() > 50) {
            throw new IllegalArgumentException("action_type length cannot exceed 50 characters");
        }
        this.actionType = actionType;
    }

    /**
     * Gets target_entity_type
     * @return String
     */
    public String getTargetEntityType() {
        return this.targetEntityType;
    }

    /**
     * Sets target_entity_type
     * @param targetEntityType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTargetEntityType(String targetEntityType) {
        if (targetEntityType == null) {
            throw new IllegalArgumentException("target_entity_type cannot be null");
        }
        if (targetEntityType != null && targetEntityType.length() > 50) {
            throw new IllegalArgumentException("target_entity_type length cannot exceed 50 characters");
        }
        this.targetEntityType = targetEntityType;
    }

    /**
     * Gets trigger_type
     * @return String
     */
    public String getTriggerType() {
        return this.triggerType;
    }

    /**
     * Sets trigger_type
     * @param triggerType the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerType(String triggerType) {
        if (triggerType == null) {
            throw new IllegalArgumentException("trigger_type cannot be null");
        }
        if (triggerType != null && triggerType.length() > 50) {
            throw new IllegalArgumentException("trigger_type length cannot exceed 50 characters");
        }
        this.triggerType = triggerType;
    }

    /**
     * Gets action_details
     * @return JsonNode
     */
    public JsonNode getActionDetails() {
        return this.actionDetails;
    }

    /**
     * Sets action_details
     * @param actionDetails the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setActionDetails(JsonNode actionDetails) {
        if (actionDetails == null) {
            throw new IllegalArgumentException("action_details cannot be null");
        }
        this.actionDetails = actionDetails;
    }

    /**
     * Gets trigger_details
     * @return JsonNode
     */
    public JsonNode getTriggerDetails() {
        return this.triggerDetails;
    }

    /**
     * Sets trigger_details
     * @param triggerDetails the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setTriggerDetails(JsonNode triggerDetails) {
        if (triggerDetails == null) {
            throw new IllegalArgumentException("trigger_details cannot be null");
        }
        this.triggerDetails = triggerDetails;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets archived
     * @return Boolean
     */
    public Boolean getArchived() {
        return this.archived;
    }

    /**
     * Sets archived
     * @param archived the value to set
     */
    public void setArchived(Boolean archived) {
        this.archived = archived;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Automation other = (Automation) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "Automation{" +
                "id=" + id +
                ", type=" + type +
                ", actionType=" + actionType +
                ", targetEntityType=" + targetEntityType +
                ", triggerType=" + triggerType +
                ", actionDetails=" + actionDetails +
                ", triggerDetails=" + triggerDetails +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                ", archived=" + archived +
                '}';
    }
}
