package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;
import com.fasterxml.jackson.databind.JsonNode;

/**
 * POJO class for table: task_schedules
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: task_schedules
 * - Primary Keys: id
 * 
 * Indexes:
 * - pk_task_schedules (UNIQUE): id
 * 
 * Foreign Keys:
 * - referenced_tasks_id → tasks.id
 */
public class TaskSchedule implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: type
     * Type: varchar(50) NOT NULL
     */
    private String type;

    /**
     * Database column: referenced_tasks_id
     * Type: int8
     * Foreign Key → tasks.id
     */
    private Long referencedTasksId;

    /**
     * Database column: condition
     * Type: varchar(50) NOT NULL
     */
    private String condition;

    /**
     * Database column: start_date_interval
     * Type: int4 NOT NULL
     */
    private Integer startDateInterval;

    /**
     * Database column: start_date_duration
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode startDateDuration;

    /**
     * Database column: due_date_interval
     * Type: int4 NOT NULL
     */
    private Integer dueDateInterval;

    /**
     * Database column: due_date_duration
     * Type: jsonb NOT NULL DEFAULT: '{}'::jsonb
     */
    private JsonNode dueDateDuration;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     */
    private Long createdBy;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     */
    private Long modifiedBy;

    /**
     * Default constructor
     */
    public TaskSchedule() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets type
     * @return String
     */
    public String getType() {
        return this.type;
    }

    /**
     * Sets type
     * @param type the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setType(String type) {
        if (type == null) {
            throw new IllegalArgumentException("type cannot be null");
        }
        if (type != null && type.length() > 50) {
            throw new IllegalArgumentException("type length cannot exceed 50 characters");
        }
        this.type = type;
    }

    /**
     * Gets referenced_tasks_id
     * @return Long
     */
    public Long getReferencedTasksId() {
        return this.referencedTasksId;
    }

    /**
     * Sets referenced_tasks_id
     * @param referencedTasksId the value to set
     */
    public void setReferencedTasksId(Long referencedTasksId) {
        this.referencedTasksId = referencedTasksId;
    }

    /**
     * Gets condition
     * @return String
     */
    public String getCondition() {
        return this.condition;
    }

    /**
     * Sets condition
     * @param condition the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCondition(String condition) {
        if (condition == null) {
            throw new IllegalArgumentException("condition cannot be null");
        }
        if (condition != null && condition.length() > 50) {
            throw new IllegalArgumentException("condition length cannot exceed 50 characters");
        }
        this.condition = condition;
    }

    /**
     * Gets start_date_interval
     * @return Integer
     */
    public Integer getStartDateInterval() {
        return this.startDateInterval;
    }

    /**
     * Sets start_date_interval
     * @param startDateInterval the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setStartDateInterval(Integer startDateInterval) {
        if (startDateInterval == null) {
            throw new IllegalArgumentException("start_date_interval cannot be null");
        }
        this.startDateInterval = startDateInterval;
    }

    /**
     * Gets start_date_duration
     * @return JsonNode
     */
    public JsonNode getStartDateDuration() {
        return this.startDateDuration;
    }

    /**
     * Sets start_date_duration
     * @param startDateDuration the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setStartDateDuration(JsonNode startDateDuration) {
        if (startDateDuration == null) {
            throw new IllegalArgumentException("start_date_duration cannot be null");
        }
        this.startDateDuration = startDateDuration;
    }

    /**
     * Gets due_date_interval
     * @return Integer
     */
    public Integer getDueDateInterval() {
        return this.dueDateInterval;
    }

    /**
     * Sets due_date_interval
     * @param dueDateInterval the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDueDateInterval(Integer dueDateInterval) {
        if (dueDateInterval == null) {
            throw new IllegalArgumentException("due_date_interval cannot be null");
        }
        this.dueDateInterval = dueDateInterval;
    }

    /**
     * Gets due_date_duration
     * @return JsonNode
     */
    public JsonNode getDueDateDuration() {
        return this.dueDateDuration;
    }

    /**
     * Sets due_date_duration
     * @param dueDateDuration the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setDueDateDuration(JsonNode dueDateDuration) {
        if (dueDateDuration == null) {
            throw new IllegalArgumentException("due_date_duration cannot be null");
        }
        this.dueDateDuration = dueDateDuration;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        TaskSchedule other = (TaskSchedule) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "TaskSchedule{" +
                "id=" + id +
                ", type=" + type +
                ", referencedTasksId=" + referencedTasksId +
                ", condition=" + condition +
                ", startDateInterval=" + startDateInterval +
                ", startDateDuration=" + startDateDuration +
                ", dueDateInterval=" + dueDateInterval +
                ", dueDateDuration=" + dueDateDuration +
                ", createdAt=" + createdAt +
                ", modifiedAt=" + modifiedAt +
                ", createdBy=" + createdBy +
                ", modifiedBy=" + modifiedBy +
                '}';
    }
}
