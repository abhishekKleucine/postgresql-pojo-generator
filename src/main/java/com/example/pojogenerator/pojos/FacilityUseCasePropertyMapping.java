package com.example.pojogenerator.pojos;

import java.io.Serializable;
import java.util.Objects;

/**
 * POJO class for table: facility_use_case_property_mapping
 * Generated by PostgreSQL POJO Generator
 * 
 * Table Information:
 * - Table Name: facility_use_case_property_mapping
 * - Primary Keys: id
 * 
 * Indexes:
 * - unqb9f98ab5cb984e9d913b10d8 (UNIQUE): facilities_id, use_cases_id, properties_id
 * - idxde693d8b33bc41baaac62ded: facilities_id, use_cases_id
 * 
 * Foreign Keys:
 * - facilities_id → facilities.id
 * - use_cases_id → use_cases.id
 * - properties_id → properties.id
 * - created_by → users.id
 * - modified_by → users.id
 */
public class FacilityUseCasePropertyMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Database column: id
     * Type: int8 NOT NULL
     * Primary Key
     */
    private Long id;

    /**
     * Database column: facilities_id
     * Type: int8 NOT NULL
     * Foreign Key → facilities.id
     */
    private Long facilitiesId;

    /**
     * Database column: use_cases_id
     * Type: int8 NOT NULL
     * Foreign Key → use_cases.id
     */
    private Long useCasesId;

    /**
     * Database column: properties_id
     * Type: int8 NOT NULL
     * Foreign Key → properties.id
     */
    private Long propertiesId;

    /**
     * Database column: label_alias
     * Type: varchar(255) NOT NULL
     */
    private String labelAlias;

    /**
     * Database column: place_holder_alias
     * Type: varchar(512) NOT NULL
     */
    private String placeHolderAlias;

    /**
     * Database column: order_tree
     * Type: int4 NOT NULL DEFAULT: 1
     */
    private Integer orderTree;

    /**
     * Database column: is_mandatory
     * Type: bool NOT NULL DEFAULT: false
     */
    private Boolean isMandatory;

    /**
     * Database column: created_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long createdBy;

    /**
     * Database column: created_at
     * Type: int8 NOT NULL
     */
    private Long createdAt;

    /**
     * Database column: modified_by
     * Type: int8 NOT NULL
     * Foreign Key → users.id
     */
    private Long modifiedBy;

    /**
     * Database column: modified_at
     * Type: int8 NOT NULL
     */
    private Long modifiedAt;

    /**
     * Default constructor
     */
    public FacilityUseCasePropertyMapping() {
    }

    /**
     * Gets id
     * @return Long
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Sets id
     * @param id the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setId(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("id cannot be null");
        }
        this.id = id;
    }

    /**
     * Gets facilities_id
     * @return Long
     */
    public Long getFacilitiesId() {
        return this.facilitiesId;
    }

    /**
     * Sets facilities_id
     * @param facilitiesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setFacilitiesId(Long facilitiesId) {
        if (facilitiesId == null) {
            throw new IllegalArgumentException("facilities_id cannot be null");
        }
        this.facilitiesId = facilitiesId;
    }

    /**
     * Gets use_cases_id
     * @return Long
     */
    public Long getUseCasesId() {
        return this.useCasesId;
    }

    /**
     * Sets use_cases_id
     * @param useCasesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setUseCasesId(Long useCasesId) {
        if (useCasesId == null) {
            throw new IllegalArgumentException("use_cases_id cannot be null");
        }
        this.useCasesId = useCasesId;
    }

    /**
     * Gets properties_id
     * @return Long
     */
    public Long getPropertiesId() {
        return this.propertiesId;
    }

    /**
     * Sets properties_id
     * @param propertiesId the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPropertiesId(Long propertiesId) {
        if (propertiesId == null) {
            throw new IllegalArgumentException("properties_id cannot be null");
        }
        this.propertiesId = propertiesId;
    }

    /**
     * Gets label_alias
     * @return String
     */
    public String getLabelAlias() {
        return this.labelAlias;
    }

    /**
     * Sets label_alias
     * @param labelAlias the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setLabelAlias(String labelAlias) {
        if (labelAlias == null) {
            throw new IllegalArgumentException("label_alias cannot be null");
        }
        if (labelAlias != null && labelAlias.length() > 255) {
            throw new IllegalArgumentException("label_alias length cannot exceed 255 characters");
        }
        this.labelAlias = labelAlias;
    }

    /**
     * Gets place_holder_alias
     * @return String
     */
    public String getPlaceHolderAlias() {
        return this.placeHolderAlias;
    }

    /**
     * Sets place_holder_alias
     * @param placeHolderAlias the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setPlaceHolderAlias(String placeHolderAlias) {
        if (placeHolderAlias == null) {
            throw new IllegalArgumentException("place_holder_alias cannot be null");
        }
        if (placeHolderAlias != null && placeHolderAlias.length() > 512) {
            throw new IllegalArgumentException("place_holder_alias length cannot exceed 512 characters");
        }
        this.placeHolderAlias = placeHolderAlias;
    }

    /**
     * Gets order_tree
     * @return Integer
     */
    public Integer getOrderTree() {
        return this.orderTree;
    }

    /**
     * Sets order_tree
     * @param orderTree the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setOrderTree(Integer orderTree) {
        if (orderTree == null) {
            throw new IllegalArgumentException("order_tree cannot be null");
        }
        this.orderTree = orderTree;
    }

    /**
     * Gets is_mandatory
     * @return Boolean
     */
    public Boolean getIsMandatory() {
        return this.isMandatory;
    }

    /**
     * Sets is_mandatory
     * @param isMandatory the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setIsMandatory(Boolean isMandatory) {
        if (isMandatory == null) {
            throw new IllegalArgumentException("is_mandatory cannot be null");
        }
        this.isMandatory = isMandatory;
    }

    /**
     * Gets created_by
     * @return Long
     */
    public Long getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Sets created_by
     * @param createdBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedBy(Long createdBy) {
        if (createdBy == null) {
            throw new IllegalArgumentException("created_by cannot be null");
        }
        this.createdBy = createdBy;
    }

    /**
     * Gets created_at
     * @return Long
     */
    public Long getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Sets created_at
     * @param createdAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setCreatedAt(Long createdAt) {
        if (createdAt == null) {
            throw new IllegalArgumentException("created_at cannot be null");
        }
        this.createdAt = createdAt;
    }

    /**
     * Gets modified_by
     * @return Long
     */
    public Long getModifiedBy() {
        return this.modifiedBy;
    }

    /**
     * Sets modified_by
     * @param modifiedBy the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedBy(Long modifiedBy) {
        if (modifiedBy == null) {
            throw new IllegalArgumentException("modified_by cannot be null");
        }
        this.modifiedBy = modifiedBy;
    }

    /**
     * Gets modified_at
     * @return Long
     */
    public Long getModifiedAt() {
        return this.modifiedAt;
    }

    /**
     * Sets modified_at
     * @param modifiedAt the value to set
     * @throws IllegalArgumentException if constraint validation fails
     */
    public void setModifiedAt(Long modifiedAt) {
        if (modifiedAt == null) {
            throw new IllegalArgumentException("modified_at cannot be null");
        }
        this.modifiedAt = modifiedAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        FacilityUseCasePropertyMapping other = (FacilityUseCasePropertyMapping) obj;
        return Objects.equals(this.id, other.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id);
    }

    @Override
    public String toString() {
        return "FacilityUseCasePropertyMapping{" +
                "id=" + id +
                ", facilitiesId=" + facilitiesId +
                ", useCasesId=" + useCasesId +
                ", propertiesId=" + propertiesId +
                ", labelAlias=" + labelAlias +
                ", placeHolderAlias=" + placeHolderAlias +
                ", orderTree=" + orderTree +
                ", isMandatory=" + isMandatory +
                ", createdBy=" + createdBy +
                ", createdAt=" + createdAt +
                ", modifiedBy=" + modifiedBy +
                ", modifiedAt=" + modifiedAt +
                '}';
    }
}
